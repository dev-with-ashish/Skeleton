{% doc %}
  @prompt
    a responsive product section for product page which diplay the product title and price along with its variant prices and in the left three layer setuep one for the admin to upload the base shape image above that a user uploaded image layer which will have the mask of the base shape and above all the third layer having the mask of the base shape too, option to select the product so that the product variants and its prices can be displayed, option to select the product so that the user can select the variants to see the price, unable to select the variant, make the variant selection work map it using theme varaint picker or similarly so it works smoothly, why price update takes time it should be updated instantly as variant change or selected, user uploaded image option should not be in the admin panel it is for the user to upload the image, where is the third admin layer(having base shape mask property) to upload the overlay image above the user uplaoded design, let the user click on the whole left panel to uplaod the design, let the user resize drag move the image contrained within the mask, the user uplaoded image should have drag and resize feature using the corner of the image, remove the shole left as upload design feature add a upload button the the right for the user to upload image so user can interact with the deign in the left, add buy now and add to cart button make sure the image get attached with the order using Line item properties
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-product-customizer-{{ ai_gen_id }} {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 40px;
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
    font-family: {{ settings.type_primary_font.family }}, sans-serif;
  }

  .ai-product-preview-{{ ai_gen_id }} {
    position: relative;
    aspect-ratio: 1;
    background-color: #f8f8f8;
    border-radius: 12px;
    overflow: hidden;
    border: 2px solid #e0e0e0;
  }

  .ai-layer-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  .ai-base-layer-{{ ai_gen_id }} img,
  .ai-overlay-layer-{{ ai_gen_id }} img {
    width: 100%;
    height: 100%;
    object-fit: contain;
  }

  .ai-user-layer-{{ ai_gen_id }} {
    mask: url({{ block.settings.base_shape_image | image_url }}) no-repeat center/contain;
    -webkit-mask: url({{ block.settings.base_shape_image | image_url }}) no-repeat center/contain;
  }

  .ai-overlay-layer-{{ ai_gen_id }} {
    mask: url({{ block.settings.base_shape_image | image_url }}) no-repeat center/contain;
    -webkit-mask: url({{ block.settings.base_shape_image | image_url }}) no-repeat center/contain;
    pointer-events: none;
  }

  .ai-user-image-{{ ai_gen_id }} {
    position: absolute;
    cursor: move;
    border: 2px solid transparent;
    transition: border-color 0.2s ease;
  }

  .ai-user-image-{{ ai_gen_id }}.selected {
    border-color: #007cba;
  }

  .ai-user-image-{{ ai_gen_id }} img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }

  .ai-resize-handle-{{ ai_gen_id }} {
    position: absolute;
    width: 12px;
    height: 12px;
    background-color: #007cba;
    border: 2px solid white;
    border-radius: 50%;
    cursor: nw-resize;
    opacity: 0;
    transition: opacity 0.2s ease;
  }

  .ai-user-image-{{ ai_gen_id }}.selected .ai-resize-handle-{{ ai_gen_id }} {
    opacity: 1;
  }

  .ai-resize-handle-{{ ai_gen_id }}.top-left { top: -6px; left: -6px; cursor: nw-resize; }
  .ai-resize-handle-{{ ai_gen_id }}.top-right { top: -6px; right: -6px; cursor: ne-resize; }
  .ai-resize-handle-{{ ai_gen_id }}.bottom-left { bottom: -6px; left: -6px; cursor: sw-resize; }
  .ai-resize-handle-{{ ai_gen_id }}.bottom-right { bottom: -6px; right: -6px; cursor: se-resize; }

  .ai-product-details-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    gap: 24px;
  }

  .ai-product-title-{{ ai_gen_id }} {
    font-size: 28px;
    font-weight: 700;
    color: {{ settings.foreground_color }};
    margin: 0;
    line-height: 1.2;
  }

  .ai-product-price-{{ ai_gen_id }} {
    font-size: 24px;
    font-weight: 600;
    color: {{ settings.foreground_color }};
    margin: 0;
  }

  .ai-variant-selector-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    gap: 16px;
  }

  .ai-variant-option-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .ai-variant-label-{{ ai_gen_id }} {
    font-size: 16px;
    font-weight: 600;
    color: {{ settings.foreground_color }};
  }

  .ai-variant-values-{{ ai_gen_id }} {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
  }

  .ai-variant-value-{{ ai_gen_id }} {
    padding: 8px 16px;
    border: 2px solid #e0e0e0;
    border-radius: {{ settings.input_corner_radius }}px;
    background-color: {{ settings.background_color }};
    color: {{ settings.foreground_color }};
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 14px;
  }

  .ai-variant-value-{{ ai_gen_id }}:hover {
    border-color: #007cba;
  }

  .ai-variant-value-{{ ai_gen_id }}.selected {
    border-color: #007cba;
    background-color: #007cba;
    color: white;
  }

  .ai-upload-section-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    gap: 16px;
    padding: 20px;
    border: 2px dashed #e0e0e0;
    border-radius: 12px;
    background-color: #fafafa;
  }

  .ai-upload-button-{{ ai_gen_id }} {
    padding: 12px 24px;
    background-color: {{ block.settings.upload_button_color }};
    color: {{ block.settings.upload_button_text_color }};
    border: none;
    border-radius: {{ settings.input_corner_radius }}px;
    cursor: pointer;
    font-size: 16px;
    font-weight: 600;
    transition: background-color 0.2s ease;
  }

  .ai-upload-button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.upload_button_hover_color }};
  }

  .ai-upload-input-{{ ai_gen_id }} {
    display: none;
  }

  .ai-upload-status-{{ ai_gen_id }} {
    font-size: 14px;
    color: #666;
    text-align: center;
  }

  .ai-cart-buttons-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .ai-cart-button-{{ ai_gen_id }} {
    padding: 16px 24px;
    border: none;
    border-radius: {{ settings.input_corner_radius }}px;
    cursor: pointer;
    font-size: 16px;
    font-weight: 600;
    transition: all 0.2s ease;
    text-align: center;
    text-decoration: none;
    display: inline-block;
  }

  .ai-add-to-cart-{{ ai_gen_id }} {
    background-color: {{ block.settings.add_to_cart_color }};
    color: {{ block.settings.add_to_cart_text_color }};
  }

  .ai-add-to-cart-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.add_to_cart_hover_color }};
  }

  .ai-buy-now-{{ ai_gen_id }} {
    background-color: {{ block.settings.buy_now_color }};
    color: {{ block.settings.buy_now_text_color }};
  }

  .ai-buy-now-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.buy_now_hover_color }};
  }

  .ai-cart-button-{{ ai_gen_id }}:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  @media screen and (max-width: 768px) {
    .ai-product-customizer-{{ ai_gen_id }} {
      grid-template-columns: 1fr;
      gap: 24px;
    }

    .ai-product-title-{{ ai_gen_id }} {
      font-size: 24px;
    }

    .ai-product-price-{{ ai_gen_id }} {
      font-size: 20px;
    }
  }
{% endstyle %}

<product-customizer-{{ ai_gen_id }}
  class="ai-product-customizer-{{ ai_gen_id }}"
  data-product-id="{{ block.settings.selected_product.id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-product-preview-{{ ai_gen_id }}">
    {% if block.settings.base_shape_image %}
      <div class="ai-layer-{{ ai_gen_id }} ai-base-layer-{{ ai_gen_id }}">
        <img
          src="{{ block.settings.base_shape_image | image_url: width: 800 }}"
          alt="Base shape"
          loading="lazy"
        >
      </div>
    {% else %}
      <div class="ai-layer-{{ ai_gen_id }} ai-base-layer-{{ ai_gen_id }}">
        {{ 'product-1' | placeholder_svg_tag }}
      </div>
    {% endif %}

    <div class="ai-layer-{{ ai_gen_id }} ai-user-layer-{{ ai_gen_id }}">
      <div class="ai-user-image-{{ ai_gen_id }}" style="display: none;">
        <img alt="User uploaded design">
        <div class="ai-resize-handle-{{ ai_gen_id }} top-left"></div>
        <div class="ai-resize-handle-{{ ai_gen_id }} top-right"></div>
        <div class="ai-resize-handle-{{ ai_gen_id }} bottom-left"></div>
        <div class="ai-resize-handle-{{ ai_gen_id }} bottom-right"></div>
      </div>
    </div>

    {% if block.settings.overlay_image %}
      <div class="ai-layer-{{ ai_gen_id }} ai-overlay-layer-{{ ai_gen_id }}">
        <img
          src="{{ block.settings.overlay_image | image_url: width: 800 }}"
          alt="Overlay"
          loading="lazy"
        >
      </div>
    {% endif %}
  </div>

  <div class="ai-product-details-{{ ai_gen_id }}">
    {% if block.settings.selected_product %}
      <h1 class="ai-product-title-{{ ai_gen_id }}">{{ block.settings.selected_product.title }}</h1>
      
      <div class="ai-product-price-{{ ai_gen_id }}" data-price-display>
        {{ block.settings.selected_product.price | money }}
      </div>

      {% if block.settings.selected_product.has_only_default_variant == false %}
        <div class="ai-variant-selector-{{ ai_gen_id }}">
          {% for option in block.settings.selected_product.options_with_values %}
            <div class="ai-variant-option-{{ ai_gen_id }}">
              <label class="ai-variant-label-{{ ai_gen_id }}">{{ option.name }}</label>
              <div class="ai-variant-values-{{ ai_gen_id }}">
                {% for value in option.values %}
                  <button
                    type="button"
                    class="ai-variant-value-{{ ai_gen_id }}"
                    data-option-position="{{ option.position }}"
                    data-option-value="{{ value }}"
                  >
                    {{ value }}
                  </button>
                {% endfor %}
              </div>
            </div>
          {% endfor %}
        </div>
      {% endif %}

      <div class="ai-upload-section-{{ ai_gen_id }}">
        <button type="button" class="ai-upload-button-{{ ai_gen_id }}">
          {{ block.settings.upload_button_text }}
        </button>
        <input
          type="file"
          class="ai-upload-input-{{ ai_gen_id }}"
          accept="image/*"
        >
        <div class="ai-upload-status-{{ ai_gen_id }}">
          No design uploaded
        </div>
      </div>

      <form class="ai-cart-form-{{ ai_gen_id }}" action="/cart/add" method="post" enctype="multipart/form-data">
        <input type="hidden" name="id" class="ai-variant-id-{{ ai_gen_id }}" value="{{ block.settings.selected_product.selected_or_first_available_variant.id }}">
        <input type="hidden" name="quantity" value="1">
        <input type="hidden" name="properties[Custom Design]" class="ai-design-data-{{ ai_gen_id }}" value="">
        <input type="hidden" name="properties[Design Position]" class="ai-design-position-{{ ai_gen_id }}" value="">
        <input type="hidden" name="properties[Design Size]" class="ai-design-size-{{ ai_gen_id }}" value="">

        <div class="ai-cart-buttons-{{ ai_gen_id }}">
          <button
            type="submit"
            class="ai-cart-button-{{ ai_gen_id }} ai-add-to-cart-{{ ai_gen_id }}"
            name="add"
          >
            {{ block.settings.add_to_cart_text }}
          </button>
          
          <button
            type="submit"
            class="ai-cart-button-{{ ai_gen_id }} ai-buy-now-{{ ai_gen_id }}"
            name="add"
            formaction="/cart/add"
            data-buy-now
          >
            {{ block.settings.buy_now_text }}
          </button>
        </div>
      </form>
    {% else %}
      <div class="ai-upload-status-{{ ai_gen_id }}">
        Please select a product in the block settings
      </div>
    {% endif %}
  </div>
</product-customizer-{{ ai_gen_id }}>

<script>
  (function() {
    class ProductCustomizer{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.productData = null;
        this.selectedOptions = {};
        this.currentVariant = null;
        this.userImage = null;
        this.imagePosition = { x: 50, y: 50 };
        this.imageSize = { width: 200, height: 200 };
        this.isDragging = false;
        this.isResizing = false;
        this.dragStart = { x: 0, y: 0 };
        this.resizeStart = { x: 0, y: 0, width: 0, height: 0 };
        this.activeHandle = null;
      }

      connectedCallback() {
        this.loadProductData();
        this.setupEventListeners();
      }

      async loadProductData() {
        const productId = this.dataset.productId;
        if (!productId) return;

        try {
          const response = await fetch(`/products/${productId}.js`);
          this.productData = await response.json();
          this.initializeVariants();
        } catch (error) {
          console.error('Failed to load product data:', error);
        }
      }

      initializeVariants() {
        if (!this.productData || !this.productData.variants) return;

        const variantButtons = this.querySelectorAll('.ai-variant-value-{{ ai_gen_id }}');
        const firstVariant = this.productData.variants[0];
        
        if (firstVariant) {
          this.currentVariant = firstVariant;
          firstVariant.options.forEach((option, index) => {
            this.selectedOptions[index + 1] = option;
          });
          
          variantButtons.forEach(button => {
            const position = parseInt(button.dataset.optionPosition);
            const value = button.dataset.optionValue;
            if (this.selectedOptions[position] === value) {
              button.classList.add('selected');
            }
          });
          
          this.updatePrice();
          this.updateVariantId();
        }
      }

      setupEventListeners() {
        const variantButtons = this.querySelectorAll('.ai-variant-value-{{ ai_gen_id }}');
        const uploadButton = this.querySelector('.ai-upload-button-{{ ai_gen_id }}');
        const uploadInput = this.querySelector('.ai-upload-input-{{ ai_gen_id }}');
        const userImageEl = this.querySelector('.ai-user-image-{{ ai_gen_id }}');
        const buyNowButton = this.querySelector('[data-buy-now]');

        variantButtons.forEach(button => {
          button.addEventListener('click', () => this.handleVariantSelection(button));
        });

        if (uploadButton && uploadInput) {
          uploadButton.addEventListener('click', () => uploadInput.click());
          uploadInput.addEventListener('change', (e) => this.handleImageUpload(e));
        }

        if (userImageEl) {
          this.setupImageInteraction(userImageEl);
        }

        if (buyNowButton) {
          buyNowButton.addEventListener('click', (e) => this.handleBuyNow(e));
        }

        const form = this.querySelector('.ai-cart-form-{{ ai_gen_id }}');
        if (form) {
          form.addEventListener('submit', (e) => this.handleFormSubmit(e));
        }
      }

      handleVariantSelection(button) {
        const position = parseInt(button.dataset.optionPosition);
        const value = button.dataset.optionValue;

        this.querySelectorAll(`[data-option-position="${position}"]`).forEach(btn => {
          btn.classList.remove('selected');
        });
        button.classList.add('selected');

        this.selectedOptions[position] = value;
        this.findMatchingVariant();
        this.updatePrice();
        this.updateVariantId();
      }

      findMatchingVariant() {
        if (!this.productData) return;

        const variant = this.productData.variants.find(v => {
          return v.options.every((option, index) => {
            return this.selectedOptions[index + 1] === option;
          });
        });

        if (variant) {
          this.currentVariant = variant;
        }
      }

      updatePrice() {
        const priceDisplay = this.querySelector('[data-price-display]');
        if (priceDisplay && this.currentVariant) {
          const price = new Intl.NumberFormat('en-IN', {
            style: 'currency',
            currency: 'INR'
          }).format(this.currentVariant.price / 100);
          priceDisplay.textContent = price;
        }
      }

      updateVariantId() {
        const variantIdInput = this.querySelector('.ai-variant-id-{{ ai_gen_id }}');
        if (variantIdInput && this.currentVariant) {
          variantIdInput.value = this.currentVariant.id;
        }
      }

      handleImageUpload(event) {
        const file = event.target.files[0];
        if (!file) return;

        const reader = new FileReader();
        reader.onload = (e) => {
          this.userImage = e.target.result;
          this.displayUserImage();
          this.updateUploadStatus('Design uploaded successfully');
          this.updateDesignData();
        };
        reader.readAsDataURL(file);
      }

      displayUserImage() {
        const userImageEl = this.querySelector('.ai-user-image-{{ ai_gen_id }}');
        const img = userImageEl.querySelector('img');
        
        if (img && this.userImage) {
          img.src = this.userImage;
          userImageEl.style.display = 'block';
          userImageEl.style.left = this.imagePosition.x + '%';
          userImageEl.style.top = this.imagePosition.y + '%';
          userImageEl.style.width = this.imageSize.width + 'px';
          userImageEl.style.height = this.imageSize.height + 'px';
          userImageEl.style.transform = 'translate(-50%, -50%)';
        }
      }

      setupImageInteraction(userImageEl) {
        const img = userImageEl.querySelector('img');
        const handles = userImageEl.querySelectorAll('.ai-resize-handle-{{ ai_gen_id }}');

        userImageEl.addEventListener('mousedown', (e) => {
          if (e.target.classList.contains('ai-resize-handle-{{ ai_gen_id }}')) {
            this.startResize(e);
          } else {
            this.startDrag(e);
          }
          userImageEl.classList.add('selected');
        });

        userImageEl.addEventListener('click', (e) => {
          e.stopPropagation();
          userImageEl.classList.add('selected');
        });

        document.addEventListener('click', (e) => {
          if (!userImageEl.contains(e.target)) {
            userImageEl.classList.remove('selected');
          }
        });

        document.addEventListener('mousemove', (e) => {
          if (this.isDragging) {
            this.handleDrag(e);
          } else if (this.isResizing) {
            this.handleResize(e);
          }
        });

        document.addEventListener('mouseup', () => {
          this.isDragging = false;
          this.isResizing = false;
          this.activeHandle = null;
          this.updateDesignData();
        });
      }

      startDrag(e) {
        this.isDragging = true;
        this.dragStart.x = e.clientX - (this.imagePosition.x * this.querySelector('.ai-product-preview-{{ ai_gen_id }}').offsetWidth / 100);
        this.dragStart.y = e.clientY - (this.imagePosition.y * this.querySelector('.ai-product-preview-{{ ai_gen_id }}').offsetHeight / 100);
        e.preventDefault();
      }

      handleDrag(e) {
        const preview = this.querySelector('.ai-product-preview-{{ ai_gen_id }}');
        const rect = preview.getBoundingClientRect();
        
        this.imagePosition.x = Math.max(0, Math.min(100, ((e.clientX - this.dragStart.x) / rect.width) * 100));
        this.imagePosition.y = Math.max(0, Math.min(100, ((e.clientY - this.dragStart.y) / rect.height) * 100));
        
        this.displayUserImage();
      }

      startResize(e) {
        this.isResizing = true;
        this.activeHandle = e.target;
        this.resizeStart.x = e.clientX;
        this.resizeStart.y = e.clientY;
        this.resizeStart.width = this.imageSize.width;
        this.resizeStart.height = this.imageSize.height;
        e.preventDefault();
        e.stopPropagation();
      }

      handleResize(e) {
        const deltaX = e.clientX - this.resizeStart.x;
        const deltaY = e.clientY - this.resizeStart.y;
        
        let newWidth = this.resizeStart.width;
        let newHeight = this.resizeStart.height;

        if (this.activeHandle.classList.contains('bottom-right')) {
          newWidth = Math.max(50, this.resizeStart.width + deltaX);
          newHeight = Math.max(50, this.resizeStart.height + deltaY);
        } else if (this.activeHandle.classList.contains('bottom-left')) {
          newWidth = Math.max(50, this.resizeStart.width - deltaX);
          newHeight = Math.max(50, this.resizeStart.height + deltaY);
        } else if (this.activeHandle.classList.contains('top-right')) {
          newWidth = Math.max(50, this.resizeStart.width + deltaX);
          newHeight = Math.max(50, this.resizeStart.height - deltaY);
        } else if (this.activeHandle.classList.contains('top-left')) {
          newWidth = Math.max(50, this.resizeStart.width - deltaX);
          newHeight = Math.max(50, this.resizeStart.height - deltaY);
        }

        this.imageSize.width = Math.min(400, newWidth);
        this.imageSize.height = Math.min(400, newHeight);
        
        this.displayUserImage();
      }

      updateUploadStatus(message) {
        const status = this.querySelector('.ai-upload-status-{{ ai_gen_id }}');
        if (status) {
          status.textContent = message;
        }
      }

      updateDesignData() {
        const designDataInput = this.querySelector('.ai-design-data-{{ ai_gen_id }}');
        const positionInput = this.querySelector('.ai-design-position-{{ ai_gen_id }}');
        const sizeInput = this.querySelector('.ai-design-size-{{ ai_gen_id }}');

        if (this.userImage) {
          if (designDataInput) designDataInput.value = this.userImage;
          if (positionInput) positionInput.value = `${this.imagePosition.x}%,${this.imagePosition.y}%`;
          if (sizeInput) sizeInput.value = `${this.imageSize.width}px,${this.imageSize.height}px`;
        }
      }

      handleFormSubmit(e) {
        if (!this.userImage) {
          e.preventDefault();
          alert('Please upload a design before adding to cart.');
          return;
        }
        this.updateDesignData();
      }

      handleBuyNow(e) {
        if (!this.userImage) {
          e.preventDefault();
          alert('Please upload a design before proceeding.');
          return;
        }
        
        this.updateDesignData();
        
        setTimeout(() => {
          window.location.href = '/checkout';
        }, 100);
      }
    }

    customElements.define('product-customizer-{{ ai_gen_id }}', ProductCustomizer{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Product customizer",
  "settings": [
    {
      "type": "header",
      "content": "Product"
    },
    {
      "type": "product",
      "id": "selected_product",
      "label": "Product"
    },
    {
      "type": "header",
      "content": "Design layers"
    },
    {
      "type": "image_picker",
      "id": "base_shape_image",
      "label": "Base shape image"
    },
    {
      "type": "image_picker",
      "id": "overlay_image",
      "label": "Overlay image"
    },
    {
      "type": "header",
      "content": "Upload button"
    },
    {
      "type": "text",
      "id": "upload_button_text",
      "label": "Upload button text",
      "default": "Upload Your Design"
    },
    {
      "type": "color",
      "id": "upload_button_color",
      "label": "Upload button color",
      "default": "#007cba"
    },
    {
      "type": "color",
      "id": "upload_button_text_color",
      "label": "Upload button text color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "upload_button_hover_color",
      "label": "Upload button hover color",
      "default": "#005a87"
    },
    {
      "type": "header",
      "content": "Cart buttons"
    },
    {
      "type": "text",
      "id": "add_to_cart_text",
      "label": "Add to cart text",
      "default": "Add to Cart"
    },
    {
      "type": "color",
      "id": "add_to_cart_color",
      "label": "Add to cart color",
      "default": "#28a745"
    },
    {
      "type": "color",
      "id": "add_to_cart_text_color",
      "label": "Add to cart text color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "add_to_cart_hover_color",
      "label": "Add to cart hover color",
      "default": "#218838"
    },
    {
      "type": "text",
      "id": "buy_now_text",
      "label": "Buy now text",
      "default": "Buy Now"
    },
    {
      "type": "color",
      "id": "buy_now_color",
      "label": "Buy now color",
      "default": "#dc3545"
    },
    {
      "type": "color",
      "id": "buy_now_text_color",
      "label": "Buy now text color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "buy_now_hover_color",
      "label": "Buy now hover color",
      "default": "#c82333"
    }
  ],
  "presets": [
    {
      "name": "Product customizer"
    }
  ]
}
{% endschema %}