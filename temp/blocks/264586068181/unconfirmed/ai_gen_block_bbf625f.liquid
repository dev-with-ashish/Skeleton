{% doc %}
  @prompt
    a responsive product section for product page which diplay the product title and price along with its variant prices and in the left three layer setuep one for the admin to upload the base shape image above that a user uploaded image layer which will have the mask of the base shape and above all the third layer having the mask of the base shape too, option to select the product so that the product variants and its prices can be displayed, option to select the product so that the user can select the variants to see the price, unable to select the variant, make the variant selection work map it using theme varaint picker or similarly so it works smoothly
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-product-section-{{ ai_gen_id }} {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 40px;
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
  }

  .ai-product-image-container-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    aspect-ratio: 1;
    background-color: {{ block.settings.image_background_color }};
    border-radius: {{ block.settings.image_border_radius }}px;
    overflow: hidden;
  }

  .ai-product-image-layer-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  .ai-base-shape-layer-{{ ai_gen_id }} {
    z-index: 1;
  }

  .ai-base-shape-layer-{{ ai_gen_id }} img {
    width: 100%;
    height: 100%;
    object-fit: contain;
  }

  .ai-user-image-layer-{{ ai_gen_id }} {
    z-index: 2;
    mask: url({{ block.settings.base_shape_image | image_url }}) no-repeat center/contain;
    -webkit-mask: url({{ block.settings.base_shape_image | image_url }}) no-repeat center/contain;
  }

  .ai-user-image-layer-{{ ai_gen_id }} img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .ai-overlay-layer-{{ ai_gen_id }} {
    z-index: 3;
    mask: url({{ block.settings.base_shape_image | image_url }}) no-repeat center/contain;
    -webkit-mask: url({{ block.settings.base_shape_image | image_url }}) no-repeat center/contain;
    background: {{ block.settings.overlay_color }};
    opacity: {{ block.settings.overlay_opacity }};
  }

  .ai-product-info-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    gap: 24px;
    padding: 20px 0;
  }

  .ai-product-title-{{ ai_gen_id }} {
    font-family: {{ settings.type_primary_font.family }}, {{ settings.type_primary_font.fallback_families }};
    font-weight: {{ settings.type_primary_font.weight }};
    font-size: {{ block.settings.title_font_size }}px;
    line-height: 1.2;
    color: {{ block.settings.title_color }};
    margin: 0;
  }

  .ai-product-price-section-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    gap: 16px;
  }

  .ai-price-display-{{ ai_gen_id }} {
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .ai-current-price-{{ ai_gen_id }} {
    font-size: {{ block.settings.price_font_size }}px;
    font-weight: 600;
    color: {{ block.settings.price_color }};
  }

  .ai-compare-price-{{ ai_gen_id }} {
    text-decoration: line-through;
    opacity: 0.7;
    font-size: {{ block.settings.price_font_size | times: 0.8 }}px;
    color: {{ block.settings.variant_text_color }};
  }

  .ai-variant-picker-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    gap: 16px;
  }

  .ai-variant-input-wrapper-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .ai-variant-label-{{ ai_gen_id }} {
    font-size: {{ block.settings.variant_label_font_size }}px;
    font-weight: 600;
    color: {{ block.settings.variant_text_color }};
    margin: 0;
  }

  .ai-variant-fieldset-{{ ai_gen_id }} {
    border: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
  }

  .ai-variant-input-{{ ai_gen_id }} {
    position: absolute;
    opacity: 0;
    pointer-events: none;
  }

  .ai-variant-label-option-{{ ai_gen_id }} {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 10px 16px;
    background-color: {{ block.settings.variant_background_color }};
    border: 2px solid {{ block.settings.variant_border_color }};
    border-radius: {{ block.settings.variant_border_radius }}px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: {{ block.settings.variant_font_size }}px;
    color: {{ block.settings.variant_text_color }};
    min-width: 60px;
    text-align: center;
    position: relative;
  }

  .ai-variant-label-option-{{ ai_gen_id }}:hover {
    border-color: {{ block.settings.variant_hover_border_color }};
    background-color: {{ block.settings.variant_hover_background_color }};
  }

  .ai-variant-input-{{ ai_gen_id }}:checked + .ai-variant-label-option-{{ ai_gen_id }} {
    border-color: {{ block.settings.variant_selected_border_color }};
    background-color: {{ block.settings.variant_selected_background_color }};
    color: {{ block.settings.variant_selected_text_color }};
  }

  .ai-variant-input-{{ ai_gen_id }}:disabled + .ai-variant-label-option-{{ ai_gen_id }} {
    opacity: 0.5;
    cursor: not-allowed;
    position: relative;
  }

  .ai-variant-input-{{ ai_gen_id }}:disabled + .ai-variant-label-option-{{ ai_gen_id }}::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 10%;
    right: 10%;
    height: 1px;
    background-color: currentColor;
    transform: translateY(-50%);
  }

  .ai-image-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  .ai-image-placeholder-{{ ai_gen_id }} svg {
    width: 60%;
    height: 60%;
    opacity: 0.3;
  }

  .ai-empty-state-{{ ai_gen_id }} {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    padding: 8px 16px;
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    font-size: 12px;
    border-radius: 4px;
    text-align: center;
  }

  .ai-no-product-message-{{ ai_gen_id }} {
    text-align: center;
    color: #666;
    font-style: italic;
    padding: 40px 20px;
  }

  @media screen and (max-width: 768px) {
    .ai-product-section-{{ ai_gen_id }} {
      grid-template-columns: 1fr;
      gap: 24px;
      padding: 16px;
    }

    .ai-product-title-{{ ai_gen_id }} {
      font-size: {{ block.settings.title_font_size | times: 0.9 }}px;
    }

    .ai-current-price-{{ ai_gen_id }} {
      font-size: {{ block.settings.price_font_size | times: 0.9 }}px;
    }

    .ai-variant-label-option-{{ ai_gen_id }} {
      padding: 8px 12px;
      font-size: {{ block.settings.variant_font_size | times: 0.9 }}px;
    }
  }

  @media screen and (max-width: 480px) {
    .ai-product-section-{{ ai_gen_id }} {
      gap: 20px;
      padding: 12px;
    }

    .ai-product-info-{{ ai_gen_id }} {
      gap: 20px;
    }

    .ai-variant-fieldset-{{ ai_gen_id }} {
      gap: 6px;
    }

    .ai-variant-label-option-{{ ai_gen_id }} {
      padding: 6px 10px;
      min-width: 50px;
    }
  }
{% endstyle %}

<variant-selects-{{ ai_gen_id }}
  class="ai-product-section-{{ ai_gen_id }}"
  data-section="{{ section.id }}"
  data-url="{{ product.url }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-product-image-container-{{ ai_gen_id }}">
    {% if block.settings.base_shape_image %}
      <div class="ai-product-image-layer-{{ ai_gen_id }} ai-base-shape-layer-{{ ai_gen_id }}">
        <img
          src="{{ block.settings.base_shape_image | image_url: width: 800 }}"
          alt="Base shape"
          loading="lazy"
          width="{{ block.settings.base_shape_image.width }}"
          height="{{ block.settings.base_shape_image.height }}"
        >
      </div>
    {% endif %}

    {% if block.settings.user_image %}
      <div class="ai-product-image-layer-{{ ai_gen_id }} ai-user-image-layer-{{ ai_gen_id }}">
        <img
          src="{{ block.settings.user_image | image_url: width: 800 }}"
          alt="User uploaded design"
          loading="lazy"
          width="{{ block.settings.user_image.width }}"
          height="{{ block.settings.user_image.height }}"
        >
      </div>
    {% endif %}

    {% if block.settings.show_overlay %}
      <div class="ai-product-image-layer-{{ ai_gen_id }} ai-overlay-layer-{{ ai_gen_id }}"></div>
    {% endif %}

    {% unless block.settings.base_shape_image %}
      <div class="ai-image-placeholder-{{ ai_gen_id }}">
        {{ 'image' | placeholder_svg_tag }}
        <div class="ai-empty-state-{{ ai_gen_id }}">
          Add base shape image
        </div>
      </div>
    {% endunless %}
  </div>

  <div class="ai-product-info-{{ ai_gen_id }}">
    {% assign selected_product = block.settings.selected_product %}
    
    {% if selected_product %}
      <h1 class="ai-product-title-{{ ai_gen_id }}">{{ selected_product.title }}</h1>
      
      <div class="ai-product-price-section-{{ ai_gen_id }}">
        <div class="ai-price-display-{{ ai_gen_id }}">
          <span class="ai-current-price-{{ ai_gen_id }}">
            {{ selected_product.selected_or_first_available_variant.price | money }}
          </span>
          {% if selected_product.selected_or_first_available_variant.compare_at_price > selected_product.selected_or_first_available_variant.price %}
            <span class="ai-compare-price-{{ ai_gen_id }}">
              {{ selected_product.selected_or_first_available_variant.compare_at_price | money }}
            </span>
          {% endif %}
        </div>

        {% unless selected_product.has_only_default_variant %}
          <variant-radios class="ai-variant-picker-{{ ai_gen_id }}" data-section="{{ section.id }}" data-url="{{ selected_product.url }}">
            {% for option in selected_product.options_with_values %}
              <div class="ai-variant-input-wrapper-{{ ai_gen_id }}">
                <legend class="ai-variant-label-{{ ai_gen_id }}">{{ option.name }}</legend>
                <fieldset class="ai-variant-fieldset-{{ ai_gen_id }}" name="{{ option.name }}" form="{{ product_form_id }}">
                  {% for value in option.values %}
                    <input
                      type="radio"
                      id="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}-{{ ai_gen_id }}"
                      name="{{ option.name }}"
                      value="{{ value | escape }}"
                      form="{{ product_form_id }}"
                      {% if option.selected_value == value %}checked{% endif %}
                      class="ai-variant-input-{{ ai_gen_id }}"
                    >
                    <label 
                      class="ai-variant-label-option-{{ ai_gen_id }}"
                      for="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}-{{ ai_gen_id }}"
                    >
                      {{ value }}
                    </label>
                  {% endfor %}
                </fieldset>
              </div>
            {% endfor %}
            <script type="application/json">
              {{ selected_product.variants | json }}
            </script>
          </variant-radios>
        {% endunless %}
      </div>
    {% else %}
      <div class="ai-no-product-message-{{ ai_gen_id }}">
        Select a product to display its details and pricing
      </div>
    {% endif %}
  </div>
</variant-selects-{{ ai_gen_id }}>

<script>
  (function() {
    class VariantSelects{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.addEventListener('change', this.onVariantChange);
      }

      onVariantChange() {
        this.updateOptions();
        this.updateMasterId();
        this.toggleAddButton(true, '', false);
        this.updatePickupAvailability();
        this.removeErrorMessage();
        this.updateVariantStatuses();

        if (!this.currentVariant) {
          this.toggleAddButton(true, '', true);
          this.setUnavailable();
        } else {
          this.updateMedia();
          this.updateURL();
          this.updateVariantInput();
          this.renderProductInfo();
          this.toggleAddButton(false, '', true);
        }
      }

      updateOptions() {
        this.options = Array.from(this.querySelectorAll('select'), (select) => select.value);
        this.options = Array.from(this.querySelectorAll('fieldset'), (fieldset) => {
          return Array.from(fieldset.querySelectorAll('input')).find((radio) => radio.checked)?.value;
        });
      }

      updateMasterId() {
        this.currentVariant = this.getVariantData().find((variant) => {
          return !variant.options.map((option, index) => {
            return this.options[index] === option;
          }).includes(false);
        });
      }

      updateMedia() {
        if (!this.currentVariant) return;
        if (!this.currentVariant.featured_media) return;

        const mediaGalleries = document.querySelectorAll(`[id^="MediaGallery-"]`);
        mediaGalleries.forEach((mediaGallery) =>
          mediaGallery.setActiveMedia(`{{ section.id }}-${this.currentVariant.featured_media.id}`, true)
        );

        const modalContent = document.querySelector(`#ProductModal-{{ section.id }} .product-media-modal__content`);
        if (!modalContent) return;
        const newMediaModal = modalContent.querySelector( `[data-media-id="${this.currentVariant.featured_media.id}"]`);
        modalContent.prepend(newMediaModal);
      }

      updateURL() {
        if (!this.currentVariant || this.dataset.updateUrl === 'false') return;
        window.history.replaceState({}, '', `${this.dataset.url}?variant=${this.currentVariant.id}`);
      }

      updateVariantInput() {
        const productForms = document.querySelectorAll(`#product-form-{{ section.id }}, #product-form-installment-{{ section.id }}`);
        productForms.forEach((productForm) => {
          const input = productForm.querySelector('input[name="id"]');
          input.value = this.currentVariant.id;
          input.dispatchEvent(new Event('change', { bubbles: true }));
        });
      }

      updateVariantStatuses() {
        const selectedOptionOneVariants = this.getVariantData().filter(
          (variant) => this.querySelector(':checked').value === variant.option1
        );
        const inputWrappers = [...this.querySelectorAll('.ai-variant-input-wrapper-{{ ai_gen_id }}')];
        inputWrappers.forEach((option, index) => {
          if (index === 0) return;
          const optionInputs = [...option.querySelectorAll('input[type="radio"]')];
          const previousOptionSelected = inputWrappers[index - 1].querySelector(':checked').value;
          const availableOptionInputsValue = selectedOptionOneVariants
            .filter((variant) => variant.available && variant[`option${index}`] === previousOptionSelected)
            .map((variantOption) => variantOption[`option${index + 1}`]);
          this.setInputAvailability(optionInputs, availableOptionInputsValue);
        });
      }

      setInputAvailability(listOfOptions, listOfAvailableOptions) {
        listOfOptions.forEach((input) => {
          if (listOfAvailableOptions.includes(input.getAttribute('value'))) {
            input.removeAttribute('disabled');
          } else {
            input.setAttribute('disabled', true);
          }
        });
      }

      updatePickupAvailability() {
        const pickUpAvailability = document.querySelector('pickup-availability');
        if (!pickUpAvailability) return;

        if (this.currentVariant && this.currentVariant.available) {
          pickUpAvailability.fetchAvailability(this.currentVariant.id);
        } else {
          pickUpAvailability.removeAttribute('available');
          pickUpAvailability.innerHTML = '';
        }
      }

      removeErrorMessage() {
        const section = this.closest('section');
        if (!section) return;

        const productForm = section.querySelector('product-form');
        if (productForm) productForm.handleErrorMessage();
      }

      renderProductInfo() {
        const requestedVariantId = this.currentVariant.id;
        const sectionId = this.dataset.originalSection ? this.dataset.originalSection : this.dataset.section;

        fetch(`${this.dataset.url}?variant=${requestedVariantId}&section_id=${this.dataset.section}`)
          .then((response) => response.text())
          .then((responseText) => {
            if (this.currentVariant.id !== requestedVariantId) return;

            const html = new DOMParser().parseFromString(responseText, 'text/html');
            const destination = document.getElementById(`price-${this.dataset.section}`);
            const source = html.getElementById(`price-${this.dataset.originalSection ? this.dataset.originalSection : this.dataset.section}`);

            const skuSource = html.getElementById(`Sku-${this.dataset.originalSection ? this.dataset.originalSection : this.dataset.section}`);
            const skuDestination = document.getElementById(`Sku-${this.dataset.section}`);
            const inventorySource = html.getElementById(`Inventory-${this.dataset.originalSection ? this.dataset.originalSection : this.dataset.section}`);
            const inventoryDestination = document.getElementById(`Inventory-${this.dataset.section}`);

            const pricePerItemDestination = document.getElementById(`Price-Per-Item-${this.dataset.section}`);
            const pricePerItemSource = html.getElementById(`Price-Per-Item-${this.dataset.originalSection ? this.dataset.originalSection : this.dataset.section}`);

            const volumePricingDestination = document.getElementById(`Volume-${this.dataset.section}`);
            const volumePricingSource = html.getElementById(`Volume-${this.dataset.originalSection ? this.dataset.originalSection : this.dataset.section}`);

            const priceElement = this.querySelector('.ai-current-price-{{ ai_gen_id }}');
            const comparePriceElement = this.querySelector('.ai-compare-price-{{ ai_gen_id }}');

            if (source && destination) destination.innerHTML = source.innerHTML;
            if (inventorySource && inventoryDestination) inventoryDestination.innerHTML = inventorySource.innerHTML;
            if (skuSource && skuDestination) skuDestination.innerHTML = skuSource.innerHTML;
            if (pricePerItemSource && pricePerItemDestination) pricePerItemDestination.innerHTML = pricePerItemSource.innerHTML;
            if (volumePricingSource && volumePricingDestination) volumePricingDestination.innerHTML = volumePricingSource.innerHTML;

            if (priceElement) {
              priceElement.textContent = this.formatPrice(this.currentVariant.price);
            }

            if (comparePriceElement) {
              if (this.currentVariant.compare_at_price && this.currentVariant.compare_at_price > this.currentVariant.price) {
                comparePriceElement.textContent = this.formatPrice(this.currentVariant.compare_at_price);
                comparePriceElement.style.display = 'inline';
              } else {
                comparePriceElement.style.display = 'none';
              }
            }

            this.toggleAddButton(!this.currentVariant.available, window.variantStrings.soldOut);
          });
      }

      formatPrice(priceInCents) {
        return new Intl.NumberFormat('en-IN', {
          style: 'currency',
          currency: 'INR'
        }).format(priceInCents / 100);
      }

      toggleAddButton(disable = true, text, modifyClass = true) {
        const productForm = document.getElementById(`product-form-${this.dataset.section}`);
        if (!productForm) return;

        const addButton = productForm.querySelector('[name="add"]');
        const addButtonText = productForm.querySelector('[name="add"] > span');
        if (!addButton) return;

        if (disable) {
          addButton.setAttribute('disabled', 'disabled');
          if (text) addButtonText.textContent = text;
        } else {
          addButton.removeAttribute('disabled');
          addButtonText.textContent = window.variantStrings.addToCart;
        }

        if (!modifyClass) return;
      }

      setUnavailable() {
        const button = document.getElementById(`product-form-${this.dataset.section}`)?.querySelector('[name="add"]');
        const addButtonText = button?.querySelector('span');
        const price = document.getElementById(`price-${this.dataset.section}`);
        const inventory = document.getElementById(`Inventory-${this.dataset.section}`);
        const sku = document.getElementById(`Sku-${this.dataset.section}`);
        const pricePerItem = document.getElementById(`Price-Per-Item-${this.dataset.section}`);
        const volumeNote = document.getElementById(`Volume-${this.dataset.section}`);
        const volumeTable = document.getElementById(`Volume-Table-${this.dataset.section}`);

        if (!button) return;
        addButtonText.textContent = window.variantStrings.unavailable;
        if (price) price.classList.add('visibility-hidden');
        if (inventory) inventory.classList.add('visibility-hidden');
        if (sku) sku.classList.add('visibility-hidden');
        if (pricePerItem) pricePerItem.classList.add('visibility-hidden');
        if (volumeNote) volumeNote.classList.add('visibility-hidden');
        if (volumeTable) volumeTable.classList.add('visibility-hidden');
      }

      getVariantData() {
        this.variantData = this.variantData || JSON.parse(this.querySelector('[type="application/json"]').textContent);
        return this.variantData;
      }
    }

    class VariantRadios{{ ai_gen_id }} extends VariantSelects{{ ai_gen_id }} {
      constructor() {
        super();
      }

      setInputAvailability(listOfOptions, listOfAvailableOptions) {
        listOfOptions.forEach((input) => {
          if (listOfAvailableOptions.includes(input.getAttribute('value'))) {
            input.removeAttribute('disabled');
          } else {
            input.setAttribute('disabled', true);
          }
        });
      }

      updateOptions() {
        const fieldsets = Array.from(this.querySelectorAll('fieldset'));
        this.options = fieldsets.map((fieldset) => {
          return Array.from(fieldset.querySelectorAll('input')).find((radio) => radio.checked)?.value;
        });
      }
    }

    customElements.define('variant-selects-{{ ai_gen_id }}', VariantSelects{{ ai_gen_id }});
    customElements.define('variant-radios', VariantRadios{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Product variant selector",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Product selection"
    },
    {
      "type": "product",
      "id": "selected_product",
      "label": "Select product"
    },
    {
      "type": "header",
      "content": "Product images"
    },
    {
      "type": "image_picker",
      "id": "base_shape_image",
      "label": "Base shape image"
    },
    {
      "type": "image_picker",
      "id": "user_image",
      "label": "User uploaded image"
    },
    {
      "type": "checkbox",
      "id": "show_overlay",
      "label": "Show overlay layer",
      "default": false
    },
    {
      "type": "color",
      "id": "overlay_color",
      "label": "Overlay color",
      "default": "#000000"
    },
    {
      "type": "range",
      "id": "overlay_opacity",
      "min": 0,
      "max": 1,
      "step": 0.1,
      "label": "Overlay opacity",
      "default": 0.3
    },
    {
      "type": "color",
      "id": "image_background_color",
      "label": "Image background color",
      "default": "#f8f8f8"
    },
    {
      "type": "range",
      "id": "image_border_radius",
      "min": 0,
      "max": 30,
      "step": 2,
      "unit": "px",
      "label": "Image border radius",
      "default": 8
    },
    {
      "type": "header",
      "content": "Product title"
    },
    {
      "type": "range",
      "id": "title_font_size",
      "min": 20,
      "max": 60,
      "step": 2,
      "unit": "px",
      "label": "Title font size",
      "default": 32
    },
    {
      "type": "color",
      "id": "title_color",
      "label": "Title color",
      "default": "#333333"
    },
    {
      "type": "header",
      "content": "Product pricing"
    },
    {
      "type": "range",
      "id": "price_font_size",
      "min": 16,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Price font size",
      "default": 24
    },
    {
      "type": "color",
      "id": "price_color",
      "label": "Price color",
      "default": "#e74c3c"
    },
    {
      "type": "header",
      "content": "Variant options"
    },
    {
      "type": "range",
      "id": "variant_label_font_size",
      "min": 12,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Variant label font size",
      "default": 14
    },
    {
      "type": "range",
      "id": "variant_font_size",
      "min": 12,
      "max": 18,
      "step": 1,
      "unit": "px",
      "label": "Variant option font size",
      "default": 14
    },
    {
      "type": "color",
      "id": "variant_background_color",
      "label": "Variant background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "variant_border_color",
      "label": "Variant border color",
      "default": "#e0e0e0"
    },
    {
      "type": "color",
      "id": "variant_text_color",
      "label": "Variant text color",
      "default": "#666666"
    },
    {
      "type": "color",
      "id": "variant_hover_background_color",
      "label": "Variant hover background",
      "default": "#f5f5f5"
    },
    {
      "type": "color",
      "id": "variant_hover_border_color",
      "label": "Variant hover border",
      "default": "#cccccc"
    },
    {
      "type": "color",
      "id": "variant_selected_background_color",
      "label": "Selected variant background",
      "default": "#000f9f"
    },
    {
      "type": "color",
      "id": "variant_selected_border_color",
      "label": "Selected variant border",
      "default": "#000f9f"
    },
    {
      "type": "color",
      "id": "variant_selected_text_color",
      "label": "Selected variant text",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "variant_border_radius",
      "min": 0,
      "max": 15,
      "step": 1,
      "unit": "px",
      "label": "Variant border radius",
      "default": 6
    }
  ],
  "presets": [
    {
      "name": "Product variant selector"
    }
  ]
}
{% endschema %}