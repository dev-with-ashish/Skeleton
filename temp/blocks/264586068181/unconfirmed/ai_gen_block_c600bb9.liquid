{% doc %}
  @prompt
    a responsive product section for product page which diplay the product title and price along with its variant prices and in the left three layer setuep one for the admin to upload the base shape image above that a user uploaded image layer which will have the mask of the base shape and above all the third layer having the mask of the base shape too, option to select the product so that the product variants and its prices can be displayed, option to select the product so that the user can select the variants to see the price
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-product-section-{{ ai_gen_id }} {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 40px;
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
  }

  .ai-product-image-container-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    aspect-ratio: 1;
    background-color: {{ block.settings.image_background_color }};
    border-radius: {{ block.settings.image_border_radius }}px;
    overflow: hidden;
  }

  .ai-product-image-layer-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  .ai-base-shape-layer-{{ ai_gen_id }} {
    z-index: 1;
  }

  .ai-base-shape-layer-{{ ai_gen_id }} img {
    width: 100%;
    height: 100%;
    object-fit: contain;
  }

  .ai-user-image-layer-{{ ai_gen_id }} {
    z-index: 2;
    mask: url({{ block.settings.base_shape_image | image_url }}) no-repeat center/contain;
    -webkit-mask: url({{ block.settings.base_shape_image | image_url }}) no-repeat center/contain;
  }

  .ai-user-image-layer-{{ ai_gen_id }} img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .ai-overlay-layer-{{ ai_gen_id }} {
    z-index: 3;
    mask: url({{ block.settings.base_shape_image | image_url }}) no-repeat center/contain;
    -webkit-mask: url({{ block.settings.base_shape_image | image_url }}) no-repeat center/contain;
    background: {{ block.settings.overlay_color }};
    opacity: {{ block.settings.overlay_opacity }};
  }

  .ai-product-info-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    gap: 24px;
    padding: 20px 0;
  }

  .ai-product-title-{{ ai_gen_id }} {
    font-family: {{ settings.type_primary_font.family }}, {{ settings.type_primary_font.fallback_families }};
    font-weight: {{ settings.type_primary_font.weight }};
    font-size: {{ block.settings.title_font_size }}px;
    line-height: 1.2;
    color: {{ block.settings.title_color }};
    margin: 0;
  }

  .ai-product-price-section-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    gap: 16px;
  }

  .ai-current-price-{{ ai_gen_id }} {
    font-size: {{ block.settings.price_font_size }}px;
    font-weight: 600;
    color: {{ block.settings.price_color }};
  }

  .ai-variant-selector-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .ai-variant-option-group-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .ai-variant-option-label-{{ ai_gen_id }} {
    font-size: {{ block.settings.variant_label_font_size }}px;
    font-weight: 600;
    color: {{ block.settings.variant_text_color }};
  }

  .ai-variant-options-{{ ai_gen_id }} {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
  }

  .ai-variant-option-{{ ai_gen_id }} {
    padding: 10px 16px;
    background-color: {{ block.settings.variant_background_color }};
    border: 2px solid {{ block.settings.variant_border_color }};
    border-radius: {{ block.settings.variant_border_radius }}px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: {{ block.settings.variant_font_size }}px;
    color: {{ block.settings.variant_text_color }};
    min-width: 60px;
    text-align: center;
  }

  .ai-variant-option-{{ ai_gen_id }}:hover {
    border-color: {{ block.settings.variant_hover_border_color }};
    background-color: {{ block.settings.variant_hover_background_color }};
  }

  .ai-variant-option-{{ ai_gen_id }}.selected {
    border-color: {{ block.settings.variant_selected_border_color }};
    background-color: {{ block.settings.variant_selected_background_color }};
    color: {{ block.settings.variant_selected_text_color }};
  }

  .ai-variant-option-{{ ai_gen_id }}.unavailable {
    opacity: 0.5;
    cursor: not-allowed;
    position: relative;
  }

  .ai-variant-option-{{ ai_gen_id }}.unavailable::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 10%;
    right: 10%;
    height: 1px;
    background-color: currentColor;
    transform: translateY(-50%);
  }

  .ai-price-display-{{ ai_gen_id }} {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-top: 8px;
  }

  .ai-compare-price-{{ ai_gen_id }} {
    text-decoration: line-through;
    opacity: 0.7;
    font-size: {{ block.settings.price_font_size | times: 0.8 }}px;
    color: {{ block.settings.variant_text_color }};
  }

  .ai-image-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  .ai-image-placeholder-{{ ai_gen_id }} svg {
    width: 60%;
    height: 60%;
    opacity: 0.3;
  }

  .ai-empty-state-{{ ai_gen_id }} {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    padding: 8px 16px;
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    font-size: 12px;
    border-radius: 4px;
    text-align: center;
  }

  .ai-no-product-message-{{ ai_gen_id }} {
    text-align: center;
    color: #666;
    font-style: italic;
    padding: 40px 20px;
  }

  @media screen and (max-width: 768px) {
    .ai-product-section-{{ ai_gen_id }} {
      grid-template-columns: 1fr;
      gap: 24px;
      padding: 16px;
    }

    .ai-product-title-{{ ai_gen_id }} {
      font-size: {{ block.settings.title_font_size | times: 0.9 }}px;
    }

    .ai-current-price-{{ ai_gen_id }} {
      font-size: {{ block.settings.price_font_size | times: 0.9 }}px;
    }

    .ai-variant-option-{{ ai_gen_id }} {
      padding: 8px 12px;
      font-size: {{ block.settings.variant_font_size | times: 0.9 }}px;
    }
  }

  @media screen and (max-width: 480px) {
    .ai-product-section-{{ ai_gen_id }} {
      gap: 20px;
      padding: 12px;
    }

    .ai-product-info-{{ ai_gen_id }} {
      gap: 20px;
    }

    .ai-variant-options-{{ ai_gen_id }} {
      gap: 6px;
    }

    .ai-variant-option-{{ ai_gen_id }} {
      padding: 6px 10px;
      min-width: 50px;
    }
  }
{% endstyle %}

<product-variant-selector-{{ ai_gen_id }}
  class="ai-product-section-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-product-image-container-{{ ai_gen_id }}">
    {% if block.settings.base_shape_image %}
      <div class="ai-product-image-layer-{{ ai_gen_id }} ai-base-shape-layer-{{ ai_gen_id }}">
        <img
          src="{{ block.settings.base_shape_image | image_url: width: 800 }}"
          alt="Base shape"
          loading="lazy"
          width="{{ block.settings.base_shape_image.width }}"
          height="{{ block.settings.base_shape_image.height }}"
        >
      </div>
    {% endif %}

    {% if block.settings.user_image %}
      <div class="ai-product-image-layer-{{ ai_gen_id }} ai-user-image-layer-{{ ai_gen_id }}">
        <img
          src="{{ block.settings.user_image | image_url: width: 800 }}"
          alt="User uploaded design"
          loading="lazy"
          width="{{ block.settings.user_image.width }}"
          height="{{ block.settings.user_image.height }}"
        >
      </div>
    {% endif %}

    {% if block.settings.show_overlay %}
      <div class="ai-product-image-layer-{{ ai_gen_id }} ai-overlay-layer-{{ ai_gen_id }}"></div>
    {% endif %}

    {% unless block.settings.base_shape_image %}
      <div class="ai-image-placeholder-{{ ai_gen_id }}">
        {{ 'image' | placeholder_svg_tag }}
        <div class="ai-empty-state-{{ ai_gen_id }}">
          Add base shape image
        </div>
      </div>
    {% endunless %}
  </div>

  <div class="ai-product-info-{{ ai_gen_id }}">
    {% assign selected_product = block.settings.selected_product %}
    
    {% if selected_product %}
      <h1 class="ai-product-title-{{ ai_gen_id }}">{{ selected_product.title }}</h1>
      
      <div class="ai-product-price-section-{{ ai_gen_id }}">
        <div class="ai-price-display-{{ ai_gen_id }}">
          <span class="ai-current-price-{{ ai_gen_id }}" data-current-price>
            {{ selected_product.price | money }}
          </span>
          <span class="ai-compare-price-{{ ai_gen_id }}" data-compare-price style="display: none;"></span>
        </div>

        {% if selected_product.variants.size > 1 %}
          <div class="ai-variant-selector-{{ ai_gen_id }}">
            {% assign option_names = selected_product.options %}
            {% for option_name in option_names %}
              <div class="ai-variant-option-group-{{ ai_gen_id }}">
                <label class="ai-variant-option-label-{{ ai_gen_id }}">{{ option_name }}:</label>
                <div class="ai-variant-options-{{ ai_gen_id }}" data-option-position="{{ forloop.index0 }}">
                  {% assign option_values = selected_product.variants | map: 'options' | map: option_name | uniq %}
                  {% for option_value in option_values %}
                    <button
                      type="button"
                      class="ai-variant-option-{{ ai_gen_id }}"
                      data-option-value="{{ option_value }}"
                      data-option-position="{{ forloop.index0 }}"
                    >
                      {{ option_value }}
                    </button>
                  {% endfor %}
                </div>
              </div>
            {% endfor %}
          </div>
        {% endif %}
      </div>

      <script type="application/json" data-product-variants>
        {
          "variants": [
            {% for variant in selected_product.variants %}
              {
                "id": {{ variant.id }},
                "title": "{{ variant.title | escape }}",
                "price": {{ variant.price }},
                "compare_at_price": {{ variant.compare_at_price | default: 0 }},
                "available": {{ variant.available }},
                "options": [
                  {% for option in variant.options %}
                    "{{ option | escape }}"{% unless forloop.last %},{% endunless %}
                  {% endfor %}
                ]
              }{% unless forloop.last %},{% endunless %}
            {% endfor %}
          ]
        }
      </script>
    {% else %}
      <div class="ai-no-product-message-{{ ai_gen_id }}">
        Select a product to display its details and pricing
      </div>
    {% endif %}
  </div>
</product-variant-selector-{{ ai_gen_id }}>

<script>
  (function() {
    class ProductVariantSelector{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.selectedOptions = {};
        this.variants = [];
      }

      connectedCallback() {
        this.loadVariantData();
        this.setupEventListeners();
        this.initializeDefaultSelection();
      }

      loadVariantData() {
        const variantScript = this.querySelector('[data-product-variants]');
        if (variantScript) {
          const data = JSON.parse(variantScript.textContent);
          this.variants = data.variants;
        }
      }

      setupEventListeners() {
        const optionButtons = this.querySelectorAll('.ai-variant-option-{{ ai_gen_id }}');
        optionButtons.forEach(button => {
          button.addEventListener('click', (e) => {
            const optionValue = e.target.dataset.optionValue;
            const optionPosition = parseInt(e.target.dataset.optionPosition);
            this.selectOption(optionPosition, optionValue, e.target);
          });
        });
      }

      initializeDefaultSelection() {
        const optionGroups = this.querySelectorAll('.ai-variant-options-{{ ai_gen_id }}');
        optionGroups.forEach((group, index) => {
          const firstOption = group.querySelector('.ai-variant-option-{{ ai_gen_id }}');
          if (firstOption) {
            const optionValue = firstOption.dataset.optionValue;
            this.selectOption(index, optionValue, firstOption);
          }
        });
      }

      selectOption(position, value, buttonElement) {
        this.selectedOptions[position] = value;
        
        const optionGroup = buttonElement.parentElement;
        optionGroup.querySelectorAll('.ai-variant-option-{{ ai_gen_id }}').forEach(btn => {
          btn.classList.remove('selected');
        });
        buttonElement.classList.add('selected');

        this.updateAvailability();
        this.updatePrice();
      }

      updateAvailability() {
        const optionGroups = this.querySelectorAll('.ai-variant-options-{{ ai_gen_id }}');
        
        optionGroups.forEach((group, groupIndex) => {
          const buttons = group.querySelectorAll('.ai-variant-option-{{ ai_gen_id }}');
          
          buttons.forEach(button => {
            const testOptions = { ...this.selectedOptions };
            testOptions[groupIndex] = button.dataset.optionValue;
            
            const matchingVariant = this.findVariantByOptions(testOptions);
            
            button.classList.remove('unavailable');
            if (!matchingVariant || !matchingVariant.available) {
              button.classList.add('unavailable');
            }
          });
        });
      }

      updatePrice() {
        const currentVariant = this.findVariantByOptions(this.selectedOptions);
        const priceElement = this.querySelector('[data-current-price]');
        const comparePriceElement = this.querySelector('[data-compare-price]');
        
        if (currentVariant && priceElement) {
          const price = new Intl.NumberFormat('en-IN', {
            style: 'currency',
            currency: 'INR'
          }).format(currentVariant.price / 100);
          
          priceElement.textContent = price;
          
          if (currentVariant.compare_at_price && currentVariant.compare_at_price > currentVariant.price) {
            const comparePrice = new Intl.NumberFormat('en-IN', {
              style: 'currency',
              currency: 'INR'
            }).format(currentVariant.compare_at_price / 100);
            
            comparePriceElement.textContent = comparePrice;
            comparePriceElement.style.display = 'inline';
          } else {
            comparePriceElement.style.display = 'none';
          }
        }
      }

      findVariantByOptions(options) {
        return this.variants.find(variant => {
          return Object.keys(options).every(position => {
            return variant.options[position] === options[position];
          });
        });
      }
    }

    customElements.define('product-variant-selector-{{ ai_gen_id }}', ProductVariantSelector{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Product variant selector",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Product selection"
    },
    {
      "type": "product",
      "id": "selected_product",
      "label": "Select product"
    },
    {
      "type": "header",
      "content": "Product images"
    },
    {
      "type": "image_picker",
      "id": "base_shape_image",
      "label": "Base shape image"
    },
    {
      "type": "image_picker",
      "id": "user_image",
      "label": "User uploaded image"
    },
    {
      "type": "checkbox",
      "id": "show_overlay",
      "label": "Show overlay layer",
      "default": false
    },
    {
      "type": "color",
      "id": "overlay_color",
      "label": "Overlay color",
      "default": "#000000"
    },
    {
      "type": "range",
      "id": "overlay_opacity",
      "min": 0,
      "max": 1,
      "step": 0.1,
      "label": "Overlay opacity",
      "default": 0.3
    },
    {
      "type": "color",
      "id": "image_background_color",
      "label": "Image background color",
      "default": "#f8f8f8"
    },
    {
      "type": "range",
      "id": "image_border_radius",
      "min": 0,
      "max": 30,
      "step": 2,
      "unit": "px",
      "label": "Image border radius",
      "default": 8
    },
    {
      "type": "header",
      "content": "Product title"
    },
    {
      "type": "range",
      "id": "title_font_size",
      "min": 20,
      "max": 60,
      "step": 2,
      "unit": "px",
      "label": "Title font size",
      "default": 32
    },
    {
      "type": "color",
      "id": "title_color",
      "label": "Title color",
      "default": "#333333"
    },
    {
      "type": "header",
      "content": "Product pricing"
    },
    {
      "type": "range",
      "id": "price_font_size",
      "min": 16,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Price font size",
      "default": 24
    },
    {
      "type": "color",
      "id": "price_color",
      "label": "Price color",
      "default": "#e74c3c"
    },
    {
      "type": "header",
      "content": "Variant options"
    },
    {
      "type": "range",
      "id": "variant_label_font_size",
      "min": 12,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Variant label font size",
      "default": 14
    },
    {
      "type": "range",
      "id": "variant_font_size",
      "min": 12,
      "max": 18,
      "step": 1,
      "unit": "px",
      "label": "Variant option font size",
      "default": 14
    },
    {
      "type": "color",
      "id": "variant_background_color",
      "label": "Variant background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "variant_border_color",
      "label": "Variant border color",
      "default": "#e0e0e0"
    },
    {
      "type": "color",
      "id": "variant_text_color",
      "label": "Variant text color",
      "default": "#666666"
    },
    {
      "type": "color",
      "id": "variant_hover_background_color",
      "label": "Variant hover background",
      "default": "#f5f5f5"
    },
    {
      "type": "color",
      "id": "variant_hover_border_color",
      "label": "Variant hover border",
      "default": "#cccccc"
    },
    {
      "type": "color",
      "id": "variant_selected_background_color",
      "label": "Selected variant background",
      "default": "#000f9f"
    },
    {
      "type": "color",
      "id": "variant_selected_border_color",
      "label": "Selected variant border",
      "default": "#000f9f"
    },
    {
      "type": "color",
      "id": "variant_selected_text_color",
      "label": "Selected variant text",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "variant_border_radius",
      "min": 0,
      "max": 15,
      "step": 1,
      "unit": "px",
      "label": "Variant border radius",
      "default": 6
    }
  ],
  "presets": [
    {
      "name": "Product variant selector"
    }
  ]
}
{% endschema %}