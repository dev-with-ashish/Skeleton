{% doc %}
  @prompt
    Create a 3d product poster viewer with square responsive viewport and 6 thumbnail navigation: 3D rotatable view with OrbitControls, layered depth animation, video player, computer room scene, home interior scene, and studio lighting scene. Include theme editor settings for custom background images on room scenes. Thumbnails are square, equal-sized, horizontally scrollable without labels., Create an interactive 3D product poster viewer section. suing three.js
    
     Main viewport (top):
    * Responsive, square container displaying interactive Three.js scenes.
    * Poster front dynamically uses the selected product’s last image.
    Thumbnail navigation (below viewport):
    * Horizontal scrollable row with exactly 6 equal-sized, square thumbnails.
    * No text labels; visually auto-generate preview thumbnails depicting each scene clearly:
        1. 3D VIEW: Thumbnail previews a 3D scene with the poster. Interaction: users can freely rotate, zoom, and pan around the poster using mouse or touch gestures (OrbitControls).
        2. 3D LEAF: Thumbnail previews the poster with clearly separated layers. Interaction: clicking thumbnail triggers smooth animation showing layers separating (forward and backward) to reveal depth clearly.
        3. VIDEO: Thumbnail shows a placeholder indicating video playback scene.
        4. COMPUTER ROOM: Poster realistically placed on a computer-room wall. Customizable background image selectable/uploadable via theme editor.
        5. HOME: Poster displayed realistically within a cozy home interior. Customizable background image selectable/uploadable via theme editor.
        6. STUDIO: Poster placed professionally in studio environment with accurate studio lighting. Customizable background image selectable/uploadable via theme editor.
    Interaction specifics:
    * Clicking thumbnails smoothly loads and transitions to their respective Three.js scenes.
    * '3D VIEW' uses OrbitControls for full interactive rotation, zooming, and panning.
    * '3D LEAF' activates a smooth animation of poster layers visually separating, emphasizing the product’s depth and construction.
    
     Customization (theme editor):
    
      Allow store admin to easily select/upload custom background images specifically for 'COMPUTER ROOM,' 'HOME,' and 'STUDIO' scenes from Shopify’s theme customizer.
    
     UI considerations:
    
      Thumbnails are neatly aligned, equal-sized squares, scrollbar hidden."

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-3d-poster-viewer-{{ ai_gen_id }} {
    width: 100%;
    max-width: 900px;
    margin: 0 auto;
    background: {{ block.settings.container_background }};
    border-radius: {{ block.settings.border_radius }}px;
    overflow: hidden;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
  }

  .ai-3d-poster-viewport-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    aspect-ratio: 1;
    background: #000;
    overflow: hidden;
  }

  .ai-3d-poster-canvas-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    display: block;
    cursor: grab;
  }

  .ai-3d-poster-canvas-{{ ai_gen_id }}:active {
    cursor: grabbing;
  }

  .ai-3d-poster-controls-{{ ai_gen_id }} {
    position: absolute;
    top: 20px;
    right: 20px;
    display: flex;
    flex-direction: column;
    gap: 10px;
    z-index: 100;
  }

  .ai-3d-poster-control-btn-{{ ai_gen_id }} {
    width: 44px;
    height: 44px;
    background: rgba(255, 255, 255, 0.9);
    border: none;
    border-radius: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    backdrop-filter: blur(12px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .ai-3d-poster-control-btn-{{ ai_gen_id }}:hover {
    background: rgba(255, 255, 255, 1);
    transform: scale(1.05);box-shadow: 0 6px 16px rgba(0, 0, 0, 0.15);
  }

  .ai-3d-poster-control-btn-{{ ai_gen_id }}.active {
    background: {{ block.settings.accent_color }};
    color: white;
  }

  .ai-3d-poster-scene-info-{{ ai_gen_id }} {
    position: absolute;
    bottom: 20px;
    left: 20px;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 12px 16px;
    border-radius: 8px;
    font-size: 14px;
    backdrop-filter: blur(10px);
    z-index: 100;
  }

  .ai-3d-poster-thumbnails-{{ ai_gen_id }} {
    padding: 20px;
    background: {{ block.settings.thumbnail_background }};}

  .ai-3d-poster-thumbnail-container-{{ ai_gen_id }} {
    display: flex;
    gap: 16px;
    overflow-x: auto;
    padding: 8px 0;
    scrollbar-width: none;
    -ms-overflow-style: none;
  }

  .ai-3d-poster-thumbnail-container-{{ ai_gen_id }}::-webkit-scrollbar {
    display: none;
  }

  .ai-3d-poster-thumbnail-{{ ai_gen_id }} {
    flex-shrink: 0;
    width: 90px;
    height: 90px;
    border-radius: 12px;
    overflow: hidden;
    cursor: pointer;
    transition: all 0.3s ease;
    border: 3px solid transparent;
    background: #f5f5f5;
    position: relative;
  }

  .ai-3d-poster-thumbnail-{{ ai_gen_id }}:hover {
    transform: scale(1.08);
    border-color: {{ block.settings.accent_color }};
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
  }

  .ai-3d-poster-thumbnail-{{ ai_gen_id }}.active {
    border-color: {{ block.settings.accent_color }};
    transform: scale(1.08);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
  }

  .ai-3d-poster-thumbnail-{{ ai_gen_id }} canvas {
    width: 100%;
    height: 100%;
    display: block;
  }

  .ai-3d-poster-loading-{{ ai_gen_id }} {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: white;
    font-size: 18px;
    z-index: 50;
    text-align: center;
  }

  .ai-3d-poster-spinner-{{ ai_gen_id }} {
    width: 50px;
    height: 50px;
    border: 4px solid rgba(255, 255, 255, 0.3);
    border-top: 4px solid white;
    border-radius: 50%;
    animation: ai-3d-poster-spin-{{ ai_gen_id }} 1s linear infinite;
    margin: 0 auto 20px;
  }

  @keyframes ai-3d-poster-spin-{{ ai_gen_id }} {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  @media screen and (max-width: 768px) {
    .ai-3d-poster-controls-{{ ai_gen_id }} {
      top: 15px;
      right: 15px;
    }

    .ai-3d-poster-control-btn-{{ ai_gen_id }} {
      width: 40px;
      height: 40px;
    }

    .ai-3d-poster-thumbnail-{{ ai_gen_id }} {
      width: 75px;
      height: 75px;
    }

    .ai-3d-poster-thumbnails-{{ ai_gen_id }} {
      padding: 15px;
    }

    .ai-3d-poster-scene-info-{{ ai_gen_id }} {
      bottom: 15px;
      left: 15px;font-size: 12px;
      padding: 10px 14px;
    }
  }
{% endstyle %}

<poster-3d-viewer-{{ ai_gen_id }}
  class="ai-3d-poster-viewer-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
  data-product-image="{{ product.images.last | image_url: width: 1200 }}"
  data-computer-bg="{{ block.settings.computer_room_bg | image_url: width: 2000 }}"
  data-home-bg="{{ block.settings.home_interior_bg | image_url: width: 2000 }}"
  data-studio-bg="{{ block.settings.studio_lighting_bg | image_url: width: 2000 }}"
>
  <div class="ai-3d-poster-viewport-{{ ai_gen_id }}">
    <canvas class="ai-3d-poster-canvas-{{ ai_gen_id }}"></canvas>
    
    <div class="ai-3d-poster-controls-{{ ai_gen_id }}">
      <button class="ai-3d-poster-control-btn-{{ ai_gen_id }}" data-action="reset" title="Reset View">
        <svg width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"/>
          <path d="M21 3v5h-5"/>
          <path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"/><path d="M3 21v-5h5"/>
        </svg>
      </button>
      
      <button class="ai-3d-poster-control-btn-{{ ai_gen_id }}" data-action="autorotate" title="Auto Rotate">
        <svg width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"/>
          <path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"/>
        </svg>
      </button>

      <button class="ai-3d-poster-control-btn-{{ ai_gen_id }}" data-action="fullscreen" title="Fullscreen">
        <svg width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"/>
        </svg>
      </button>
    </div>

    <div class="ai-3d-poster-scene-info-{{ ai_gen_id }}">
      <span class="ai-3d-poster-scene-name-{{ ai_gen_id }}">3D View</span>
    </div>

    <div class="ai-3d-poster-loading-{{ ai_gen_id }}" style="display: none;">
      <div class="ai-3d-poster-spinner-{{ ai_gen_id }}"></div>
      <div>Loading 3D Scene...</div>
    </div>
  </div>

  <div class="ai-3d-poster-thumbnails-{{ ai_gen_id }}">
    <div class="ai-3d-poster-thumbnail-container-{{ ai_gen_id }}">
      <div class="ai-3d-poster-thumbnail-{{ ai_gen_id }} active" data-scene="3d" data-name="3D View">
        <canvas></canvas>
      </div>
      <div class="ai-3d-poster-thumbnail-{{ ai_gen_id }}" data-scene="layers" data-name="3D Layers">
        <canvas></canvas>
      </div>
      <div class="ai-3d-poster-thumbnail-{{ ai_gen_id }}" data-scene="video" data-name="Video">
        <canvas></canvas>
      </div>
      <div class="ai-3d-poster-thumbnail-{{ ai_gen_id }}" data-scene="computer" data-name="Computer Room">
        <canvas></canvas>
      </div>
      <div class="ai-3d-poster-thumbnail-{{ ai_gen_id }}" data-scene="home" data-name="Home Interior">
        <canvas></canvas>
      </div>
      <div class="ai-3d-poster-thumbnail-{{ ai_gen_id }}" data-scene="studio" data-name="Studio Lighting">
        <canvas></canvas>
      </div>
    </div>
  </div>
</poster-3d-viewer-{{ ai_gen_id }}><script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script><script>
(function() {
  class Poster3DViewer{{ ai_gen_id }} extends HTMLElement {
    constructor() {
      super();
      this.currentScene = '3d';
      this.isLoading = false;
      this.autoRotate = false;
      this.scenes = {};
      this.animationId = null;
      this.isTransitioning = false;}

    connectedCallback() {
      this.canvas = this.querySelector('.ai-3d-poster-canvas-{{ ai_gen_id }}');
      this.loadingEl = this.querySelector('.ai-3d-poster-loading-{{ ai_gen_id }}');
      this.sceneNameEl = this.querySelector('.ai-3d-poster-scene-name-{{ ai_gen_id }}');
      this.productImageUrl = this.dataset.productImage;
      this.computerBgUrl = this.dataset.computerBg;
      this.homeBgUrl = this.dataset.homeBg;
      this.studioBgUrl = this.dataset.studioBg;

      this.initThreeJS();
      this.setupEventListeners();
      this.loadTextures();
    }

    disconnectedCallback() {
      if (this.animationId) {
        cancelAnimationFrame(this.animationId);
      }
      if (this.renderer) {
        this.renderer.dispose();
      }
    }

    initThreeJS() {
      const rect = this.canvas.getBoundingClientRect();
      
      this.scene = new THREE.Scene();
      this.camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);
      this.renderer = new THREE.WebGLRenderer({ 
        canvas: this.canvas, 
        antialias: true,
        alpha: true 
      });
      
      this.renderer.setSize(rect.width, rect.height);
      this.renderer.setPixelRatio(window.devicePixelRatio);
      this.renderer.shadowMap.enabled = true;
      this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
      
      this.controls = new THREE.OrbitControls(this.camera, this.canvas);
      this.controls.enableDamping = true;
      this.controls.dampingFactor = 0.05;
      this.controls.enableZoom = true;
      this.controls.enablePan = true;
      this.camera.position.set(0, 0, 5);
      this.controls.update();

      this.setupLighting();
      this.setupResize();
      this.startAnimation();
    }

    setupLighting() {
      const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
      this.scene.add(ambientLight);

      const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
      directionalLight.position.set(10, 10, 5);
      directionalLight.castShadow = true;
      directionalLight.shadow.mapSize.width = 2048;
      directionalLight.shadow.mapSize.height = 2048;
      this.scene.add(directionalLight);

      const pointLight = new THREE.PointLight(0xffffff, 0.5, 100);
      pointLight.position.set(-10, 10,10);
      this.scene.add(pointLight);
    }

    setupResize() {
      const resizeObserver = new ResizeObserver(() => {
        const rect = this.canvas.getBoundingClientRect();
        this.camera.aspect =1;
        this.camera.updateProjectionMatrix();
        this.renderer.setSize(rect.width, rect.height);
      });
      resizeObserver.observe(this.canvas.parentElement);
    }

    setupEventListeners() {
      this.querySelectorAll('.ai-3d-poster-thumbnail-{{ ai_gen_id }}').forEach(thumb => {
        thumb.addEventListener('click', () => {
          if (!this.isTransitioning) {
            this.switchScene(thumb.dataset.scene, thumb.dataset.name);
          }
        });
      });

      this.querySelectorAll('.ai-3d-poster-control-btn-{{ ai_gen_id }}').forEach(btn => {
        btn.addEventListener('click', () => {
          const action = btn.dataset.action;
          if (action === 'reset') {
            this.resetView();
          } else if (action === 'autorotate') {
            this.toggleAutoRotate();btn.classList.toggle('active');
          } else if (action === 'fullscreen') {
            this.toggleFullscreen();
          }
        });
      });
    }

    async loadTextures() {
      this.showLoading();
      
      const loader = new THREE.TextureLoader();
      const loadTexture = (url) => {
        return new Promise((resolve) => {
          if (!url) {
            resolve(null);
            return;
          }
          loader.load(url, resolve, undefined, () => resolve(null));
        });
      };

      this.textures = {
        product: await loadTexture(this.productImageUrl),
        computerBg: await loadTexture(this.computerBgUrl),
        homeBg: await loadTexture(this.homeBgUrl),
        studioBg: await loadTexture(this.studioBgUrl)
      };

      this.initializeScenes();
      this.generateThumbnails();this.hideLoading();
    }

    initializeScenes() {
      this.clearScene();
      
      this.scenes = {
        '3d': () => this.create3DScene(),
        'layers': () => this.createLayersScene(),
        'video': () => this.createVideoScene(),
        'computer': () => this.createRoomScene(this.textures.computerBg, 0x2c3e50),
        'home': () => this.createRoomScene(this.textures.homeBg, 0xf5f5dc),
        'studio': () => this.createStudioScene()
      };

      this.scenes[this.currentScene]();
    }

    clearScene() {
      while(this.scene.children.length > 0) {
        const child = this.scene.children[0];
        if (child.geometry) child.geometry.dispose();
        if (child.material) {
          if (Array.isArray(child.material)) {
            child.material.forEach(mat => mat.dispose());
          } else {
            child.material.dispose();
          }
        }
        this.scene.remove(child);
      }
      this.setupLighting();
    }

    create3DScene() {
      if (!this.textures.product) return;

      const geometry = new THREE.PlaneGeometry(3, 4);
      const material = new THREE.MeshLambertMaterial({ 
        map: this.textures.product,
        transparent: true
      });
      const poster = new THREE.Mesh(geometry, material);
      poster.castShadow = true;
      poster.receiveShadow = true;
      this.scene.add(poster);

      const frameGeometry = new THREE.BoxGeometry(3.2, 4.2, 0.1);
      const frameMaterial = new THREE.MeshPhongMaterial({ color: 0x8b4513 });
      const frame = new THREE.Mesh(frameGeometry, frameMaterial);
      frame.position.z = -0.05;
      this.scene.add(frame);

      this.controls.enabled = true;
      this.controls.autoRotate = this.autoRotate;
    }

    createLayersScene() {
      if (!this.textures.product) return;

      this.posterLayers = [];
      const layerCount = 5;
      
      for (let i = 0; i < layerCount; i++) {
        const geometry = new THREE.PlaneGeometry(3, 4);
        const material = new THREE.MeshLambertMaterial({ 
          map: this.textures.product,
          transparent: true,
          opacity: 0.8 - (i * 0.1)
        });
        
        const layer = new THREE.Mesh(geometry, material);
        layer.position.z = i * 0.1;
        layer.userData = { originalZ: i * 0.1, layerIndex: i };
        this.posterLayers.push(layer);
        this.scene.add(layer);
      }

      this.animateLayerSeparation();
      this.controls.enabled = false;
    }

    animateLayerSeparation() {
      const startTime = Date.now();
      const duration = 3000;
      const maxSeparation = 2;

      const animate = () => {
        const elapsed = Date.now() - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        const easeInOut = 0.5 * (1 - Math.cos(progress * Math.PI));
        
        this.posterLayers.forEach((layer, index) => {
          const separation = easeInOut * maxSeparation * (index + 1) * 0.3;
          layer.position.z = layer.userData.originalZ + separation;
          layer.rotation.y = easeInOut * (index % 2 === 0 ? 0.1 : -0.1);
        });

        if (progress < 1) {
          requestAnimationFrame(animate);
        } else {
          setTimeout(() => {
            this.animateLayerReturn();
          }, 1000);
        }
      };
      
      animate();
    }

    animateLayerReturn() {
      const startTime = Date.now();
      const duration = 2000;

      const animate = () => {
        const elapsed = Date.now() - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        const easeOut = 1 - Math.pow(1 - progress, 3);
        
        this.posterLayers.forEach((layer, index) => {
          const currentZ = layer.position.z;
          const targetZ = layer.userData.originalZ;
          layer.position.z = currentZ + (targetZ - currentZ) * easeOut;
          layer.rotation.y *= (1 - easeOut);
        });

        if (progress < 1) {
          requestAnimationFrame(animate);
        } else {
          setTimeout(() => {
            this.animateLayerSeparation();
          }, 500);
        }
      };
      
      animate();
    }

    createVideoScene() {
      if (!this.textures.product) return;

      const geometry = new THREE.PlaneGeometry(4, 3);
      const material = new THREE.MeshLambertMaterial({ 
        map: this.textures.product,
        transparent: true
      });
      
      const screen = new THREE.Mesh(geometry, material);
      this.scene.add(screen);

      const borderGeometry = new THREE.PlaneGeometry(4.2, 3.2);
      const borderMaterial = new THREE.MeshPhongMaterial({ color: 0x000000 });
      const border = new THREE.Mesh(borderGeometry, borderMaterial);
      border.position.z = -0.01;
      this.scene.add(border);

      this.videoTime = 0;
      this.controls.enabled = true;
      this.controls.autoRotate = false;
    }

    createRoomScene(bgTexture, fallbackColor) {
      if (bgTexture) {
        const bgGeometry = new THREE.SphereGeometry(50, 32, 32);
        const bgMaterial = new THREE.MeshBasicMaterial({ 
          map: bgTexture,
          side: THREE.BackSide
        });
        const background = new THREE.Mesh(bgGeometry, bgMaterial);
        this.scene.add(background);
      } else {
        this.scene.background = new THREE.Color(fallbackColor);
      }

      if (this.textures.product) {
        const geometry = new THREE.PlaneGeometry(2.5, 3.5);
        const material = new THREE.MeshLambertMaterial({ 
          map: this.textures.product,
          transparent: true
        });
        const poster = new THREE.Mesh(geometry, material);
        poster.position.set(0, 0, -5);
        poster.castShadow = true;
        this.scene.add(poster);

        const frameGeometry = new THREE.BoxGeometry(2.7, 3.7, 0.1);
        const frameMaterial = new THREE.MeshPhongMaterial({ color: 0x654321 });
        const frame = new THREE.Mesh(frameGeometry, frameMaterial);
        frame.position.set(0, 0, -5.05);
        this.scene.add(frame);
      }

      this.controls.enabled = true;
      this.controls.autoRotate = false;
    }

    createStudioScene() {
      this.scene.background = new THREE.Color(0x1a1a1a);

      if (this.textures.product) {
        const geometry = new THREE.PlaneGeometry(3, 4);
        const material = new THREE.MeshPhongMaterial({ 
          map: this.textures.product,
          transparent: true
        });
        
        const poster = new THREE.Mesh(geometry, material);
        this.scene.add(poster);

        const spotLight1 = new THREE.SpotLight(0xffffff, 1, 100, Math.PI / 6);
        spotLight1.position.set(-10, 10, 10);
        spotLight1.target = poster;
        this.scene.add(spotLight1);

        const spotLight2 = new THREE.SpotLight(0xffffff, 0.8, 100, Math.PI / 4);
        spotLight2.position.set(10, 5, 8);
        spotLight2.target = poster;
        this.scene.add(spotLight2);

        const rimLight = new THREE.SpotLight(0x4a90e2, 0.6, 100, Math.PI / 3);
        rimLight.position.set(0, -10, 5);
        rimLight.target = poster;
        this.scene.add(rimLight);
      }

      this.controls.enabled = true;
      this.controls.autoRotate = this.autoRotate;
    }

    generateThumbnails() {
      const thumbnailScenes = {
        '3d': () => this.renderThumbnail3D(),
        'layers': () => this.renderThumbnailLayers(),
        'video': () => this.renderThumbnailVideo(),
        'computer': () => this.renderThumbnailRoom('#2c3e50'),
        'home': () => this.renderThumbnailRoom('#f5f5dc'),
        'studio': () => this.renderThumbnailStudio()
      };

      this.querySelectorAll('.ai-3d-poster-thumbnail-{{ ai_gen_id }}').forEach(thumb => {
        const canvas = thumb.querySelector('canvas');
        const ctx = canvas.getContext('2d');
        canvas.width = 90;
        canvas.height = 90;

        const scene = thumb.dataset.scene;
        if (thumbnailScenes[scene]) {
          thumbnailScenes[scene](ctx,90, 90);
        }
      });
    }

    renderThumbnail3D(ctx, width, height) {
      const ctx2d = this.querySelectorAll('.ai-3d-poster-thumbnail-{{ ai_gen_id }}')[0].querySelector('canvas').getContext('2d');
      ctx2d.fillStyle = 'linear-gradient(45deg, #667eea 0%, #764ba2 100%)';
      ctx2d.fillRect(0, 0, width, height);
      
      ctx2d.fillStyle = '#ffffff';
      ctx2d.fillRect(width/2 - 25, height/2 - 30, 50, 60);
      
      ctx2d.fillStyle = '#8b4513';
      ctx2d.strokeRect(width/2 - 27, height/2 - 32, 54, 64);
      ctx2d.lineWidth = 2;
      ctx2d.stroke();
    }

    renderThumbnailLayers(ctx, width, height) {
      const ctx2d = this.querySelectorAll('.ai-3d-poster-thumbnail-{{ ai_gen_id }}')[1].querySelector('canvas').getContext('2d');
      
      ctx2d.fillStyle = '#000000';
      ctx2d.fillRect(0, 0, width, height);
      
      for (let i = 0; i < 4; i++) {
        ctx2d.fillStyle = `rgba(255, 255, 255, ${0.9 - i * 0.2})`;
        const offset = i * 3;
        ctx2d.fillRect(width/2 - 20 + offset, height/2 - 25+ offset, 40, 50);
      }
    }

    renderThumbnailVideo(ctx, width, height) {
      const ctx2d = this.querySelectorAll('.ai-3d-poster-thumbnail-{{ ai_gen_id }}')[2].querySelector('canvas').getContext('2d');
      
      ctx2d.fillStyle = '#000000';
      ctx2d.fillRect(0, 0, width, height);
      
      ctx2d.fillStyle = '#333333';
      ctx2d.fillRect(width/2 - 30, height/2 - 20, 60, 40);
      
      ctx2d.fillStyle = '#ff4444';
      ctx2d.beginPath();
      ctx2d.moveTo(width/2 - 8, height/2 - 10);
      ctx2d.lineTo(width/2 + 8, height/2);
      ctx2d.lineTo(width/2 - 8, height/2 + 10);
      ctx2d.fill();
    }

    renderThumbnailRoom(color) {
      const thumbnails = this.querySelectorAll('.ai-3d-poster-thumbnail-{{ ai_gen_id }}');
      const isComputer = color === '#2c3e50';
      const isHome = color === '#f5f5dc';
      const thumbIndex = isComputer ? 3 : (isHome ? 4 : 3);
      
      const ctx2d = thumbnails[thumbIndex].querySelector('canvas').getContext('2d');
      const width = 90, height = 90;
      
      ctx2d.fillStyle = color;
      ctx2d.fillRect(0, 0, width, height);
      
      ctx2d.fillStyle = '#ffffff';
      ctx2d.fillRect(width/2 - 15, height/2 - 20, 30, 40);
      
      ctx2d.fillStyle = '#8b4513';
      ctx2d.strokeRect(width/2 - 16, height/2 - 21, 32, 42);
      ctx2d.lineWidth = 1;
      ctx2d.stroke();
      if (isComputer) {
        ctx2d.fillStyle = '#555555';
        ctx2d.fillRect(10, height - 20, 20, 15);
        ctx2d.fillRect(width - 30, height - 25, 25, 20);
      } else if (isHome) {
        ctx2d.fillStyle = '#654321';
        ctx2d.fillRect(5, height - 15, width - 10, 10);
      }
    }

    renderThumbnailStudio() {
      const ctx2d = this.querySelectorAll('.ai-3d-poster-thumbnail-{{ ai_gen_id }}')[5].querySelector('canvas').getContext('2d');
      const width = 90, height = 90;
      
      ctx2d.fillStyle = '#1a1a1a';
      ctx2d.fillRect(0, 0, width, height);
      
      ctx2d.fillStyle = '#ffffff';
      ctx2d.fillRect(width/2 - 18, height/2 - 22, 36, 44);
      
      ctx2d.fillStyle = '#ffff00';
      ctx2d.beginPath();
      ctx2d.arc(20, 20, 5, 0, Math.PI * 2);
      ctx2d.arc(70, 25, 4, 0, Math.PI * 2);
      ctx2d.arc(25, 70, 3, 0, Math.PI * 2);
      ctx2d.fill();
    }

    switchScene(scene, name) {
      if (this.currentScene === scene) return;
      
      this.isTransitioning = true;
      this.currentScene = scene;
      this.sceneNameEl.textContent = name;
      
      this.querySelectorAll('.ai-3d-poster-thumbnail-{{ ai_gen_id }}').forEach(thumb => {
        thumb.classList.remove('active');
      });
      
      this.querySelector(`[data-scene="${scene}"]`).classList.add('active');
      
      this.clearScene();
      this.scenes[scene]();
      
      setTimeout(() => {
        this.isTransitioning = false;}, 500);
    }

    resetView() {
      this.controls.reset();
      this.camera.position.set(0, 0, 5);
      this.controls.update();
    }

    toggleAutoRotate() {
      this.autoRotate = !this.autoRotate;
      this.controls.autoRotate = this.autoRotate;
    }

    toggleFullscreen() {
      if (!document.fullscreenElement) {
        this.requestFullscreen();
      } else {
        document.exitFullscreen();
      }
    }

    startAnimation() {
      const animate = () => {
        this.controls.update();
        
        if (this.currentScene === 'video') {
          this.videoTime += 0.016;
          const scale = 1 + Math.sin(this.videoTime *2) * 0.05;
          if (this.scene.children.length > 2) {
            this.scene.children[2].scale.setScalar(scale);
          }
        }
        
        this.renderer.render(this.scene, this.camera);
        this.animationId = requestAnimationFrame(animate);
      };
      animate();
    }

    showLoading() {
      this.isLoading = true;
      this.loadingEl.style.display = 'block';
    }

    hideLoading() {
      this.isLoading = false;
      this.loadingEl.style.display = 'none';
    }
  }

  customElements.define('poster-3d-viewer-{{ ai_gen_id }}', Poster3DViewer{{ ai_gen_id }});
})();
</script>

{% schema %}
{
  "name": "3D Product Poster Viewer",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Scene Backgrounds"
    },
    {
      "type": "image_picker",
      "id": "computer_room_bg",
      "label": "Computer room background"
    },
    {
      "type": "image_picker",
      "id": "home_interior_bg",
      "label": "Home interior background"
    },
    {
      "type": "image_picker",
      "id": "studio_lighting_bg",
      "label": "Studio lighting background"
    },
    {
      "type": "header",
      "content": "Style"
    },
    {
      "type": "color",
      "id": "container_background",
      "label": "Container background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "thumbnail_background",
      "label": "Thumbnail area background",
      "default": "#f8f8f8"
    },
    {
      "type": "color",
      "id": "accent_color",
      "label": "Accent color",
      "default": "#007acc"
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 25,
      "step": 1,
      "unit": "px",
      "label": "Border radius",
      "default": 15
    }
  ],
  "presets": [
    {
      "name": "3D Product Poster Viewer"
    }
  ]
}
{% endschema %}