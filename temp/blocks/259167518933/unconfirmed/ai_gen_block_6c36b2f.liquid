{% doc %}
  @prompt
    Create a 3d product poster viewer with square responsive viewport and 6 thumbnail navigation: 3D rotatable view with OrbitControls, layered depth animation, video player, computer room scene, home interior scene, and studio lighting scene. Include theme editor settings for custom background images on room scenes. Thumbnails are square, equal-sized, horizontally scrollable without labels.

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-3d-viewer-{{ ai_gen_id }} {
    width: 100%;
    max-width: 800px;
    margin: 0 auto;
    background: {{ block.settings.container_background }};
    border-radius: {{ block.settings.border_radius }}px;
    overflow: hidden;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
  }

  .ai-3d-viewer-viewport-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    aspect-ratio: 1;
    background: #000;
    overflow: hidden;
  }

  .ai-3d-viewer-canvas-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    display: block;
    cursor: grab;
  }

  .ai-3d-viewer-canvas-{{ ai_gen_id }}:active {
    cursor: grabbing;
  }

  .ai-3d-viewer-controls-{{ ai_gen_id }} {
    position: absolute;
    top: 16px;
    right: 16px;
    display: flex;
    flex-direction: column;
    gap: 8px;
    z-index: 10;
  }

  .ai-3d-viewer-control-btn-{{ ai_gen_id }} {
    width: 40px;
    height: 40px;
    background: rgba(255, 255, 255, 0.9);
    border: none;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
    backdrop-filter: blur(10px);
  }

  .ai-3d-viewer-control-btn-{{ ai_gen_id }}:hover {
    background: rgba(255, 255, 255, 1);
    transform: scale(1.05);
  }

  .ai-3d-viewer-control-btn-{{ ai_gen_id }}.active {
    background: {{ block.settings.accent_color }};
    color: white;
  }

  .ai-3d-viewer-thumbnails-{{ ai_gen_id }} {
    padding: 16px;
    background: {{ block.settings.thumbnail_background }};
  }

  .ai-3d-viewer-thumbnail-container-{{ ai_gen_id }} {
    display: flex;
    gap: 12px;
    overflow-x: auto;
    padding: 4px 0;
    scrollbar-width: thin;
    scrollbar-color: {{ block.settings.accent_color }} transparent;
  }

  .ai-3d-viewer-thumbnail-container-{{ ai_gen_id }}::-webkit-scrollbar {
    height: 6px;
  }

  .ai-3d-viewer-thumbnail-container-{{ ai_gen_id }}::-webkit-scrollbar-track {
    background: transparent;
  }

  .ai-3d-viewer-thumbnail-container-{{ ai_gen_id }}::-webkit-scrollbar-thumb {
    background: {{ block.settings.accent_color }};
    border-radius: 3px;
  }

  .ai-3d-viewer-thumbnail-{{ ai_gen_id }} {
    flex-shrink: 0;
    width: 80px;
    height: 80px;
    border-radius: 8px;
    overflow: hidden;
    cursor: pointer;
    transition: all 0.2s ease;
    border: 2px solid transparent;
    background: #f0f0f0;
  }

  .ai-3d-viewer-thumbnail-{{ ai_gen_id }}:hover {
    transform: scale(1.05);
    border-color: {{ block.settings.accent_color }};
  }

  .ai-3d-viewer-thumbnail-{{ ai_gen_id }}.active {
    border-color: {{ block.settings.accent_color }};
    transform: scale(1.05);
  }

  .ai-3d-viewer-thumbnail-{{ ai_gen_id }} canvas {
    width: 100%;
    height: 100%;
    display: block;
  }

  .ai-3d-viewer-loading-{{ ai_gen_id }} {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: white;
    font-size: 18px;
    z-index: 5;
  }

  .ai-3d-viewer-spinner-{{ ai_gen_id }} {
    width: 40px;
    height: 40px;
    border: 3px solid rgba(255, 255, 255, 0.3);
    border-top: 3px solid white;
    border-radius: 50%;
    animation: ai-3d-viewer-spin-{{ ai_gen_id }} 1s linear infinite;
    margin: 0 auto 16px;
  }

  @keyframes ai-3d-viewer-spin-{{ ai_gen_id }} {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  @media screen and (max-width: 768px) {
    .ai-3d-viewer-controls-{{ ai_gen_id }} {
      top: 12px;
      right: 12px;
    }

    .ai-3d-viewer-control-btn-{{ ai_gen_id }} {
      width: 36px;
      height: 36px;
    }

    .ai-3d-viewer-thumbnail-{{ ai_gen_id }} {
      width: 60px;
      height: 60px;
    }

    .ai-3d-viewer-thumbnails-{{ ai_gen_id }} {
      padding: 12px;
    }
  }
{% endstyle %}

<product-3d-viewer-{{ ai_gen_id }}
  class="ai-3d-viewer-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
  data-product-image="{{ block.settings.product_image | image_url: width: 1000 }}"
  data-computer-bg="{{ block.settings.computer_room_bg | image_url: width: 2000 }}"
  data-home-bg="{{ block.settings.home_interior_bg | image_url: width: 2000 }}"
  data-studio-bg="{{ block.settings.studio_lighting_bg | image_url: width: 2000 }}"
>
  <div class="ai-3d-viewer-viewport-{{ ai_gen_id }}">
    <canvas class="ai-3d-viewer-canvas-{{ ai_gen_id }}"></canvas>
    
    <div class="ai-3d-viewer-controls-{{ ai_gen_id }}">
      <button class="ai-3d-viewer-control-btn-{{ ai_gen_id }}" data-action="reset" title="Reset View">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"/>
          <path d="M21 3v5h-5"/>
          <path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"/>
          <path d="M3 21v-5h5"/>
        </svg>
      </button>
      
      <button class="ai-3d-viewer-control-btn-{{ ai_gen_id }}" data-action="autorotate" title="Auto Rotate">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"/>
          <path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"/>
        </svg>
      </button>
    </div>

    <div class="ai-3d-viewer-loading-{{ ai_gen_id }}" style="display: none;">
      <div class="ai-3d-viewer-spinner-{{ ai_gen_id }}"></div>
      <div>Loading 3D Scene...</div>
    </div>
  </div>

  <div class="ai-3d-viewer-thumbnails-{{ ai_gen_id }}">
    <div class="ai-3d-viewer-thumbnail-container-{{ ai_gen_id }}">
      <div class="ai-3d-viewer-thumbnail-{{ ai_gen_id }} active" data-scene="3d" title="3D Rotatable View">
        <canvas></canvas>
      </div>
      <div class="ai-3d-viewer-thumbnail-{{ ai_gen_id }}" data-scene="depth" title="Layered Depth Animation">
        <canvas></canvas>
      </div>
      <div class="ai-3d-viewer-thumbnail-{{ ai_gen_id }}" data-scene="video" title="Video Player">
        <canvas></canvas>
      </div>
      <div class="ai-3d-viewer-thumbnail-{{ ai_gen_id }}" data-scene="computer" title="Computer Room Scene">
        <canvas></canvas>
      </div>
      <div class="ai-3d-viewer-thumbnail-{{ ai_gen_id }}" data-scene="home" title="Home Interior Scene">
        <canvas></canvas>
      </div>
      <div class="ai-3d-viewer-thumbnail-{{ ai_gen_id }}" data-scene="studio" title="Studio Lighting Scene">
        <canvas></canvas>
      </div>
    </div>
  </div>
</product-3d-viewer-{{ ai_gen_id }}>

<script>
(function() {
  class Product3DViewer{{ ai_gen_id }} extends HTMLElement {
    constructor() {
      super();
      this.currentScene = '3d';
      this.isLoading = false;
      this.autoRotate = false;
      this.scenes = {};
      this.animationId = null;
    }

    connectedCallback() {
      this.canvas = this.querySelector('.ai-3d-viewer-canvas-{{ ai_gen_id }}');
      this.ctx = this.canvas.getContext('2d');
      this.loadingEl = this.querySelector('.ai-3d-viewer-loading-{{ ai_gen_id }}');
      
      this.productImageUrl = this.dataset.productImage;
      this.computerBgUrl = this.dataset.computerBg;
      this.homeBgUrl = this.dataset.homeBg;
      this.studioBgUrl = this.dataset.studioBg;

      this.setupCanvas();
      this.setupEventListeners();
      this.loadImages();
      this.initializeScenes();
    }

    disconnectedCallback() {
      if (this.animationId) {
        cancelAnimationFrame(this.animationId);
      }
    }

    setupCanvas() {
      const resizeCanvas = () => {
        const rect = this.canvas.parentElement.getBoundingClientRect();
        this.canvas.width = rect.width * window.devicePixelRatio;
        this.canvas.height = rect.height * window.devicePixelRatio;
        this.canvas.style.width = rect.width + 'px';
        this.canvas.style.height = rect.height + 'px';
        this.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);
        this.render();
      };

      resizeCanvas();
      window.addEventListener('resize', resizeCanvas);
    }

    setupEventListeners() {
      this.querySelectorAll('.ai-3d-viewer-thumbnail-{{ ai_gen_id }}').forEach(thumb => {
        thumb.addEventListener('click', () => {
          this.switchScene(thumb.dataset.scene);
        });
      });

      this.querySelectorAll('.ai-3d-viewer-control-btn-{{ ai_gen_id }}').forEach(btn => {
        btn.addEventListener('click', () => {
          const action = btn.dataset.action;
          if (action === 'reset') {
            this.resetView();
          } else if (action === 'autorotate') {
            this.toggleAutoRotate();
            btn.classList.toggle('active');
          }
        });
      });

      let isDragging = false;
      let lastX = 0;
      let lastY = 0;

      this.canvas.addEventListener('mousedown', (e) => {
        isDragging = true;
        lastX = e.clientX;
        lastY = e.clientY;
      });

      this.canvas.addEventListener('mousemove', (e) => {
        if (!isDragging) return;
        
        const deltaX = e.clientX - lastX;
        const deltaY = e.clientY - lastY;
        
        if (this.scenes[this.currentScene] && this.scenes[this.currentScene].rotation) {
          this.scenes[this.currentScene].rotation.y += deltaX * 0.01;
          this.scenes[this.currentScene].rotation.x += deltaY * 0.01;
          this.render();
        }
        
        lastX = e.clientX;
        lastY = e.clientY;
      });

      this.canvas.addEventListener('mouseup', () => {
        isDragging = false;
      });

      this.canvas.addEventListener('wheel', (e) => {
        e.preventDefault();
        if (this.scenes[this.currentScene] && this.scenes[this.currentScene].scale) {
          this.scenes[this.currentScene].scale = Math.max(0.5, Math.min(3, this.scenes[this.currentScene].scale + e.deltaY * -0.001));
          this.render();
        }
      });
    }

    async loadImages() {
      this.showLoading();
      
      const loadImage = (url) => {
        return new Promise((resolve) => {
          if (!url) {
            resolve(null);
            return;
          }
          const img = new Image();
          img.crossOrigin = 'anonymous';
          img.onload = () => resolve(img);
          img.onerror = () => resolve(null);
          img.src = url;
        });
      };

      this.images = {
        product: await loadImage(this.productImageUrl),
        computerBg: await loadImage(this.computerBgUrl),
        homeBg: await loadImage(this.homeBgUrl),
        studioBg: await loadImage(this.studioBgUrl)
      };

      this.hideLoading();
    }

    initializeScenes() {
      this.scenes = {
        '3d': {
          rotation: { x: 0, y: 0, z: 0 },
          scale: 1,
          position: { x: 0, y: 0, z: 0 },
          time: 0
        },
        'depth': {
          layers: [
            { depth: 0, scale: 1, opacity: 1 },
            { depth: 20, scale: 0.9, opacity: 0.8 },
            { depth: 40, scale: 0.8, opacity: 0.6 }
          ],
          time: 0
        },
        'video': {
          playing: false,
          time: 0,
          frames: 60
        },
        'computer': {
          rotation: { x: 0, y: 0, z: 0 },
          scale: 0.8,
          position: { x: 0, y: 0, z: 0 }
        },
        'home': {
          rotation: { x: 0, y: 0, z: 0 },
          scale: 0.7,
          position: { x: 0, y: 0, z: 0 }
        },
        'studio': {
          rotation: { x: 0, y: 0, z: 0 },
          scale: 1,
          position: { x: 0, y: 0, z: 0 },
          lights: [
            { x: -100, y: -100, intensity: 0.8 },
            { x: 100, y: -50, intensity: 0.6 },
            { x: 0, y: 100, intensity: 0.4 }
          ]
        }
      };

      this.generateThumbnails();this.startAnimation();
    }

    generateThumbnails() {
      this.querySelectorAll('.ai-3d-viewer-thumbnail-{{ ai_gen_id }}').forEach((thumb, index) => {
        const canvas = thumb.querySelector('canvas');
        const ctx = canvas.getContext('2d');
        canvas.width = 80;
        canvas.height = 80;

        const scene = thumb.dataset.scene;
        this.renderThumbnail(ctx, scene, 80, 80);});
    }

    renderThumbnail(ctx, scene, width, height) {
      ctx.fillStyle = '#f0f0f0';
      ctx.fillRect(0, 0, width, height);

      const centerX = width / 2;
      const centerY = height / 2;
      const size = 30;

      switch (scene) {
        case '3d':
          ctx.fillStyle = '#4CAF50';
          this.drawCube(ctx, centerX, centerY, size);
          break;
        case 'depth':
          ctx.fillStyle = '#2196F3';
          for (let i = 0; i < 3; i++) {
            ctx.globalAlpha = 0.7- i * 0.2;
            ctx.fillRect(centerX - size/2 + i * 5, centerY - size/2 + i * 5, size, size);
          }
          ctx.globalAlpha = 1;
          break;
        case 'video':
          ctx.fillStyle = '#FF5722';
          ctx.fillRect(centerX - size/2, centerY - size/2, size, size);
          ctx.fillStyle = 'white';
          ctx.beginPath();
          ctx.moveTo(centerX -8, centerY - 10);
          ctx.lineTo(centerX + 8, centerY);
          ctx.lineTo(centerX - 8, centerY + 10);
          ctx.fill();
          break;
        case 'computer':
          ctx.fillStyle = '#607D8B';
          ctx.fillRect(centerX - size/2, centerY - size/3, size, size/1.5);
          ctx.fillRect(centerX - size/3, centerY + size/4, size/1.5, size/6);
          break;
        case 'home':
          ctx.fillStyle = '#795548';
          ctx.beginPath();
          ctx.moveTo(centerX, centerY - size/2);
          ctx.lineTo(centerX + size/2, centerY);
          ctx.lineTo(centerX + size/3, centerY);
          ctx.lineTo(centerX + size/3, centerY + size/2);
          ctx.lineTo(centerX - size/3, centerY + size/2);
          ctx.lineTo(centerX - size/3, centerY);
          ctx.lineTo(centerX - size/2, centerY);
          ctx.fill();
          break;
        case 'studio':
          ctx.fillStyle = '#9C27B0';
          ctx.fillRect(centerX - size/2, centerY - size/2, size, size);
          ctx.fillStyle = '#FFD700';
          for (let i = 0; i < 3; i++) {
            const angle = (i * Math.PI * 2) / 3;
            const x = centerX + Math.cos(angle) * size/3;
            const y = centerY + Math.sin(angle) * size/3;
            ctx.beginPath();
            ctx.arc(x, y, 3, 0, Math.PI * 2);
            ctx.fill();
          }
          break;
      }
    }

    drawCube(ctx, x, y, size) {
      const points = [
        [-1, -1, -1], [1, -1, -1], [1, 1, -1], [-1, 1, -1],
        [-1, -1, 1], [1, -1, 1], [1, 1, 1], [-1, 1, 1]
      ];

      const rotatedPoints = points.map(([px, py, pz]) => {
        const rx = px * Math.cos(0.5) - pz * Math.sin(0.5);
        const rz = px * Math.sin(0.5) + pz * Math.cos(0.5);
        const ry = py * Math.cos(0.3) - rz * Math.sin(0.3);
        const finalZ = py * Math.sin(0.3) + rz * Math.cos(0.3);
        
        return [
          x + rx * size/4,
          y + ry * size/4,
          finalZ
        ];
      });

      const faces = [
        [0, 1, 2, 3], [4, 7, 6, 5], [0, 4, 5, 1],
        [2, 6, 7, 3], [0, 3, 7, 4], [1, 5, 6, 2]
      ];

      faces.forEach((face, i) => {
        ctx.fillStyle = `hsl(${120 + i * 20}, 70%, ${50 + i * 5}%)`;
        ctx.beginPath();
        ctx.moveTo(rotatedPoints[face[0]][0], rotatedPoints[face[0]][1]);
        face.forEach(pointIndex => {
          ctx.lineTo(rotatedPoints[pointIndex][0], rotatedPoints[pointIndex][1]);
        });
        ctx.closePath();
        ctx.fill();
      });
    }

    switchScene(scene) {
      this.currentScene = scene;
      this.querySelectorAll('.ai-3d-viewer-thumbnail-{{ ai_gen_id }}').forEach(thumb => {
        thumb.classList.remove('active');
      });
      
      this.querySelector(`[data-scene="${scene}"]`).classList.add('active');
      this.render();
    }

    resetView() {
      if (this.scenes[this.currentScene]) {
        if (this.scenes[this.currentScene].rotation) {
          this.scenes[this.currentScene].rotation = { x: 0, y: 0, z: 0 };
        }
        if (this.scenes[this.currentScene].scale) {
          this.scenes[this.currentScene].scale = 1;
        }
        if (this.scenes[this.currentScene].position) {
          this.scenes[this.currentScene].position = { x: 0, y: 0, z: 0 };
        }
        this.render();
      }
    }

    toggleAutoRotate() {
      this.autoRotate = !this.autoRotate;}

    startAnimation() {
      const animate = () => {
        if (this.autoRotate && this.scenes[this.currentScene] && this.scenes[this.currentScene].rotation) {
          this.scenes[this.currentScene].rotation.y += 0.01;
        }

        if (this.scenes[this.currentScene]) {
          this.scenes[this.currentScene].time = (this.scenes[this.currentScene].time || 0) + 0.016;
        }

        this.render();
        this.animationId = requestAnimationFrame(animate);
      };
      animate();
    }

    render() {
      const width = this.canvas.width / window.devicePixelRatio;
      const height = this.canvas.height / window.devicePixelRatio;
      
      this.ctx.clearRect(0, 0, width, height);

      switch (this.currentScene) {
        case '3d':
          this.render3D(width, height);
          break;
        case 'depth':
          this.renderDepth(width, height);
          break;
        case 'video':
          this.renderVideo(width, height);
          break;
        case 'computer':
          this.renderRoom(width, height, this.images.computerBg, '#1a1a2e');
          break;
        case 'home':
          this.renderRoom(width, height, this.images.homeBg, '#f5f5dc');
          break;
        case 'studio':
          this.renderStudio(width, height);
          break;
      }
    }

    render3D(width, height) {
      const scene = this.scenes['3d'];
      const centerX = width / 2;
      const centerY = height / 2;

      this.ctx.fillStyle = 'linear-gradient(45deg, #667eea 0%, #764ba2 100%)';
      this.ctx.fillRect(0, 0, width, height);

      if (this.images.product) {
        this.ctx.save();
        this.ctx.translate(centerX, centerY);
        this.ctx.scale(scene.scale, scene.scale);
        this.ctx.rotate(scene.rotation.z);
        
        const imgWidth = 200;
        const imgHeight = 200;
        this.ctx.shadowColor = 'rgba(0, 0, 0, 0.3)';
        this.ctx.shadowBlur = 20;
        this.ctx.shadowOffsetY = 10;
        
        this.ctx.drawImage(this.images.product, -imgWidth/2, -imgHeight/2, imgWidth, imgHeight);
        this.ctx.restore();
      }
    }

    renderDepth(width, height) {
      const scene = this.scenes['depth'];
      const centerX = width / 2;
      const centerY = height / 2;

      this.ctx.fillStyle = '#000';
      this.ctx.fillRect(0, 0, width, height);

      if (this.images.product) {
        scene.layers.forEach((layer, i) => {
          this.ctx.save();
          this.ctx.globalAlpha = layer.opacity;
          this.ctx.translate(centerX, centerY);
          
          const parallax = Math.sin(scene.time + i) * 10;
          this.ctx.translate(parallax, parallax * 0.5);
          this.ctx.scale(layer.scale, layer.scale);
          
          const imgSize = 180 - layer.depth;
          this.ctx.drawImage(this.images.product, -imgSize/2, -imgSize/2, imgSize, imgSize);
          this.ctx.restore();
        });
      }
    }

    renderVideo(width, height) {
      const scene = this.scenes['video'];
      const centerX = width / 2;
      const centerY = height / 2;

      this.ctx.fillStyle = '#000';
      this.ctx.fillRect(0, 0, width, height);

      if (this.images.product) {
        const frame = Math.floor(scene.time * 30) % 60;
        const scale = 1 + Math.sin(frame * 0.1) * 0.1;
        
        this.ctx.save();
        this.ctx.translate(centerX, centerY);
        this.ctx.scale(scale, scale);
        this.ctx.drawImage(this.images.product, -100, -100, 200, 200);
        this.ctx.restore();

        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
        this.ctx.font = '14px Arial';
        this.ctx.textAlign = 'center';
        this.ctx.fillText(`Frame ${frame + 1}/60`, centerX, height - 20);
      }
    }

    renderRoom(width, height, bgImage, fallbackColor) {
      if (bgImage) {
        this.ctx.drawImage(bgImage, 0, 0, width, height);
      } else {
        this.ctx.fillStyle = fallbackColor;
        this.ctx.fillRect(0, 0, width, height);
      }

      if (this.images.product) {
        const scene = this.scenes[this.currentScene];
        const centerX = width / 2;
        const centerY = height / 2;

        this.ctx.save();
        this.ctx.translate(centerX, centerY);
        this.ctx.scale(scene.scale, scene.scale);
        this.ctx.rotate(scene.rotation.z);
        
        this.ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';
        this.ctx.shadowBlur = 15;
        this.ctx.shadowOffsetY = 8;
        
        this.ctx.drawImage(this.images.product, -100, -100, 200, 200);
        this.ctx.restore();
      }
    }

    renderStudio(width, height) {
      const scene = this.scenes['studio'];
      const centerX = width / 2;
      const centerY = height / 2;

      const gradient = this.ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, width/2);
      gradient.addColorStop(0, '#2c2c54');
      gradient.addColorStop(1, '#000');
      this.ctx.fillStyle = gradient;
      this.ctx.fillRect(0, 0, width, height);

      scene.lights.forEach(light => {
        const lightGradient = this.ctx.createRadialGradient(
          centerX + light.x, centerY + light.y, 0,
          centerX + light.x, centerY + light.y, 100
        );
        lightGradient.addColorStop(0, `rgba(255, 255, 255, ${light.intensity * 0.3})`);
        lightGradient.addColorStop(1, 'rgba(255, 255, 255, 0)');
        this.ctx.fillStyle = lightGradient;
        this.ctx.fillRect(0, 0, width, height);
      });

      if (this.images.product) {
        this.ctx.save();
        this.ctx.translate(centerX, centerY);
        this.ctx.scale(scene.scale, scene.scale);
        this.ctx.rotate(scene.rotation.z);
        
        this.ctx.shadowColor = 'rgba(255, 255, 255, 0.3)';
        this.ctx.shadowBlur = 25;
        
        this.ctx.drawImage(this.images.product, -100, -100, 200, 200);
        this.ctx.restore();
      }
    }

    showLoading() {
      this.isLoading = true;
      this.loadingEl.style.display = 'block';
    }

    hideLoading() {
      this.isLoading = false;
      this.loadingEl.style.display = 'none';
    }
  }

  customElements.define('product-3d-viewer-{{ ai_gen_id }}', Product3DViewer{{ ai_gen_id }});
})();
</script>

{% schema %}
{
  "name": "3D Product Poster Viewer",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Product"
    },
    {
      "type": "image_picker",
      "id": "product_image",
      "label": "Product image"
    },
    {
      "type": "header",
      "content": "Scene Backgrounds"
    },
    {
      "type": "image_picker",
      "id": "computer_room_bg",
      "label": "Computer room background"
    },
    {
      "type": "image_picker",
      "id": "home_interior_bg",
      "label": "Home interior background"
    },
    {
      "type": "image_picker",
      "id": "studio_lighting_bg",
      "label": "Studio lighting background"
    },
    {
      "type": "header",
      "content": "Style"
    },
    {
      "type": "color",
      "id": "container_background",
      "label": "Container background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "thumbnail_background",
      "label": "Thumbnail area background",
      "default": "#f8f8f8"
    },
    {
      "type": "color",
      "id": "accent_color",
      "label": "Accent color",
      "default": "#007acc"
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 12
    }
  ],
  "presets": [
    {
      "name": "3D Product Poster Viewer"
    }
  ]
}
{% endschema %}