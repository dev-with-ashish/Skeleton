{% doc %}
  @prompt
    custom product section with its all variants option showing in each row updating product price with variant change, variant in its radio style, uable to click variants, show variant options separately in button style , all variant option should show its child in its own line, it should be like variant1 : option1, option2, option3 then in another line variant2: option1, option2, option3 in this manner and the price should get refelected even the variant is out of stock, map product price to variant change so it can refelect the updated variant price, add 2 text layers over the selected product image layer in the customizer provide option to select text font and x and y position option to position text anywhere over the product image, keep everything same no change in variants just add 2 text layers over the selected product image layer in the customizer provide option to select text font and x and y position option to position text anywhere over the product image, make the text box available for users to type and preview their name all its steeing will remain in the customiser, for text add option in the customiser to curve it or bend it rotate it , everything working well just add options for texts in the customiser to curve it and bend it and rotate it (do not change anyother functions and styling)
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-product-variants-{{ ai_gen_id }} {
    max-width: 100%;
    margin: 0 auto;
    padding: 20px;
    background-color: {{ block.settings.background_color }};
    border-radius: {{ block.settings.border_radius }}px;
  }

  .ai-product-image-container-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    margin-bottom: 20px;
    overflow: hidden;
    border-radius: 8px;
  }

  .ai-product-image-{{ ai_gen_id }} {
    width: 100%;
    height: auto;
    display: block;
  }

  .ai-product-image-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 400px;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  .ai-product-image-placeholder-{{ ai_gen_id }} svg {
    width: 100%;
    height: 100%;
    max-width: 300px;
    max-height: 300px;
  }

  .ai-text-overlay-{{ ai_gen_id }} {
    position: absolute;
    pointer-events: none;
    z-index: 2;
    white-space: nowrap;
    transform-origin: center;
  }

  .ai-text-overlay-1-{{ ai_gen_id }} {
    top: {{ block.settings.text_1_y }}%;
    left: {{ block.settings.text_1_x }}%;
    transform: translate(-50%, -50%) 
               rotate({{ block.settings.text_1_rotation }}deg)
               {% if block.settings.text_1_curve != 0 %}
                 perspective({{ block.settings.text_1_curve | times: 10 }}px) rotateX({{ block.settings.text_1_curve }}deg)
               {% endif %}
               {% if block.settings.text_1_bend != 0 %}
                 skewX({{ block.settings.text_1_bend }}deg)
               {% endif %};
    font-family: {{ block.settings.text_1_font.family }}, {{ block.settings.text_1_font.fallback_families }};
    font-weight: {{ block.settings.text_1_font.weight }};
    font-size: {{ block.settings.text_1_size }}px;
    color: {{ block.settings.text_1_color }};
  }

  .ai-text-overlay-2-{{ ai_gen_id }} {
    top: {{ block.settings.text_2_y }}%;
    left: {{ block.settings.text_2_x }}%;
    transform: translate(-50%, -50%) 
               rotate({{ block.settings.text_2_rotation }}deg)
               {% if block.settings.text_2_curve != 0 %}
                 perspective({{ block.settings.text_2_curve | times: 10 }}px) rotateX({{ block.settings.text_2_curve }}deg)
               {% endif %}
               {% if block.settings.text_2_bend != 0 %}
                 skewX({{ block.settings.text_2_bend }}deg)
               {% endif %};
    font-family: {{ block.settings.text_2_font.family }}, {{ block.settings.text_2_font.fallback_families }};
    font-weight: {{ block.settings.text_2_font.weight }};
    font-size: {{ block.settings.text_2_size }}px;
    color: {{ block.settings.text_2_color }};
  }

  .ai-text-input-{{ ai_gen_id }} {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
    margin-bottom: 10px;
  }

  .ai-product-title-{{ ai_gen_id }} {
    font-size: {{ block.settings.title_size }}px;
    color: {{ block.settings.title_color }};
    margin-bottom: 15px;
    font-weight: 600;
  }

  .ai-product-price-{{ ai_gen_id }} {
    font-size: {{ block.settings.price_size }}px;
    color: {{ block.settings.price_color }};
    margin-bottom: 20px;
    font-weight: 700;
  }

  .ai-variant-group-{{ ai_gen_id }} {
    margin-bottom: 20px;
  }

  .ai-variant-label-{{ ai_gen_id }} {
    font-size: 16px;
    font-weight: 600;
    color: {{ block.settings.variant_label_color }};
    margin-bottom: 10px;
    display: block;
  }

  .ai-variant-options-{{ ai_gen_id }} {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
  }

  .ai-variant-option-{{ ai_gen_id }} {
    position: relative;
  }

  .ai-variant-option-input-{{ ai_gen_id }} {
    position: absolute;
    opacity: 0;
    pointer-events: none;
  }

  .ai-variant-option-button-{{ ai_gen_id }} {
    padding: 10px 16px;
    border: 2px solid {{ block.settings.variant_border_color }};
    background-color: {{ block.settings.variant_bg_color }};
    color: {{ block.settings.variant_text_color }};
    border-radius: {{ block.settings.variant_border_radius }}px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 14px;
    display: inline-block;
    text-align: center;
    min-width: 60px;
  }

  .ai-variant-option-button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.variant_hover_bg_color }};
    border-color: {{ block.settings.variant_hover_border_color }};
  }

  .ai-variant-option-input-{{ ai_gen_id }}:checked + .ai-variant-option-button-{{ ai_gen_id }} {
    background-color: {{ block.settings.variant_selected_bg_color }};
    border-color: {{ block.settings.variant_selected_border_color }};
    color: {{ block.settings.variant_selected_text_color }};
  }

  .ai-variant-option-button-{{ ai_gen_id }}.unavailable {
    opacity: 0.5;
    cursor: not-allowed;
    text-decoration: line-through;
  }

  .ai-add-to-cart-{{ ai_gen_id }} {
    width: 100%;
    padding: 15px 20px;
    background-color: {{ block.settings.button_bg_color }};
    color: {{ block.settings.button_text_color }};
    border: none;
    border-radius: {{ block.settings.button_border_radius }}px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.3s ease;
    margin-top: 20px;
  }

  .ai-add-to-cart-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.button_hover_bg_color }};
  }

  .ai-add-to-cart-{{ ai_gen_id }}:disabled {
    background-color: #ccc;
    cursor: not-allowed;
  }

  @media screen and (max-width: 768px) {
    .ai-variant-options-{{ ai_gen_id }} {
      gap: 8px;
    }
    
    .ai-variant-option-button-{{ ai_gen_id }} {
      padding: 8px 12px;
      font-size: 13px;
      min-width: 50px;
    }
  }
{% endstyle %}

<product-variants-{{ ai_gen_id }}
  class="ai-product-variants-{{ ai_gen_id }}"
  data-product-id="{{ product.id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-product-image-container-{{ ai_gen_id }}">
    {% if product.featured_image %}
      <img
        src="{{ product.featured_image | image_url: width: 800 }}"
        alt="{{ product.featured_image.alt | escape }}"
        class="ai-product-image-{{ ai_gen_id }}"
        id="ai-product-image-{{ ai_gen_id }}"
        loading="lazy"
        width="{{ product.featured_image.width }}"
        height="{{ product.featured_image.height }}"
      >
    {% else %}
      <div class="ai-product-image-placeholder-{{ ai_gen_id }}">
        {{ 'product-1' | placeholder_svg_tag }}
      </div>
    {% endif %}

    {% if block.settings.text_1_enabled %}
      <div class="ai-text-overlay-{{ ai_gen_id }} ai-text-overlay-1-{{ ai_gen_id }}" id="ai-text-overlay-1-{{ ai_gen_id }}">
        {{ block.settings.text_1_default }}
      </div>
    {% endif %}

    {% if block.settings.text_2_enabled %}
      <div class="ai-text-overlay-{{ ai_gen_id }} ai-text-overlay-2-{{ ai_gen_id }}" id="ai-text-overlay-2-{{ ai_gen_id }}">
        {{ block.settings.text_2_default }}
      </div>
    {% endif %}
  </div>

  {% if block.settings.text_1_enabled %}
    <input
      type="text"
      class="ai-text-input-{{ ai_gen_id }}"
      placeholder="{{ block.settings.text_1_placeholder }}"
      data-text-target="1"
      value="{{ block.settings.text_1_default }}"
    >
  {% endif %}

  {% if block.settings.text_2_enabled %}
    <input
      type="text"
      class="ai-text-input-{{ ai_gen_id }}"
      placeholder="{{ block.settings.text_2_placeholder }}"
      data-text-target="2"
      value="{{ block.settings.text_2_default }}"
    >
  {% endif %}

  {% if product.title %}
    <h2 class="ai-product-title-{{ ai_gen_id }}">{{ product.title }}</h2>
  {% endif %}

  <div class="ai-product-price-{{ ai_gen_id }}" id="ai-product-price-{{ ai_gen_id }}">
    {{ product.price | money }}
  </div>

  {% if product.has_only_default_variant == false %}
    {% for option in product.options_with_values %}
      <div class="ai-variant-group-{{ ai_gen_id }}">
        <label class="ai-variant-label-{{ ai_gen_id }}">{{ option.name }}:</label>
        <div class="ai-variant-options-{{ ai_gen_id }}">
          {% for value in option.values %}
            <div class="ai-variant-option-{{ ai_gen_id }}">
              <input
                type="radio"
                name="option{{ option.position }}"
                value="{{ value | escape }}"
                class="ai-variant-option-input-{{ ai_gen_id }}"
                id="ai-option-{{ ai_gen_id }}-{{ option.position }}-{{ forloop.index }}"
                {% if option.selected_value == value %}checked{% endif %}
                data-option-position="{{ option.position }}"
              >
              <label
                for="ai-option-{{ ai_gen_id }}-{{ option.position }}-{{ forloop.index }}"
                class="ai-variant-option-button-{{ ai_gen_id }}"
                data-value="{{ value | escape }}"
              >
                {{ value }}
              </label>
            </div>
          {% endfor %}
        </div>
      </div>
    {% endfor %}
  {% endif %}

  <button
    type="button"
    class="ai-add-to-cart-{{ ai_gen_id }}"
    id="ai-add-to-cart-{{ ai_gen_id }}"
  >
    Add to Cart
  </button>
</product-variants-{{ ai_gen_id }}>

<script>
  (function() {
    class ProductVariants{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.productData = null;
        this.currentVariant = null;
        this.selectedOptions = {};
      }

      connectedCallback() {
        this.loadProductData();
        this.setupEventListeners();
        this.initializeSelectedOptions();
        this.setupTextInputs();
      }

      async loadProductData() {
        const productId = this.dataset.productId;
        if (!productId) return;

        try {
          const response = await fetch(`/products/${productId}.js`);
          this.productData = await response.json();
          this.updateVariantAvailability();
          this.updateCurrentVariant();
        } catch (error) {
          console.error('Error loading product data:', error);
        }
      }

      setupEventListeners() {
        const variantInputs = this.querySelectorAll('.ai-variant-option-input-{{ ai_gen_id }}');
        variantInputs.forEach(input => {
          input.addEventListener('change', () => {
            this.handleVariantChange();
          });
        });

        const addToCartButton = this.querySelector('.ai-add-to-cart-{{ ai_gen_id }}');
        if (addToCartButton) {
          addToCartButton.addEventListener('click', () => {
            this.handleAddToCart();
          });
        }
      }

      setupTextInputs() {
        const textInputs = this.querySelectorAll('.ai-text-input-{{ ai_gen_id }}');
        textInputs.forEach(input => {
          input.addEventListener('input', (e) => {
            const target = e.target.dataset.textTarget;
            const overlay = this.querySelector(`#ai-text-overlay-${target}-{{ ai_gen_id }}`);
            if (overlay) {
              overlay.textContent = e.target.value || '';
            }
          });
        });
      }

      initializeSelectedOptions() {
        const variantInputs = this.querySelectorAll('.ai-variant-option-input-{{ ai_gen_id }}:checked');
        variantInputs.forEach(input => {
          const position = input.dataset.optionPosition;
          this.selectedOptions[`option${position}`] = input.value;
        });
      }

      handleVariantChange() {
        const variantInputs = this.querySelectorAll('.ai-variant-option-input-{{ ai_gen_id }}:checked');
        this.selectedOptions = {};
        
        variantInputs.forEach(input => {
          const position = input.dataset.optionPosition;
          this.selectedOptions[`option${position}`] = input.value;
        });

        this.updateCurrentVariant();
        this.updateVariantAvailability();
      }

      updateCurrentVariant() {
        if (!this.productData) return;

        this.currentVariant = this.productData.variants.find(variant => {
          return variant.option1 === this.selectedOptions.option1 &&
                 variant.option2 === this.selectedOptions.option2 &&
                 variant.option3 === this.selectedOptions.option3;
        });

        if (this.currentVariant) {
          this.updatePrice();
          this.updateAddToCartButton();
          this.updateProductImage();
        }
      }

      updatePrice() {
        const priceElement = this.querySelector('#ai-product-price-{{ ai_gen_id }}');
        if (priceElement && this.currentVariant) {
          const price = new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: '{{ cart.currency.iso_code }}',
            minimumFractionDigits: 2
          }).format(this.currentVariant.price / 100);
          priceElement.textContent = price;
        }
      }

      updateAddToCartButton() {
        const button = this.querySelector('#ai-add-to-cart-{{ ai_gen_id }}');
        if (button && this.currentVariant) {
          button.disabled = !this.currentVariant.available;
          button.textContent = this.currentVariant.available ? 'Add to Cart' : 'Sold Out';
        }
      }

      updateProductImage() {
        if (this.currentVariant && this.currentVariant.featured_image) {
          const imageElement = this.querySelector('#ai-product-image-{{ ai_gen_id }}');
          if (imageElement) {
            const imageUrl = this.currentVariant.featured_image.src.replace(/\.(jpg|jpeg|png|gif|webp)/, '_800x.$1');
            imageElement.src = imageUrl;
            imageElement.alt = this.currentVariant.featured_image.alt || '';
          }
        }
      }

      updateVariantAvailability() {
        if (!this.productData) return;

        const allButtons = this.querySelectorAll('.ai-variant-option-button-{{ ai_gen_id }}');
        allButtons.forEach(button => {
          button.classList.remove('unavailable');
        });

        this.productData.variants.forEach(variant => {
          if (!variant.available) {
            const option1Button = this.querySelector(`[data-value="${variant.option1}"]`);
            const option2Button = this.querySelector(`[data-value="${variant.option2}"]`);
            const option3Button = this.querySelector(`[data-value="${variant.option3}"]`);
            
            if (option1Button) option1Button.classList.add('unavailable');
            if (option2Button) option2Button.classList.add('unavailable');
            if (option3Button) option3Button.classList.add('unavailable');
          }
        });
      }

      async handleAddToCart() {
        if (!this.currentVariant || !this.currentVariant.available) return;

        const formData = {
          id: this.currentVariant.id,
          quantity: 1
        };

        try {
          const response = await fetch('/cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(formData)
          });

          if (response.ok) {
            window.location.href = '/cart';
          } else {
            console.error('Error adding to cart');
          }
        } catch (error) {
          console.error('Error adding to cart:', error);
        }
      }
    }

    customElements.define('product-variants-{{ ai_gen_id }}', ProductVariants{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Product variants",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Product display"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Border radius",
      "default": 8
    },
    {
      "type": "color",
      "id": "title_color",
      "label": "Title color",
      "default": "#000000"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 16,
      "max": 48,
      "step": 2,
      "unit": "px",
      "label": "Title size",
      "default": 24
    },
    {
      "type": "color",
      "id": "price_color",
      "label": "Price color",
      "default": "#000000"
    },
    {
      "type": "range",
      "id": "price_size",
      "min": 14,
      "max": 32,
      "step": 2,
      "unit": "px",
      "label": "Price size",
      "default": 20
    },
    {
      "type": "header",
      "content": "Text overlay 1"
    },
    {
      "type": "checkbox",
      "id": "text_1_enabled",
      "label": "Enable text overlay 1",
      "default": true
    },
    {
      "type": "text",
      "id": "text_1_default",
      "label": "Default text",
      "default": "Your Text Here"
    },
    {
      "type": "text",
      "id": "text_1_placeholder",
      "label": "Input placeholder",
      "default": "Enter your text"
    },
    {
      "type": "font_picker",
      "id": "text_1_font",
      "label": "Font",
      "default": "helvetica_n4"
    },
    {
      "type": "range",
      "id": "text_1_size",
      "min": 12,
      "max": 72,
      "step": 2,
      "unit": "px",
      "label": "Font size",
      "default": 24
    },
    {
      "type": "color",
      "id": "text_1_color",
      "label": "Text color",
      "default": "#000000"
    },
    {
      "type": "range",
      "id": "text_1_x",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "%",
      "label": "Horizontal position",
      "default": 50
    },
    {
      "type": "range",
      "id": "text_1_y",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "%",
      "label": "Vertical position",
      "default": 30
    },
    {
      "type": "range",
      "id": "text_1_rotation",
      "min": -180,
      "max": 180,
      "step": 5,
      "unit": "deg",
      "label": "Rotation",
      "default": 0
    },
    {
      "type": "range",
      "id": "text_1_curve",
      "min": -45,
      "max": 45,
      "step": 5,
      "unit": "deg",
      "label": "Curve",
      "default": 0
    },
    {
      "type": "range",
      "id": "text_1_bend",
      "min": -45,
      "max": 45,
      "step": 5,
      "unit": "deg",
      "label": "Bend",
      "default": 0
    },
    {
      "type": "header",
      "content": "Text overlay 2"
    },
    {
      "type": "checkbox",
      "id": "text_2_enabled",
      "label": "Enable text overlay 2",
      "default": true
    },
    {
      "type": "text",
      "id": "text_2_default",
      "label": "Default text",
      "default": "Custom Text"
    },
    {
      "type": "text",
      "id": "text_2_placeholder",
      "label": "Input placeholder",
      "default": "Enter custom text"
    },
    {
      "type": "font_picker",
      "id": "text_2_font",
      "label": "Font",
      "default": "helvetica_n4"
    },
    {
      "type": "range",
      "id": "text_2_size",
      "min": 12,
      "max": 72,
      "step": 2,
      "unit": "px",
      "label": "Font size",
      "default": 18
    },
    {
      "type": "color",
      "id": "text_2_color",
      "label": "Text color",
      "default": "#666666"
    },
    {
      "type": "range",
      "id": "text_2_x",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "%",
      "label": "Horizontal position",
      "default": 50
    },
    {
      "type": "range",
      "id": "text_2_y",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "%",
      "label": "Vertical position",
      "default": 70
    },
    {
      "type": "range",
      "id": "text_2_rotation",
      "min": -180,
      "max": 180,
      "step": 5,
      "unit": "deg",
      "label": "Rotation",
      "default": 0
    },
    {
      "type": "range",
      "id": "text_2_curve",
      "min": -45,
      "max": 45,
      "step": 5,
      "unit": "deg",
      "label": "Curve",
      "default": 0
    },
    {
      "type": "range",
      "id": "text_2_bend",
      "min": -45,
      "max": 45,
      "step": 5,
      "unit": "deg",
      "label": "Bend",
      "default": 0
    },
    {
      "type": "header",
      "content": "Variant options"
    },
    {
      "type": "color",
      "id": "variant_label_color",
      "label": "Label color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "variant_bg_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "variant_text_color",
      "label": "Text color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "variant_border_color",
      "label": "Border color",
      "default": "#dddddd"
    },
    {
      "type": "color",
      "id": "variant_hover_bg_color",
      "label": "Hover background color",
      "default": "#f5f5f5"
    },
    {
      "type": "color",
      "id": "variant_hover_border_color",
      "label": "Hover border color",
      "default": "#cccccc"
    },
    {
      "type": "color",
      "id": "variant_selected_bg_color",
      "label": "Selected background color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "variant_selected_text_color",
      "label": "Selected text color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "variant_selected_border_color",
      "label": "Selected border color",
      "default": "#000000"
    },
    {
      "type": "range",
      "id": "variant_border_radius",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Border radius",
      "default": 4
    },
    {
      "type": "header",
      "content": "Add to cart button"
    },
    {
      "type": "color",
      "id": "button_bg_color",
      "label": "Background color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Text color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "button_hover_bg_color",
      "label": "Hover background color",
      "default": "#333333"
    },
    {
      "type": "range",
      "id": "button_border_radius",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Border radius",
      "default": 4
    }
  ],
  "presets": [
    {
      "name": "Product variants"
    }
  ]
}
{% endschema %}