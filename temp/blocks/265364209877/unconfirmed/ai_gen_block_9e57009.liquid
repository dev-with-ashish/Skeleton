{% doc %}
  @prompt
    custom product section with its all variants option showing in each row updating product price with variant change, variant in its radio style, uable to click variants, show variant options separately in button style , all variant option should show its child in its own line, it should be like variant1 : option1, option2, option3 then in another line variant2: option1, option2, option3 in this manner and the price should get refelected even the variant is out of stock, map product price to variant change so it can refelect the updated variant price, add 2 text layers over the selected product image layer in the customizer provide option to select text font and x and y position option to position text anywhere over the product image, keep everything same no change in variants just add 2 text layers over the selected product image layer in the customizer provide option to select text font and x and y position option to position text anywhere over the product image, make the text box available for users to type and preview their name all its steeing will remain in the customiser, for texts add option in the customiser to curve it and bend it and rotate it 
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-product-variants-{{ ai_gen_id }} {
    max-width: 100%;
    margin: 0 auto;
    padding: 20px;
    background-color: {{ block.settings.background_color }};
    border-radius: {{ block.settings.border_radius }}px;
  }

  .ai-product-image-container-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    margin-bottom: 20px;
    overflow: hidden;
    border-radius: {{ block.settings.image_border_radius }}px;
  }

  .ai-product-image-{{ ai_gen_id }} {
    width: 100%;
    height: auto;
    display: block;
  }

  .ai-text-overlay-{{ ai_gen_id }} {
    position: absolute;
    pointer-events: none;
    white-space: nowrap;
    z-index: 2;
    transform-origin: center;
  }

  .ai-text-overlay-1-{{ ai_gen_id }} {
    top: {{ block.settings.text_1_y }}%;
    left: {{ block.settings.text_1_x }}%;
    transform: translate(-50%, -50%) rotate({{ block.settings.text_1_rotation }}deg);
    font-family: {{ block.settings.text_1_font.family }}, {{ block.settings.text_1_font.fallback_families }};
    font-weight: {{ block.settings.text_1_font.weight }};
    font-size: {{ block.settings.text_1_size }}px;
    color: {{ block.settings.text_1_color }};
    text-shadow: {{ block.settings.text_1_shadow_x }}px {{ block.settings.text_1_shadow_y }}px {{ block.settings.text_1_shadow_blur }}px {{ block.settings.text_1_shadow_color }};
  }

  .ai-text-overlay-1-{{ ai_gen_id }}.curved {
    transform: translate(-50%, -50%) rotate({{ block.settings.text_1_rotation }}deg);
  }

  .ai-text-overlay-1-{{ ai_gen_id }}.bent {
    transform: translate(-50%, -50%) rotate({{ block.settings.text_1_rotation }}deg) skew({{ block.settings.text_1_bend }}deg, 0deg);
  }

  .ai-text-overlay-2-{{ ai_gen_id }} {
    top: {{ block.settings.text_2_y }}%;
    left: {{ block.settings.text_2_x }}%;
    transform: translate(-50%, -50%) rotate({{ block.settings.text_2_rotation }}deg);
    font-family: {{ block.settings.text_2_font.family }}, {{ block.settings.text_2_font.fallback_families }};
    font-weight: {{ block.settings.text_2_font.weight }};
    font-size: {{ block.settings.text_2_size }}px;
    color: {{ block.settings.text_2_color }};
    text-shadow: {{ block.settings.text_2_shadow_x }}px {{ block.settings.text_2_shadow_y }}px {{ block.settings.text_2_shadow_blur }}px {{ block.settings.text_2_shadow_color }};
  }

  .ai-text-overlay-2-{{ ai_gen_id }}.curved {
    transform: translate(-50%, -50%) rotate({{ block.settings.text_2_rotation }}deg);
  }

  .ai-text-overlay-2-{{ ai_gen_id }}.bent {
    transform: translate(-50%, -50%) rotate({{ block.settings.text_2_rotation }}deg) skew({{ block.settings.text_2_bend }}deg, 0deg);
  }

  .ai-curved-text-{{ ai_gen_id }} {
    fill: currentColor;
  }

  .ai-product-title-{{ ai_gen_id }} {
    font-size: {{ block.settings.title_size }}px;
    color: {{ block.settings.title_color }};
    margin-bottom: 10px;
    font-weight: 600;
  }

  .ai-product-price-{{ ai_gen_id }} {
    font-size: {{ block.settings.price_size }}px;
    color: {{ block.settings.price_color }};
    margin-bottom: 20px;
    font-weight: 500;
  }

  .ai-variant-group-{{ ai_gen_id }} {
    margin-bottom: 15px;
  }

  .ai-variant-label-{{ ai_gen_id }} {
    font-size: {{ block.settings.variant_label_size }}px;
    color: {{ block.settings.variant_label_color }};
    font-weight: 600;
    margin-bottom: 8px;
    display: block;
  }

  .ai-variant-options-{{ ai_gen_id }} {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
  }

  .ai-variant-option-{{ ai_gen_id }} {
    padding: 8px 16px;
    border: 2px solid {{ block.settings.variant_border_color }};
    background-color: {{ block.settings.variant_bg_color }};
    color: {{ block.settings.variant_text_color }};
    border-radius: {{ block.settings.variant_border_radius }}px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: {{ block.settings.variant_text_size }}px;
  }

  .ai-variant-option-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.variant_hover_bg_color }};
    border-color: {{ block.settings.variant_hover_border_color }};
  }

  .ai-variant-option-{{ ai_gen_id }}.selected {
    background-color: {{ block.settings.variant_selected_bg_color }};
    border-color: {{ block.settings.variant_selected_border_color }};
    color: {{ block.settings.variant_selected_text_color }};
  }

  .ai-variant-option-{{ ai_gen_id }}.unavailable {
    opacity: 0.5;
    cursor: not-allowed;
    text-decoration: line-through;
  }

  .ai-text-input-container-{{ ai_gen_id }} {
    margin-bottom: 20px;
  }

  .ai-text-input-label-{{ ai_gen_id }} {
    display: block;
    font-size: 14px;
    font-weight: 600;
    margin-bottom: 5px;
    color: {{ block.settings.title_color }};
  }

  .ai-text-input-{{ ai_gen_id }} {
    width: 100%;
    padding: 10px 12px;
    border: 1px solid {{ block.settings.variant_border_color }};
    border-radius: {{ block.settings.variant_border_radius }}px;
    font-size: 14px;
    margin-bottom: 10px;
  }

  .ai-text-input-{{ ai_gen_id }}:focus {
    outline: none;
    border-color: {{ block.settings.variant_selected_border_color }};
  }

  @media screen and (max-width: 749px) {
    .ai-variant-options-{{ ai_gen_id }} {
      gap: 6px;
    }
    
    .ai-variant-option-{{ ai_gen_id }} {
      padding: 6px 12px;
      font-size: {{ block.settings.variant_text_size | times: 0.9 }}px;
    }
  }
{% endstyle %}

<product-variants-{{ ai_gen_id }}
  class="ai-product-variants-{{ ai_gen_id }}"
  data-product-id="{{ product.id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-product-image-container-{{ ai_gen_id }}">
    {% if product.featured_image %}
      <img
        src="{{ product.featured_image | image_url: width: 800 }}"
        alt="{{ product.featured_image.alt | escape }}"
        class="ai-product-image-{{ ai_gen_id }}"
        id="ai-product-image-{{ ai_gen_id }}"
        loading="lazy"
        width="{{ product.featured_image.width }}"
        height="{{ product.featured_image.height }}"
      >
    {% else %}
      <div class="ai-product-image-placeholder-{{ ai_gen_id }}">
        {{ 'product-1' | placeholder_svg_tag }}
      </div>
    {% endif %}

    {% if block.settings.text_1_style == 'curved' %}
      <div class="ai-text-overlay-{{ ai_gen_id }} ai-text-overlay-1-{{ ai_gen_id }} curved">
        <svg width="200" height="100" viewBox="0 0 200 100">
          <defs>
            <path id="curve1-{{ ai_gen_id }}" d="M 20,50 Q 100,{{ 50 | minus: block.settings.text_1_curve }} 180,50" />
          </defs>
          <text class="ai-curved-text-{{ ai_gen_id }}" font-size="{{ block.settings.text_1_size }}">
            <textPath href="#curve1-{{ ai_gen_id }}" id="ai-text-path-1-{{ ai_gen_id }}">
              {{ block.settings.text_1_default }}
            </textPath>
          </text>
        </svg>
      </div>
    {% else %}
      <div 
        class="ai-text-overlay-{{ ai_gen_id }} ai-text-overlay-1-{{ ai_gen_id }} {% if block.settings.text_1_style == 'bent' %}bent{% endif %}"
        id="ai-text-overlay-1-{{ ai_gen_id }}"
      >
        {{ block.settings.text_1_default }}
      </div>
    {% endif %}

    {% if block.settings.text_2_style == 'curved' %}
      <div class="ai-text-overlay-{{ ai_gen_id }} ai-text-overlay-2-{{ ai_gen_id }} curved">
        <svg width="200" height="100" viewBox="0 0 200 100">
          <defs>
            <path id="curve2-{{ ai_gen_id }}" d="M 20,50 Q 100,{{ 50 | minus: block.settings.text_2_curve }} 180,50" />
          </defs>
          <text class="ai-curved-text-{{ ai_gen_id }}" font-size="{{ block.settings.text_2_size }}">
            <textPath href="#curve2-{{ ai_gen_id }}" id="ai-text-path-2-{{ ai_gen_id }}">
              {{ block.settings.text_2_default }}
            </textPath>
          </text>
        </svg>
      </div>
    {% else %}
      <div 
        class="ai-text-overlay-{{ ai_gen_id }} ai-text-overlay-2-{{ ai_gen_id }} {% if block.settings.text_2_style == 'bent' %}bent{% endif %}"
        id="ai-text-overlay-2-{{ ai_gen_id }}"
      >
        {{ block.settings.text_2_default }}
      </div>
    {% endif %}
  </div>

  {% if block.settings.show_text_inputs %}
    <div class="ai-text-input-container-{{ ai_gen_id }}">
      <label for="ai-text-input-1-{{ ai_gen_id }}" class="ai-text-input-label-{{ ai_gen_id }}">
        {{ block.settings.text_1_label }}
      </label>
      <input
        type="text"
        id="ai-text-input-1-{{ ai_gen_id }}"
        class="ai-text-input-{{ ai_gen_id }}"
        placeholder="{{ block.settings.text_1_placeholder }}"
        maxlength="50"
      >
      
      <label for="ai-text-input-2-{{ ai_gen_id }}" class="ai-text-input-label-{{ ai_gen_id }}">
        {{ block.settings.text_2_label }}
      </label>
      <input
        type="text"
        id="ai-text-input-2-{{ ai_gen_id }}"
        class="ai-text-input-{{ ai_gen_id }}"
        placeholder="{{ block.settings.text_2_placeholder }}"
        maxlength="50"
      >
    </div>
  {% endif %}

  {% if product.title %}
    <h2 class="ai-product-title-{{ ai_gen_id }}">{{ product.title }}</h2>
  {% endif %}

  <div class="ai-product-price-{{ ai_gen_id }}" id="ai-product-price-{{ ai_gen_id }}">
    <span class="price">{{ product.price | money }}</span>
    {% if product.compare_at_price > product.price %}
      <span class="compare-price" style="text-decoration: line-through; opacity: 0.7; margin-left: 8px;">
        {{ product.compare_at_price | money }}
      </span>
    {% endif %}
  </div>

  {% if product.has_only_default_variant == false %}
    {% for option in product.options_with_values %}
      <div class="ai-variant-group-{{ ai_gen_id }}">
        <span class="ai-variant-label-{{ ai_gen_id }}">{{ option.name }}:</span>
        <div class="ai-variant-options-{{ ai_gen_id }}">
          {% for value in option.values %}
            <button
              type="button"
              class="ai-variant-option-{{ ai_gen_id }}"
              data-option-position="{{ option.position }}"
              data-option-value="{{ value | escape }}"
              {% if forloop.first %}data-selected="true"{% endif %}
            >
              {{ value }}
            </button>
          {% endfor %}
        </div>
      </div>
    {% endfor %}
  {% endif %}
</product-variants-{{ ai_gen_id }}>

<script>
  (function() {
    class ProductVariants{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.productData = null;
        this.selectedOptions = {};
        this.currentVariant = null;
      }

      connectedCallback() {
        this.loadProductData();
        this.setupEventListeners();
        this.initializeSelectedOptions();
      }

      async loadProductData() {
        const productId = this.dataset.productId;
        if (!productId) return;

        try {
          const response = await fetch(`/products/${productId}.js`);
          this.productData = await response.json();
          this.updateCurrentVariant();
        } catch (error) {
          console.error('Error loading product data:', error);
        }
      }

      setupEventListeners() {
        const variantOptions = this.querySelectorAll('.ai-variant-option-{{ ai_gen_id }}');
        variantOptions.forEach(option => {
          option.addEventListener('click', this.handleOptionClick.bind(this));
        });

        const textInputs = this.querySelectorAll('.ai-text-input-{{ ai_gen_id }}');
        textInputs.forEach((input, index) => {
          input.addEventListener('input', (e) => this.updateTextOverlay(index + 1, e.target.value));
        });
      }

      initializeSelectedOptions() {
        const variantGroups = this.querySelectorAll('.ai-variant-group-{{ ai_gen_id }}');
        variantGroups.forEach(group => {
          const selectedOption = group.querySelector('.ai-variant-option-{{ ai_gen_id }}[data-selected="true"]');
          if (selectedOption) {
            const position = selectedOption.dataset.optionPosition;
            const value = selectedOption.dataset.optionValue;
            this.selectedOptions[position] = value;
            selectedOption.classList.add('selected');
          }
        });
        this.updateCurrentVariant();
      }

      handleOptionClick(event) {
        const clickedOption = event.target;
        const position = clickedOption.dataset.optionPosition;
        const value = clickedOption.dataset.optionValue;

        const group = clickedOption.closest('.ai-variant-group-{{ ai_gen_id }}');
        const allOptionsInGroup = group.querySelectorAll('.ai-variant-option-{{ ai_gen_id }}');
        
        allOptionsInGroup.forEach(option => {
          option.classList.remove('selected');
          option.removeAttribute('data-selected');
        });

        clickedOption.classList.add('selected');
        clickedOption.setAttribute('data-selected', 'true');

        this.selectedOptions[position] = value;
        this.updateCurrentVariant();
        this.updateProductImage();
      }

      updateCurrentVariant() {
        if (!this.productData || !this.productData.variants) return;

        const selectedValues = Object.values(this.selectedOptions);
        
        this.currentVariant = this.productData.variants.find(variant => {
          return variant.options.every((option, index) => {
            return option === selectedValues[index];
          });
        });

        if (this.currentVariant) {
          this.updatePrice();
          this.updateAvailability();
        }
      }

      updatePrice() {
        if (!this.currentVariant) return;

        const priceElement = this.querySelector('#ai-product-price-{{ ai_gen_id }} .price');
        const compareElement = this.querySelector('#ai-product-price-{{ ai_gen_id }} .compare-price');
        
        if (priceElement) {
          const price = new Intl.NumberFormat('en-IN', {
            style: 'currency',
            currency: 'INR'
          }).format(this.currentVariant.price / 100);
          priceElement.textContent = price;
        }

        if (compareElement && this.currentVariant.compare_at_price > this.currentVariant.price) {
          const comparePrice = new Intl.NumberFormat('en-IN', {
            style: 'currency',
            currency: 'INR'
          }).format(this.currentVariant.compare_at_price / 100);
          compareElement.textContent = comparePrice;
          compareElement.style.display = 'inline';
        } else if (compareElement) {
          compareElement.style.display = 'none';
        }
      }

      updateAvailability() {
        if (!this.currentVariant) return;

        const allOptions = this.querySelectorAll('.ai-variant-option-{{ ai_gen_id }}');
        allOptions.forEach(option => {
          option.classList.remove('unavailable');
        });

        if (!this.currentVariant.available) {
          const selectedOptions = this.querySelectorAll('.ai-variant-option-{{ ai_gen_id }}.selected');
          selectedOptions.forEach(option => {
            option.classList.add('unavailable');
          });
        }
      }

      updateProductImage() {
        if (!this.currentVariant || !this.currentVariant.featured_image) return;

        const imageElement = this.querySelector('#ai-product-image-{{ ai_gen_id }}');
        if (imageElement) {
          const newSrc = this.currentVariant.featured_image.src.replace(/\.(jpg|jpeg|png|gif|webp)/, '_800x.$1');
          imageElement.src = newSrc;
          imageElement.alt = this.currentVariant.featured_image.alt || '';
        }
      }

      updateTextOverlay(overlayNumber, text) {
        const style = overlayNumber === 1 ? '{{ block.settings.text_1_style }}' : '{{ block.settings.text_2_style }}';
        
        if (style === 'curved') {
          const textPath = this.querySelector(`#ai-text-path-${overlayNumber}-{{ ai_gen_id }}`);
          if (textPath) {
            textPath.textContent = text || (overlayNumber === 1 ? '{{ block.settings.text_1_default }}' : '{{ block.settings.text_2_default }}');
          }
        } else {
          const overlay = this.querySelector(`#ai-text-overlay-${overlayNumber}-{{ ai_gen_id }}`);
          if (overlay) {
            overlay.textContent = text || (overlayNumber === 1 ? '{{ block.settings.text_1_default }}' : '{{ block.settings.text_2_default }}');
          }
        }
      }
    }

    customElements.define('product-variants-{{ ai_gen_id }}', ProductVariants{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Product variants",
  "settings": [
    {
      "type": "header",
      "content": "Product display"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Border radius",
      "default": 8
    },
    {
      "type": "range",
      "id": "image_border_radius",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Image border radius",
      "default": 8
    },
    {
      "type": "header",
      "content": "Text overlay 1"
    },
    {
      "type": "checkbox",
      "id": "show_text_inputs",
      "label": "Show text input fields",
      "default": true
    },
    {
      "type": "text",
      "id": "text_1_label",
      "label": "Input label",
      "default": "Custom text 1"
    },
    {
      "type": "text",
      "id": "text_1_placeholder",
      "label": "Input placeholder",
      "default": "Enter your text"
    },
    {
      "type": "text",
      "id": "text_1_default",
      "label": "Default text",
      "default": "Your Text"
    },
    {
      "type": "select",
      "id": "text_1_style",
      "label": "Text style",
      "options": [
        {
          "value": "normal",
          "label": "Normal"
        },
        {
          "value": "curved",
          "label": "Curved"
        },
        {
          "value": "bent",
          "label": "Bent"
        }
      ],
      "default": "normal"
    },
    {
      "type": "font_picker",
      "id": "text_1_font",
      "label": "Font",
      "default": "helvetica_n4"
    },
    {
      "type": "range",
      "id": "text_1_size",
      "min": 10,
      "max": 100,
      "step": 2,
      "unit": "px",
      "label": "Font size",
      "default": 24
    },
    {
      "type": "color",
      "id": "text_1_color",
      "label": "Text color",
      "default": "#000000"
    },
    {
      "type": "range",
      "id": "text_1_x",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "%",
      "label": "Horizontal position",
      "default": 50
    },
    {
      "type": "range",
      "id": "text_1_y",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "%",
      "label": "Vertical position",
      "default": 20
    },
    {
      "type": "range",
      "id": "text_1_rotation",
      "min": -180,
      "max": 180,
      "step": 5,
      "unit": "deg",
      "label": "Rotation",
      "default": 0
    },
    {
      "type": "range",
      "id": "text_1_curve",
      "min": -50,
      "max": 50,
      "step": 5,
      "unit": "px",
      "label": "Curve amount",
      "default": 20
    },
    {
      "type": "range",
      "id": "text_1_bend",
      "min": -45,
      "max": 45,
      "step": 5,
      "unit": "deg",
      "label": "Bend angle",
      "default": 0
    },
    {
      "type": "range",
      "id": "text_1_shadow_x",
      "min": -10,
      "max": 10,
      "step": 1,
      "unit": "px",
      "label": "Shadow X offset",
      "default": 1
    },
    {
      "type": "range",
      "id": "text_1_shadow_y",
      "min": -10,
      "max": 10,
      "step": 1,
      "unit": "px",
      "label": "Shadow Y offset",
      "default": 1
    },
    {
      "type": "range",
      "id": "text_1_shadow_blur",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Shadow blur",
      "default": 2
    },
    {
      "type": "color",
      "id": "text_1_shadow_color",
      "label": "Shadow color",
      "default": "#00000050"
    },
    {
      "type": "header",
      "content": "Text overlay 2"
    },
    {
      "type": "text",
      "id": "text_2_label",
      "label": "Input label",
      "default": "Custom text 2"
    },
    {
      "type": "text",
      "id": "text_2_placeholder",
      "label": "Input placeholder",
      "default": "Enter your text"
    },
    {
      "type": "text",
      "id": "text_2_default",
      "label": "Default text",
      "default": "Your Name"
    },
    {
      "type": "select",
      "id": "text_2_style",
      "label": "Text style",
      "options": [
        {
          "value": "normal",
          "label": "Normal"
        },
        {
          "value": "curved",
          "label": "Curved"
        },
        {
          "value": "bent",
          "label": "Bent"
        }
      ],
      "default": "normal"
    },
    {
      "type": "font_picker",
      "id": "text_2_font",
      "label": "Font",
      "default": "helvetica_n4"
    },
    {
      "type": "range",
      "id": "text_2_size",
      "min": 10,
      "max": 100,
      "step": 2,
      "unit": "px",
      "label": "Font size",
      "default": 20
    },
    {
      "type": "color",
      "id": "text_2_color",
      "label": "Text color",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "text_2_x",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "%",
      "label": "Horizontal position",
      "default": 50
    },
    {
      "type": "range",
      "id": "text_2_y",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "%",
      "label": "Vertical position",
      "default": 80
    },
    {
      "type": "range",
      "id": "text_2_rotation",
      "min": -180,
      "max": 180,
      "step": 5,
      "unit": "deg",
      "label": "Rotation",
      "default": 0
    },
    {
      "type": "range",
      "id": "text_2_curve",
      "min": -50,
      "max": 50,
      "step": 5,
      "unit": "px",
      "label": "Curve amount",
      "default": -20
    },
    {
      "type": "range",
      "id": "text_2_bend",
      "min": -45,
      "max": 45,
      "step": 5,
      "unit": "deg",
      "label": "Bend angle",
      "default": 0
    },
    {
      "type": "range",
      "id": "text_2_shadow_x",
      "min": -10,
      "max": 10,
      "step": 1,
      "unit": "px",
      "label": "Shadow X offset",
      "default": 1
    },
    {
      "type": "range",
      "id": "text_2_shadow_y",
      "min": -10,
      "max": 10,
      "step": 1,
      "unit": "px",
      "label": "Shadow Y offset",
      "default": 1
    },
    {
      "type": "range",
      "id": "text_2_shadow_blur",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Shadow blur",
      "default": 2
    },
    {
      "type": "color",
      "id": "text_2_shadow_color",
      "label": "Shadow color",
      "default": "#00000050"
    },
    {
      "type": "header",
      "content": "Product title"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 14,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Title size",
      "default": 24
    },
    {
      "type": "color",
      "id": "title_color",
      "label": "Title color",
      "default": "#000000"
    },
    {
      "type": "header",
      "content": "Product price"
    },
    {
      "type": "range",
      "id": "price_size",
      "min": 12,
      "max": 32,
      "step": 2,
      "unit": "px",
      "label": "Price size",
      "default": 20
    },
    {
      "type": "color",
      "id": "price_color",
      "label": "Price color",
      "default": "#000000"
    },
    {
      "type": "header",
      "content": "Variant options"
    },
    {
      "type": "range",
      "id": "variant_label_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Label size",
      "default": 16
    },
    {
      "type": "color",
      "id": "variant_label_color",
      "label": "Label color",
      "default": "#000000"
    },
    {
      "type": "range",
      "id": "variant_text_size",
      "min": 10,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Option text size",
      "default": 14
    },
    {
      "type": "color",
      "id": "variant_bg_color",
      "label": "Option background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "variant_text_color",
      "label": "Option text color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "variant_border_color",
      "label": "Option border color",
      "default": "#cccccc"
    },
    {
      "type": "color",
      "id": "variant_hover_bg_color",
      "label": "Hover background",
      "default": "#f5f5f5"
    },
    {
      "type": "color",
      "id": "variant_hover_border_color",
      "label": "Hover border color",
      "default": "#999999"
    },
    {
      "type": "color",
      "id": "variant_selected_bg_color",
      "label": "Selected background",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "variant_selected_text_color",
      "label": "Selected text color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "variant_selected_border_color",
      "label": "Selected border color",
      "default": "#000000"
    },
    {
      "type": "range",
      "id": "variant_border_radius",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Option border radius",
      "default": 4
    }
  ],
  "presets": [
    {
      "name": "Product variants"
    }
  ]
}
{% endschema %}