{% doc %}
  @prompt
    a block to show featured product with product thumbnails on left with a 3d view button in the thumbnail row main image in the middle and product info like size material title samll description and cutomize now button when 3d view button clicked instead of showing image in the main image are the main image area should have a canvas showing a 1mm metal poster having metalic feature and rotatble and tiltable with drag or touch (for a selected product), add a 3d button in the thumbnail row which will show a 3d 1 mm poster in the canvas in the main image area having rotate and tilt feature when draged/touched or hover, no auto animation in the 3d poster the 3d poster should fetch the last image of the product as poster front, 3d poster aspect ratio should match the last image aspect ratio, why extra edge is showing above and one beside the main last image, still extra poster is showing beyond the graphics

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-featured-product-{{ ai_gen_id }} {
    display: grid;
    grid-template-columns: 120px 1fr 300px;
    gap: 20px;
    max-width: 100%;
    background-color: {{ block.settings.background_color }};
    padding: 20px;
    border-radius: {{ block.settings.border_radius }}px;
  }

  .ai-thumbnails-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  .ai-thumbnail-{{ ai_gen_id }} {
    width: 100px;
    height: 100px;
    border: 2px solid transparent;
    border-radius: 8px;
    overflow: hidden;
    cursor: pointer;
    transition: border-color 0.3s ease;
    position: relative;
  }

  .ai-thumbnail-{{ ai_gen_id }}.active {
    border-color: {{ block.settings.accent_color }};
  }

  .ai-thumbnail-{{ ai_gen_id }} img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .ai-thumbnail-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .ai-thumbnail-placeholder-{{ ai_gen_id }} svg {
    width: 60%;
    height: 60%;
    opacity: 0.5;
  }

  .ai-3d-button-{{ ai_gen_id }} {
    width: 100px;
    height: 100px;
    background: linear-gradient(135deg, {{ block.settings.accent_color }}, {{ block.settings.accent_hover_color }});
    color: white;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 5px;
    font-size: 12px;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  }

  .ai-3d-button-{{ ai_gen_id }}:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 16px rgba(0,0,0,0.2);
  }

  .ai-3d-button-{{ ai_gen_id }}.active {
    background: linear-gradient(135deg, {{ block.settings.accent_hover_color }}, {{ block.settings.accent_color }});
    transform: translateY(-2px);}

  .ai-3d-icon-{{ ai_gen_id }} {
    width: 24px;
    height: 24px;
  }

  .ai-main-image-{{ ai_gen_id }} {
    position: relative;
    aspect-ratio: 1;
    border-radius: 12px;
    overflow: hidden;
    background: #f5f5f5;
  }

  .ai-main-image-{{ ai_gen_id }} img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .ai-main-image-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  .ai-main-image-placeholder-{{ ai_gen_id }} svg {
    width: 50%;
    height: 50%;
    opacity: 0.3;
  }

  .ai-canvas-container-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, #2c3e50, #34495e);
    display: none;
    position: relative;
    cursor: grab;
    perspective: 1000px;
    overflow: hidden;
  }

  .ai-canvas-container-{{ ai_gen_id }}.active {
    display: block;
  }

  .ai-canvas-container-{{ ai_gen_id }}:active {
    cursor: grabbing;
  }

  .ai-metal-poster-{{ ai_gen_id }} {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) rotateX(0deg) rotateY(0deg);
    background: linear-gradient(45deg, #c0c0c0, #e8e8e8, #c0c0c0);
    border-radius: 2px;
    box-shadow: 0 8px 25px rgba(0,0,0,0.3);
    transition: transform 0.1s ease;
    transform-style: preserve-3d;
    overflow: hidden;
    border: 1px solid #b0b0b0;
  }

  .ai-metal-surface-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    background: 
      radial-gradient(circle at 30% 30%, rgba(255,255,255,0.2) 1px, transparent 1px),
      radial-gradient(circle at 70% 70%, rgba(0,0,0,0.05) 1px, transparent 1px),
      linear-gradient(45deg, #e8e8e8, #d0d0d0, #e8e8e8);
    background-size: 15px 15px, 12px 12px, 100% 100%;
    border-radius: 1px;
    position: relative;
    overflow: hidden;
    padding: 1px;
    box-sizing: border-box;
  }

  .ai-poster-image-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 1px;
    display: block;
  }

  .ai-metal-surface-{{ ai_gen_id }}::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: 
      linear-gradient(135deg, transparent 30%, rgba(255,255,255,0.1) 50%, transparent 70%),
      linear-gradient(45deg, rgba(0,0,0,0.03) 25%, transparent 25%, transparent 75%, rgba(0,0,0,0.03) 75%);
    background-size: 100% 100%, 8px 8px;
    pointer-events: none;
    z-index: 1;
  }

  .ai-product-info-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    gap: 15px;
  }

  .ai-product-title-{{ ai_gen_id }} {
    font-size: {{ block.settings.title_size }}px;
    font-weight: 600;
    color: {{ block.settings.text_color }};
    margin: 0;
  }

  .ai-product-description-{{ ai_gen_id }} {
    font-size: {{ block.settings.text_size }}px;
    color: {{ block.settings.text_color }};
    line-height: 1.5;
  }

  .ai-product-details-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .ai-detail-item-{{ ai_gen_id }} {
    display: flex;
    justify-content: space-between;
    font-size: {{ block.settings.text_size }}px;
    color: {{ block.settings.text_color }};
  }

  .ai-detail-label-{{ ai_gen_id }} {
    font-weight: 600;
  }

  .ai-customize-button-{{ ai_gen_id }} {
    background-color: {{ block.settings.button_color }};
    color: {{ block.settings.button_text_color }};
    border: none;
    padding: 15px 25px;
    border-radius: {{ block.settings.button_radius }}px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.3s ease;
    text-decoration: none;
    text-align: center;
  }

  .ai-customize-button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.button_hover_color }};
  }

  .ai-back-button-{{ ai_gen_id }} {
    position: absolute;
    top: 15px;
    left: 15px;
    background: rgba(0,0,0,0.8);
    color: white;
    border: none;
    border-radius: 20px;
    padding: 8px 16px;
    font-size: 12px;
    cursor: pointer;
    display: none;
    z-index: 10;
    transition: background-color 0.3s ease;
  }

  .ai-back-button-{{ ai_gen_id }}:hover {
    background: rgba(0,0,0,0.9);
  }

  .ai-canvas-container-{{ ai_gen_id }}.active .ai-back-button-{{ ai_gen_id }} {
    display: block;
  }

  .ai-3d-instructions-{{ ai_gen_id }} {
    position: absolute;
    bottom: 15px;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(0,0,0,0.8);
    color: white;
    padding: 8px 16px;
    border-radius: 20px;
    font-size: 12px;
    display: none;
    z-index: 10;
  }

  .ai-canvas-container-{{ ai_gen_id }}.active .ai-3d-instructions-{{ ai_gen_id }} {
    display: block;
  }

  @media screen and (max-width: 768px) {
    .ai-featured-product-{{ ai_gen_id }} {
      grid-template-columns: 1fr;
      gap: 15px;
    }

    .ai-thumbnails-{{ ai_gen_id }} {
      flex-direction: row;
      overflow-x: auto;
      padding-bottom: 5px;
    }

    .ai-thumbnail-{{ ai_gen_id }}, .ai-3d-button-{{ ai_gen_id }} {
      flex-shrink: 0;
    }

    .ai-metal-poster-{{ ai_gen_id }} {
      max-width: 90%;
      max-height: 90%;
    }
  }
{% endstyle %}<featured-product-3d-{{ ai_gen_id }}
  class="ai-featured-product-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-thumbnails-{{ ai_gen_id }}">
    {% if block.settings.product %}
      {% for image in block.settings.product.images limit: 4 %}
        <div class="ai-thumbnail-{{ ai_gen_id }} {% if forloop.first %}active{% endif %}" data-image-index="{{ forloop.index0 }}">
          <img src="{{ image | image_url: width: 200}}" alt="{{ image.alt | escape }}" loading="lazy">
        </div>
      {% endfor %}
    {% else %}
      <div class="ai-thumbnail-{{ ai_gen_id }} active">
        <div class="ai-thumbnail-placeholder-{{ ai_gen_id }}">
          {{ 'product-1' | placeholder_svg_tag }}
        </div>
      </div>
    {% endif %}<button class="ai-3d-button-{{ ai_gen_id }}" data-3d-toggle>
      <svg class="ai-3d-icon-{{ ai_gen_id }}" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="M12 2L2 7l10 5 10-5-10-5z"/>
        <path d="M2 17l10 5 10-5"/>
        <path d="M2 12l10 5 10-5"/>
      </svg>
      3D View
    </button>
  </div>

  <div class="ai-main-image-{{ ai_gen_id }}">
    {% if block.settings.product and block.settings.product.featured_image %}
      <img 
        src="{{ block.settings.product.featured_image | image_url: width: 800 }}" 
        alt="{{ block.settings.product.featured_image.alt | escape }}"
        class="ai-main-product-image-{{ ai_gen_id }}"
        loading="lazy"
      >
    {% else %}
      <div class="ai-main-image-placeholder-{{ ai_gen_id }}">
        {{ 'product-1' | placeholder_svg_tag }}
      </div>
    {% endif %}

    <div class="ai-canvas-container-{{ ai_gen_id }}" data-canvas-container>
      <button class="ai-back-button-{{ ai_gen_id }}" data-back-button>← Back to Images</button>
      <div class="ai-3d-instructions-{{ ai_gen_id }}">Drag to rotate • Scroll to zoom</div>
      <div class="ai-metal-poster-{{ ai_gen_id }}" data-metal-poster>
        <div class="ai-metal-surface-{{ ai_gen_id }}">
          {% if block.settings.product and block.settings.product.images.size > 0 %}
            {% assign last_image = block.settings.product.images.last %}
            <img 
              src="{{ last_image | image_url: width: 600 }}" 
              alt="{{ last_image.alt | escape }}"
              class="ai-poster-image-{{ ai_gen_id }}"
              loading="lazy"
              data-poster-width="{{ last_image.width }}"
              data-poster-height="{{ last_image.height }}"
            >
          {% else %}
            <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); color: rgba(255,255,255,0.7); font-size: 12px; text-align: center;">
              No poster image available
            </div>
          {% endif %}
        </div>
      </div>
    </div>
  </div>

  <div class="ai-product-info-{{ ai_gen_id }}">
    {% if block.settings.product %}
      <h2 class="ai-product-title-{{ ai_gen_id }}">{{ block.settings.product.title }}</h2>
      
      {% if block.settings.product.description != blank %}
        <div class="ai-product-description-{{ ai_gen_id }}">
          {{ block.settings.product.description | truncate: 150 }}
        </div>
      {% endif %}

      <div class="ai-product-details-{{ ai_gen_id }}">
        {% if block.settings.size_info != blank %}
          <div class="ai-detail-item-{{ ai_gen_id }}">
            <span class="ai-detail-label-{{ ai_gen_id }}">Size:</span>
            <span>{{ block.settings.size_info }}</span>
          </div>
        {% endif %}
        
        {% if block.settings.material_info != blank %}
          <div class="ai-detail-item-{{ ai_gen_id }}">
            <span class="ai-detail-label-{{ ai_gen_id }}">Material:</span>
            <span>{{ block.settings.material_info }}</span>
          </div>
        {% endif %}

        {% if block.settings.thickness_info != blank %}
          <div class="ai-detail-item-{{ ai_gen_id }}">
            <span class="ai-detail-label-{{ ai_gen_id }}">Thickness:</span>
            <span>{{ block.settings.thickness_info }}</span>
          </div>
        {% endif %}
      </div>

      <a href="{{ block.settings.customize_link | default: block.settings.product.url }}" class="ai-customize-button-{{ ai_gen_id }}">
        {{ block.settings.button_text }}
      </a>
    {% else %}
      <h2 class="ai-product-title-{{ ai_gen_id }}">Select a product</h2>
      <div class="ai-product-description-{{ ai_gen_id }}">Choose a product to display its details and 3D preview.</div>
    {% endif %}
  </div>
</featured-product-3d-{{ ai_gen_id }}>

<script>
(function() {
  class FeaturedProduct3D{{ ai_gen_id }} extends HTMLElement {
    constructor() {
      super();
      this.isDragging = false;
      this.startX = 0;
      this.startY = 0;
      this.rotationX = -10;
      this.rotationY = 15;
      this.scale = 1;
    }

    connectedCallback() {
      this.setupEventListeners();
      this.updatePosterAspectRatio();
    }

    setupEventListeners() {
      const thumbnails = this.querySelectorAll('.ai-thumbnail-{{ ai_gen_id }}');
      const mainImage = this.querySelector('.ai-main-product-image-{{ ai_gen_id }}');
      const canvasContainer = this.querySelector('[data-canvas-container]');
      const metalPoster = this.querySelector('[data-metal-poster]');
      const backButton = this.querySelector('[data-back-button]');
      const toggle3DButton = this.querySelector('[data-3d-toggle]');

      thumbnails.forEach(thumbnail => {
        thumbnail.addEventListener('click', () => {
          thumbnails.forEach(t => t.classList.remove('active'));
          thumbnail.classList.add('active');
          const imageIndex = thumbnail.dataset.imageIndex;
          const img = thumbnail.querySelector('img');
          if (img && mainImage) {
            mainImage.src = img.src.replace('width=200', 'width=800');
            mainImage.alt = img.alt;
          }
          this.hide3DView();
        });
      });

      if (toggle3DButton) {
        toggle3DButton.addEventListener('click', () => {
          this.toggle3DView();
        });
      }

      if (backButton) {
        backButton.addEventListener('click', () => {
          this.hide3DView();
        });
      }

      if (metalPoster) {
        this.setup3DInteraction(metalPoster, canvasContainer);
      }
    }

    updatePosterAspectRatio() {
      const posterImage = this.querySelector('.ai-poster-image-{{ ai_gen_id }}');
      const metalPoster = this.querySelector('[data-metal-poster]');
      const canvasContainer = this.querySelector('[data-canvas-container]');
      
      if (posterImage && metalPoster && canvasContainer) {
        const width = posterImage.dataset.posterWidth;
        const height = posterImage.dataset.posterHeight;
        
        if (width && height) {
          const aspectRatio = parseFloat(width) / parseFloat(height);
          const containerRect = canvasContainer.getBoundingClientRect();
          const maxSize = Math.min(containerRect.width, containerRect.height) * 0.8;
          
          let posterWidth, posterHeight;
          
          if (aspectRatio > 1) {
            posterWidth = maxSize;
            posterHeight = maxSize / aspectRatio;
          } else {
            posterHeight = maxSize;
            posterWidth = maxSize * aspectRatio;
          }
          
          metalPoster.style.width = posterWidth + 'px';
          metalPoster.style.height = posterHeight + 'px';
        } else {
          const maxSize = Math.min(canvasContainer.clientWidth, canvasContainer.clientHeight) * 0.8;
          metalPoster.style.width = maxSize + 'px';
          metalPoster.style.height = maxSize + 'px';
        }
      }
    }

    toggle3DView() {
      const canvasContainer = this.querySelector('[data-canvas-container]');
      if (canvasContainer.classList.contains('active')) {
        this.hide3DView();
      } else {
        this.show3DView();
      }
    }

    show3DView() {
      const canvasContainer = this.querySelector('[data-canvas-container]');
      const mainImage = this.querySelector('.ai-main-product-image-{{ ai_gen_id }}');
      const toggle3DButton = this.querySelector('[data-3d-toggle]');
      const thumbnails = this.querySelectorAll('.ai-thumbnail-{{ ai_gen_id }}');
      
      if (canvasContainer) {
        canvasContainer.classList.add('active');
      }
      if (mainImage) {
        mainImage.style.display = 'none';
      }
      if (toggle3DButton) {
        toggle3DButton.classList.add('active');
      }
      
      thumbnails.forEach(t => t.classList.remove('active'));
      
      setTimeout(() => {
        this.updatePosterAspectRatio();
      }, 50);
    }

    hide3DView() {
      const canvasContainer = this.querySelector('[data-canvas-container]');
      const mainImage = this.querySelector('.ai-main-product-image-{{ ai_gen_id }}');
      const toggle3DButton = this.querySelector('[data-3d-toggle]');
      
      if (canvasContainer) {
        canvasContainer.classList.remove('active');
      }
      if (mainImage) {
        mainImage.style.display = 'block';
      }
      if (toggle3DButton) {
        toggle3DButton.classList.remove('active');
      }
    }

    setup3DInteraction(poster, container) {
      const handleStart = (clientX, clientY) => {
        this.isDragging = true;
        this.startX = clientX;
        this.startY = clientY;
        container.style.cursor = 'grabbing';
      };

      const handleMove = (clientX, clientY) => {
        if (!this.isDragging) return;

        const deltaX = clientX - this.startX;
        const deltaY = clientY - this.startY;

        this.rotationY += deltaX * 0.8;
        this.rotationX -= deltaY * 0.8;

        this.rotationX = Math.max(-60, Math.min(60, this.rotationX));

        this.updatePosterTransform(poster);

        this.startX = clientX;
        this.startY = clientY;
      };

      const handleEnd = () => {
        this.isDragging = false;
        container.style.cursor = 'grab';
      };

      poster.addEventListener('mousedown', (e) => {
        e.preventDefault();
        handleStart(e.clientX, e.clientY);
      });

      document.addEventListener('mousemove', (e) => {
        handleMove(e.clientX, e.clientY);
      });

      document.addEventListener('mouseup', handleEnd);

      poster.addEventListener('touchstart', (e) => {
        e.preventDefault();
        const touch = e.touches[0];
        handleStart(touch.clientX, touch.clientY);
      });

      poster.addEventListener('touchmove', (e) => {
        e.preventDefault();
        const touch = e.touches[0];
        handleMove(touch.clientX, touch.clientY);
      });

      poster.addEventListener('touchend', handleEnd);

      container.addEventListener('wheel', (e) => {
        e.preventDefault();
        const delta = e.deltaY > 0 ? -0.1 : 0.1;
        this.scale = Math.max(0.5, Math.min(2, this.scale + delta));
        this.updatePosterTransform(poster);
      });

      window.addEventListener('resize', () => {
        this.updatePosterAspectRatio();
      });
    }

    updatePosterTransform(poster) {
      poster.style.transform = `translate(-50%, -50%) scale(${this.scale}) rotateX(${this.rotationX}deg) rotateY(${this.rotationY}deg)`;
    }
  }

  customElements.define('featured-product-3d-{{ ai_gen_id }}', FeaturedProduct3D{{ ai_gen_id }});
})();
</script>

{% schema %}
{
  "name": "Featured product 3D",
  "settings": [
    {
      "type": "header",
      "content": "Product"
    },
    {
      "type": "product",
      "id": "product",
      "label": "Product"
    },
    {
      "type": "text",
      "id": "size_info",
      "label": "Size information",
      "default": "Custom sizes available"
    },
    {
      "type": "text",
      "id": "material_info",
      "label": "Material information",
      "default": "Premium metal"
    },
    {
      "type": "text",
      "id": "thickness_info",
      "label": "Thickness information",
      "default": "1mm"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Button text",
      "default": "Customize now"
    },
    {
      "type": "url",
      "id": "customize_link",
      "label": "Customize link"
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "accent_color",
      "label": "Accent color",
      "default": "#0066cc"
    },
    {
      "type": "color",
      "id": "accent_hover_color",
      "label": "Accent hover color",
      "default": "#004499"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Button color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button text color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "button_hover_color",
      "label": "Button hover color",
      "default": "#333333"
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 16,
      "max": 32,
      "step": 2,
      "unit": "px",
      "label": "Title size",
      "default": 24
    },
    {
      "type": "range",
      "id": "text_size",
      "min": 12,
      "max": 18,
      "step": 1,
      "unit": "px",
      "label": "Text size",
      "default": 14
    },
    {
      "type": "header",
      "content": "Style"
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 8
    },
    {
      "type": "range",
      "id": "button_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Button radius",
      "default": 6
    }
  ],
  "presets": [
    {
      "name": "Featured product 3D"
    }
  ]
}
{% endschema %}