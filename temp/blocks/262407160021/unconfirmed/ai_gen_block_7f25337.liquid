{% doc %}
  @prompt
    generate a 3d poster product section best according to you where the poster front will be the product last image and poster back will be a static image and the poster should be rortatable using drag and touch

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-poster-3d-container-{{ ai_gen_id }} {
    padding: {{ block.settings.section_padding }}px 0;
    background-color: {{ block.settings.background_color }};
    overflow: hidden;
  }

  .ai-poster-3d-wrapper-{{ ai_gen_id }} {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 60px;
    align-items: center;
  }

  .ai-poster-3d-viewer-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    height: 500px;
    perspective: 1000px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: {{ block.settings.viewer_background }};
    border-radius: {{ block.settings.border_radius }}px;
  }

  .ai-poster-3d-scene-{{ ai_gen_id }} {
    position: relative;
    width: 300px;
    height: 400px;
    transform-style: preserve-3d;
    transition: transform 0.1s ease-out;
    cursor: grab;
  }

  .ai-poster-3d-scene-{{ ai_gen_id }}:active {
    cursor: grabbing;
  }

  .ai-poster-3d-face-{{ ai_gen_id }} {
    position: absolute;
    width: 100%;
    height: 100%;
    backface-visibility: hidden;
    border-radius: 8px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    overflow: hidden;
  }

  .ai-poster-3d-front-{{ ai_gen_id }} {
    transform: translateZ(2px);
  }

  .ai-poster-3d-back-{{ ai_gen_id }} {
    transform: rotateY(180deg) translateZ(2px);
  }

  .ai-poster-3d-face-{{ ai_gen_id }} img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }

  .ai-poster-3d-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  .ai-poster-3d-placeholder-{{ ai_gen_id }} svg {
    width: 60%;
    height: 60%;
    opacity: 0.5;
  }

  .ai-poster-3d-empty-state-{{ ai_gen_id }} {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    font-size: 12px;
    color: #666;
    text-align: center;
    pointer-events: none;
  }

  .ai-poster-3d-content-{{ ai_gen_id }} {
    color: {{ block.settings.text_color }};
  }

  .ai-poster-3d-title-{{ ai_gen_id }} {
    font-size: {{ block.settings.title_size }}px;
    font-weight: 600;
    margin: 0 0 16px;
    line-height: 1.2;
  }

  .ai-poster-3d-description-{{ ai_gen_id }} {
    font-size: {{ block.settings.description_size }}px;
    line-height: 1.6;
    margin: 0 0 24px;
    opacity: 0.8;
  }

  .ai-poster-3d-price-{{ ai_gen_id }} {
    font-size: {{ block.settings.price_size }}px;
    font-weight: 600;
    margin: 0 0 24px;
    color: {{ block.settings.price_color }};
  }

  .ai-poster-3d-button-{{ ai_gen_id }} {
    display: inline-flex;
    align-items: center;
    padding: 14px 28px;
    background-color: {{ block.settings.button_color }};
    color: {{ block.settings.button_text_color }};
    text-decoration: none;
    border-radius: {{ block.settings.button_border_radius }}px;
    font-weight: 500;
    transition: background-color 0.3s ease;
  }

  .ai-poster-3d-button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.button_hover_color }};
  }

  .ai-poster-3d-controls-{{ ai_gen_id }} {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    font-size: 12px;
    color: #666;
    text-align: center;
    opacity: 0.7;
  }

  @media screen and (max-width: 768px) {
    .ai-poster-3d-wrapper-{{ ai_gen_id }} {
      grid-template-columns: 1fr;
      gap: 40px;
      text-align: center;
    }

    .ai-poster-3d-viewer-{{ ai_gen_id }} {
      height: 400px;
    }

    .ai-poster-3d-scene-{{ ai_gen_id }} {
      width: 250px;
      height: 320px;
    }

    .ai-poster-3d-title-{{ ai_gen_id }} {
      font-size: {{ block.settings.title_size | times: 0.8 }}px;
    }
  }
{% endstyle %}

<poster-3d-viewer-{{ ai_gen_id }}
  class="ai-poster-3d-container-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-poster-3d-wrapper-{{ ai_gen_id }}">
    <div class="ai-poster-3d-viewer-{{ ai_gen_id }}">
      <div class="ai-poster-3d-scene-{{ ai_gen_id }}" data-poster-scene>
        <div class="ai-poster-3d-face-{{ ai_gen_id }} ai-poster-3d-front-{{ ai_gen_id }}">
          {% if block.settings.product and block.settings.product.images.size > 0 %}
            {% assign front_image = block.settings.product.images.last %}
            <img
              src="{{ front_image | image_url: width: 600 }}"
              alt="{{ front_image.alt | escape }}"
              loading="lazy"
              width="600"
              height="800"
            >
          {% else %}
            <div class="ai-poster-3d-placeholder-{{ ai_gen_id }}">
              {{ 'product-apparel-1' | placeholder_svg_tag }}
              <div class="ai-poster-3d-empty-state-{{ ai_gen_id }}">
                Select a product with images
              </div>
            </div>
          {% endif %}
        </div>

        <div class="ai-poster-3d-face-{{ ai_gen_id }} ai-poster-3d-back-{{ ai_gen_id }}">
          {% if block.settings.back_image %}
            <img
              src="{{ block.settings.back_image | image_url: width: 600 }}"
              alt="{{ block.settings.back_image.alt | escape }}"
              loading="lazy"
              width="600"
              height="800"
            >
          {% else %}
            <div class="ai-poster-3d-placeholder-{{ ai_gen_id }}">
              {{ 'image' | placeholder_svg_tag }}
              <div class="ai-poster-3d-empty-state-{{ ai_gen_id }}">
                Add back image
              </div>
            </div>
          {% endif %}
        </div>
      </div>

      <div class="ai-poster-3d-controls-{{ ai_gen_id }}">
        Drag to rotate â€¢ Touch and swipe on mobile
      </div>
    </div>

    <div class="ai-poster-3d-content-{{ ai_gen_id }}">
      {% if block.settings.title != blank %}
        <h2 class="ai-poster-3d-title-{{ ai_gen_id }}">{{ block.settings.title }}</h2>
      {% elsif block.settings.product %}
        <h2 class="ai-poster-3d-title-{{ ai_gen_id }}">{{ block.settings.product.title }}</h2>
      {% endif %}

      {% if block.settings.description != blank %}
        <div class="ai-poster-3d-description-{{ ai_gen_id }}">{{ block.settings.description }}</div>
      {% elsif block.settings.product and block.settings.product.description != blank %}
        <div class="ai-poster-3d-description-{{ ai_gen_id }}">{{ block.settings.product.description | truncate: 200 }}</div>
      {% endif %}

      {% if block.settings.product %}
        <div class="ai-poster-3d-price-{{ ai_gen_id }}">
          {{ block.settings.product.price | money }}
          {% if block.settings.product.compare_at_price > block.settings.product.price %}
            <span style="text-decoration: line-through; opacity: 0.6; margin-left: 8px;">
              {{ block.settings.product.compare_at_price | money }}
            </span>
          {% endif %}
        </div>
      {% endif %}

      {% if block.settings.button_text != blank %}
        <a
          href="{% if block.settings.product %}{{ block.settings.product.url }}{% else %}{{ block.settings.button_link }}{% endif %}"
          class="ai-poster-3d-button-{{ ai_gen_id }}"
        >
          {{ block.settings.button_text }}
        </a>
      {% endif %}
    </div>
  </div>
</poster-3d-viewer-{{ ai_gen_id }}>

<script>
  (function() {
    class Poster3DViewer{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.isDragging = false;
        this.startX = 0;
        this.startY = 0;
        this.rotationX = -10;
        this.rotationY = 15;
        this.sensitivity = 0.5;
      }

      connectedCallback() {
        this.scene = this.querySelector('[data-poster-scene]');
        this.setupEventListeners();
        this.updateRotation();
      }

      setupEventListeners() {
        // Mouse events
        this.scene.addEventListener('mousedown', this.handleStart.bind(this));
        document.addEventListener('mousemove', this.handleMove.bind(this));
        document.addEventListener('mouseup', this.handleEnd.bind(this));

        // Touch events
        this.scene.addEventListener('touchstart', this.handleStart.bind(this), { passive: false });
        document.addEventListener('touchmove', this.handleMove.bind(this), { passive: false });
        document.addEventListener('touchend', this.handleEnd.bind(this));

        // Prevent context menu on long press
        this.scene.addEventListener('contextmenu', (e) => e.preventDefault());
      }

      handleStart(event) {
        this.isDragging = true;
        const clientX = event.type === 'mousedown' ? event.clientX : event.touches[0].clientX;
        const clientY = event.type === 'mousedown' ? event.clientY : event.touches[0].clientY;
        
        this.startX = clientX;
        this.startY = clientY;
        
        if (event.type === 'touchstart') {
          event.preventDefault();
        }
      }

      handleMove(event) {
        if (!this.isDragging) return;

        const clientX = event.type === 'mousemove' ? event.clientX : event.touches[0].clientX;
        const clientY = event.type === 'mousemove' ? event.clientY : event.touches[0].clientY;

        const deltaX = clientX - this.startX;
        const deltaY = clientY - this.startY;

        this.rotationY += deltaX * this.sensitivity;
        this.rotationX -= deltaY * this.sensitivity;

        // Limit vertical rotation
        this.rotationX = Math.max(-60, Math.min(60, this.rotationX));

        this.updateRotation();

        this.startX = clientX;
        this.startY = clientY;

        if (event.type === 'touchmove') {
          event.preventDefault();
        }
      }

      handleEnd() {
        this.isDragging = false;
      }

      updateRotation() {
        if (this.scene) {
          this.scene.style.transform = `rotateX(${this.rotationX}deg) rotateY(${this.rotationY}deg)`;
        }
      }
    }

    customElements.define('poster-3d-viewer-{{ ai_gen_id }}', Poster3DViewer{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "3D poster product",
  "settings": [
    {
      "type": "header",
      "content": "Product"
    },
    {
      "type": "product",
      "id": "product",
      "label": "Product"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Custom title"
    },
    {
      "type": "richtext",
      "id": "description",
      "label": "Custom description"
    },
    {
      "type": "header",
      "content": "Poster images"
    },
    {
      "type": "paragraph",
      "content": "The front of the poster will use the last image from the selected product. Upload a custom back image below."
    },
    {
      "type": "image_picker",
      "id": "back_image",
      "label": "Poster back image"
    },
    {
      "type": "header",
      "content": "Button"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Button text",
      "default": "Shop now"
    },
    {
      "type": "url",
      "id": "button_link",
      "label": "Custom button link"
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "viewer_background",
      "label": "Viewer background",
      "default": "#f8f8f8"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "price_color",
      "label": "Price color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Button color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button text color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "button_hover_color",
      "label": "Button hover color",
      "default": "#333333"
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 20,
      "max": 60,
      "step": 2,
      "unit": "px",
      "label": "Title size",
      "default": 36
    },
    {
      "type": "range",
      "id": "description_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Description size",
      "default": 16
    },
    {
      "type": "range",
      "id": "price_size",
      "min": 16,
      "max": 32,
      "step": 2,
      "unit": "px",
      "label": "Price size",
      "default": 24
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "section_padding",
      "min": 20,
      "max": 100,
      "step": 10,
      "unit": "px",
      "label": "Section padding",
      "default": 60
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 30,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 12
    },
    {
      "type": "range",
      "id": "button_border_radius",
      "min": 0,
      "max": 30,
      "step": 2,
      "unit": "px",
      "label": "Button border radius",
      "default": 6
    }
  ],
  "presets": [
    {
      "name": "3D poster product"
    }
  ]
}
{% endschema %}