{% doc %}
  @prompt
    a custom product section with option to select product to show title and price according to variants if product have variants and in the left a three layer setup 2 layers for admin 1st base layer is for the shape png which will be used for masking on the 2nd layer (2nd admin layer will be a overlay png having mask of the base shape) and the third layer will be a user upload image layer between the base shape and the overlay png
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-custom-product-{{ ai_gen_id }} {
    display: flex;
    gap: 40px;
    align-items: flex-start;
    padding: 40px 0;
    max-width: 100%;
  }

  .ai-custom-product-layers-{{ ai_gen_id }} {
    flex: 1;
    position: relative;
    max-width: 500px;
  }

  .ai-custom-product-info-{{ ai_gen_id }} {
    flex: 1;
    padding-left: 20px;
  }

  .ai-layer-container-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    aspect-ratio: 1;
    overflow: hidden;
    border-radius: {{ block.settings.container_border_radius }}px;
    background-color: {{ block.settings.container_bg_color }};
  }

  .ai-layer-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  .ai-base-layer-{{ ai_gen_id }} {
    z-index: 1;
  }

  .ai-user-layer-{{ ai_gen_id }} {
    z-index: 2;
  }

  .ai-overlay-layer-{{ ai_gen_id }} {
    z-index: 3;
  }

  .ai-layer-{{ ai_gen_id }} img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .ai-user-layer-{{ ai_gen_id }} img {
    mask-image: var(--ai-mask-image-{{ ai_gen_id }});
    -webkit-mask-image: var(--ai-mask-image-{{ ai_gen_id }});
    mask-size: contain;
    -webkit-mask-size: contain;
    mask-repeat: no-repeat;
    -webkit-mask-repeat: no-repeat;
    mask-position: center;
    -webkit-mask-position: center;
  }

  .ai-upload-area-{{ ai_gen_id }} {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 4;
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 20px;
    border-radius: 8px;
    text-align: center;
    cursor: pointer;
    transition: opacity 0.3s ease;
  }

  .ai-upload-area-{{ ai_gen_id }}.hidden {
    opacity: 0;
    pointer-events: none;
  }

  .ai-upload-input-{{ ai_gen_id }} {
    display: none;
  }

  .ai-product-title-{{ ai_gen_id }} {
    font-size: {{ block.settings.title_font_size }}px;
    color: {{ block.settings.title_color }};
    margin: 0 0 16px 0;
    font-family: {{ settings.type_primary_font.family }}, {{ settings.type_primary_font.fallback_families }};
    font-weight: {{ settings.type_primary_font.weight }};
  }

  .ai-product-price-{{ ai_gen_id }} {
    font-size: {{ block.settings.price_font_size }}px;
    color: {{ block.settings.price_color }};
    margin-bottom: 20px;
  }

  .ai-variant-selector-{{ ai_gen_id }} {
    margin-bottom: 20px;
  }

  .ai-variant-label-{{ ai_gen_id }} {
    display: block;
    margin-bottom: 8px;
    font-weight: 600;
    color: {{ block.settings.title_color }};
  }

  .ai-variant-select-{{ ai_gen_id }} {
    width: 100%;
    padding: 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
  }

  .ai-empty-product-{{ ai_gen_id }} {
    color: #666;
    font-style: italic;
    text-align: center;
    padding: 40px 20px;
  }

  .ai-layer-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #999;
    font-size: 14px;
    text-align: center;
  }

  @media screen and (max-width: 768px) {
    .ai-custom-product-{{ ai_gen_id }} {
      flex-direction: column;
      gap: 20px;
    }

    .ai-custom-product-info-{{ ai_gen_id }} {
      padding-left: 0;
    }

    .ai-custom-product-layers-{{ ai_gen_id }} {
      max-width: 100%;
    }
  }
{% endstyle %}

<custom-product-{{ ai_gen_id }}
  class="ai-custom-product-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-custom-product-layers-{{ ai_gen_id }}">
    <div 
      class="ai-layer-container-{{ ai_gen_id }}"
      {% if block.settings.base_shape_image %}
        style="--ai-mask-image-{{ ai_gen_id }}: url('{{ block.settings.base_shape_image | image_url }}')"
      {% endif %}
    >
      <div class="ai-layer-{{ ai_gen_id }} ai-base-layer-{{ ai_gen_id }}">
        {% if block.settings.base_shape_image %}
          <img
            src="{{ block.settings.base_shape_image | image_url: width: 500 }}"
            alt="Base shape"
            loading="lazy"
          >
        {% else %}
          <div class="ai-layer-placeholder-{{ ai_gen_id }}">
            Base shape layer<br>
            <small>Add base shape image</small>
          </div>
        {% endif %}
      </div>

      <div class="ai-layer-{{ ai_gen_id }} ai-user-layer-{{ ai_gen_id }}">
        <img
          id="ai-user-image-{{ ai_gen_id }}"
          src=""
          alt="User uploaded image"
          style="display: none;"
        >
      </div>

      <div class="ai-layer-{{ ai_gen_id }} ai-overlay-layer-{{ ai_gen_id }}">
        {% if block.settings.overlay_image %}
          <img
            src="{{ block.settings.overlay_image | image_url: width: 500 }}"
            alt="Overlay"
            loading="lazy"
          >
        {% else %}
          <div class="ai-layer-placeholder-{{ ai_gen_id }}">
            Overlay layer<br>
            <small>Add overlay image</small>
          </div>
        {% endif %}
      </div>

      <div class="ai-upload-area-{{ ai_gen_id }}" id="ai-upload-area-{{ ai_gen_id }}">
        <div>
          <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
            <polyline points="7,10 12,15 17,10"></polyline>
            <line x1="12" y1="15" x2="12" y2="3"></line>
          </svg>
          <p>{{ block.settings.upload_text }}</p>
          <small>{{ block.settings.upload_subtext }}</small>
        </div>
        <input
          type="file"
          id="ai-upload-input-{{ ai_gen_id }}"
          class="ai-upload-input-{{ ai_gen_id }}"
          accept="image/*"
        >
      </div>
    </div>
  </div>

  <div class="ai-custom-product-info-{{ ai_gen_id }}">
    {% if block.settings.selected_product %}
      {% assign product = block.settings.selected_product %}
      
      <h2 class="ai-product-title-{{ ai_gen_id }}">{{ product.title }}</h2>
      
      <div class="ai-product-price-{{ ai_gen_id }}" id="ai-product-price-{{ ai_gen_id }}">
        {% if product.variants.size > 1 %}
          <span id="ai-variant-price-{{ ai_gen_id }}">{{ product.price | money }}</span>
        {% else %}
          {{ product.price | money }}
        {% endif %}
      </div>

      {% if product.variants.size > 1 %}
        <div class="ai-variant-selector-{{ ai_gen_id }}">
          <label for="ai-variant-select-{{ ai_gen_id }}" class="ai-variant-label-{{ ai_gen_id }}">
            Select variant:
          </label>
          <select id="ai-variant-select-{{ ai_gen_id }}" class="ai-variant-select-{{ ai_gen_id }}">
            {% for variant in product.variants %}
              <option 
                value="{{ variant.id }}" 
                data-price="{{ variant.price }}"
                {% if variant == product.selected_variant %}selected{% endif %}
              >
                {{ variant.title }} - {{ variant.price | money }}
              </option>
            {% endfor %}
          </select>
        </div>
      {% endif %}

      {% if product.description != blank %}
        <div class="ai-product-description-{{ ai_gen_id }}">
          {{ product.description | truncate: 200 }}
        </div>
      {% endif %}
    {% else %}
      <div class="ai-empty-product-{{ ai_gen_id }}">
        Select a product to display its information
      </div>
    {% endif %}
  </div>
</custom-product-{{ ai_gen_id }}>

<script>
  (function() {
    class CustomProduct{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
      }

      connectedCallback() {
        this.setupImageUpload();
        this.setupVariantSelector();
      }

      setupImageUpload() {
        const uploadArea = this.querySelector('#ai-upload-area-{{ ai_gen_id }}');
        const uploadInput = this.querySelector('#ai-upload-input-{{ ai_gen_id }}');
        const userImage = this.querySelector('#ai-user-image-{{ ai_gen_id }}');

        if (!uploadArea || !uploadInput || !userImage) return;

        uploadArea.addEventListener('click', () => {
          uploadInput.click();
        });

        uploadInput.addEventListener('change', (event) => {
          const file = event.target.files[0];
          if (file) {
            const reader = new FileReader();
            reader.onload = (e) => {
              userImage.src = e.target.result;
              userImage.style.display = 'block';
              uploadArea.classList.add('hidden');
            };
            reader.readAsDataURL(file);
          }
        });

        uploadArea.addEventListener('dragover', (e) => {
          e.preventDefault();
          uploadArea.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';
        });

        uploadArea.addEventListener('dragleave', (e) => {
          e.preventDefault();
          uploadArea.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
        });

        uploadArea.addEventListener('drop', (e) => {
          e.preventDefault();
          uploadArea.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
          
          const files = e.dataTransfer.files;
          if (files.length > 0) {
            const file = files[0];
            if (file.type.startsWith('image/')) {
              const reader = new FileReader();
              reader.onload = (event) => {
                userImage.src = event.target.result;
                userImage.style.display = 'block';
                uploadArea.classList.add('hidden');
              };
              reader.readAsDataURL(file);
            }
          }
        });
      }

      setupVariantSelector() {
        const variantSelect = this.querySelector('#ai-variant-select-{{ ai_gen_id }}');
        const priceElement = this.querySelector('#ai-variant-price-{{ ai_gen_id }}');

        if (!variantSelect || !priceElement) return;

        variantSelect.addEventListener('change', (event) => {
          const selectedOption = event.target.selectedOptions[0];
          const price = selectedOption.dataset.price;
          
          if (price) {
            const formattedPrice = new Intl.NumberFormat('{{ shop.locale }}', {
              style: 'currency',
              currency: '{{ shop.currency }}'
            }).format(price / 100);
            
            priceElement.textContent = formattedPrice;
          }
        });
      }
    }

    customElements.define('custom-product-{{ ai_gen_id }}', CustomProduct{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Custom product layers",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Product selection"
    },
    {
      "type": "product",
      "id": "selected_product",
      "label": "Select product"
    },
    {
      "type": "header",
      "content": "Layer images"
    },
    {
      "type": "image_picker",
      "id": "base_shape_image",
      "label": "Base shape image (PNG for masking)"
    },
    {
      "type": "image_picker",
      "id": "overlay_image",
      "label": "Overlay image (PNG with mask)"
    },
    {
      "type": "header",
      "content": "Upload area"
    },
    {
      "type": "text",
      "id": "upload_text",
      "label": "Upload text",
      "default": "Upload your image"
    },
    {
      "type": "text",
      "id": "upload_subtext",
      "label": "Upload subtext",
      "default": "Click or drag and drop"
    },
    {
      "type": "header",
      "content": "Styling"
    },
    {
      "type": "color",
      "id": "container_bg_color",
      "label": "Container background",
      "default": "#f8f8f8"
    },
    {
      "type": "range",
      "id": "container_border_radius",
      "min": 0,
      "max": 30,
      "step": 2,
      "unit": "px",
      "label": "Container border radius",
      "default": 8
    },
    {
      "type": "color",
      "id": "title_color",
      "label": "Title color",
      "default": "#333333"
    },
    {
      "type": "range",
      "id": "title_font_size",
      "min": 16,
      "max": 48,
      "step": 2,
      "unit": "px",
      "label": "Title font size",
      "default": 28
    },
    {
      "type": "color",
      "id": "price_color",
      "label": "Price color",
      "default": "#000000"
    },
    {
      "type": "range",
      "id": "price_font_size",
      "min": 14,
      "max": 32,
      "step": 2,
      "unit": "px",
      "label": "Price font size",
      "default": 20
    }
  ],
  "presets": [
    {
      "name": "Custom product layers"
    }
  ]
}
{% endschema %}