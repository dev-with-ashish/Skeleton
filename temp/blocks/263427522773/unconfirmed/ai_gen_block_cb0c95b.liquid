{% doc %}
  @prompt
    a section to display the 3d box which can be rotated having orbit control feature
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-3d-box-container-{{ ai_gen_id }} {
    width: 100%;
    height: {{ block.settings.container_height }}px;
    background-color: {{ block.settings.background_color }};
    border-radius: {{ block.settings.border_radius }}px;
    position: relative;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .ai-3d-box-canvas-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    cursor: grab;
  }

  .ai-3d-box-canvas-{{ ai_gen_id }}:active {
    cursor: grabbing;
  }

  .ai-3d-box-controls-{{ ai_gen_id }} {
    position: absolute;
    top: 10px;
    right: 10px;
    display: flex;
    flex-direction: column;
    gap: 8px;
    z-index: 10;
  }

  .ai-3d-box-control-button-{{ ai_gen_id }} {
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    border: none;
    padding: 8px 12px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 12px;
    transition: background-color 0.2s ease;
  }

  .ai-3d-box-control-button-{{ ai_gen_id }}:hover {
    background-color: rgba(0, 0, 0, 0.9);
  }

  .ai-3d-box-info-{{ ai_gen_id }} {
    position: absolute;
    bottom: 10px;
    left: 10px;
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 8px 12px;
    border-radius: 4px;
    font-size: 12px;
    z-index: 10;
  }

  @media screen and (max-width: 749px) {
    .ai-3d-box-container-{{ ai_gen_id }} {
      height: {{ block.settings.container_height | times: 0.7 }}px;
    }
  }
{% endstyle %}

<rotating-3d-box-{{ ai_gen_id }}
  class="ai-3d-box-container-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <canvas class="ai-3d-box-canvas-{{ ai_gen_id }}"></canvas>
  
  <div class="ai-3d-box-controls-{{ ai_gen_id }}">
    <button class="ai-3d-box-control-button-{{ ai_gen_id }}" data-action="reset">Reset</button>
    <button class="ai-3d-box-control-button-{{ ai_gen_id }}" data-action="auto-rotate">Auto</button>
  </div>
  
  <div class="ai-3d-box-info-{{ ai_gen_id }}">
    Drag to rotate â€¢ Scroll to zoom
  </div>
</rotating-3d-box-{{ ai_gen_id }}>

<script>
  (function() {
    class Rotating3DBox{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.canvas = null;
        this.ctx = null;
        this.isMouseDown = false;
        this.lastMouseX = 0;
        this.lastMouseY = 0;
        this.rotationX = 0;
        this.rotationY = 0;
        this.zoom = 1;
        this.autoRotate = false;
        this.animationId = null;
        
        this.boxSize = {{ block.settings.box_size }};
        this.boxColor = '{{ block.settings.box_color }}';
        this.wireframeColor = '{{ block.settings.wireframe_color }}';
        this.showWireframe = {{ block.settings.show_wireframe }};
      }

      connectedCallback() {
        this.canvas = this.querySelector('.ai-3d-box-canvas-{{ ai_gen_id }}');
        this.ctx = this.canvas.getContext('2d');
        
        this.setupCanvas();
        this.setupEventListeners();
        this.startAnimation();
      }

      disconnectedCallback() {
        if (this.animationId) {
          cancelAnimationFrame(this.animationId);
        }
      }

      setupCanvas() {
        const rect = this.canvas.getBoundingClientRect();
        this.canvas.width = rect.width * window.devicePixelRatio;
        this.canvas.height = rect.height * window.devicePixelRatio;
        this.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);
        this.canvas.style.width = rect.width + 'px';
        this.canvas.style.height = rect.height + 'px';
      }

      setupEventListeners() {
        // Mouse events
        this.canvas.addEventListener('mousedown', (e) => {
          this.isMouseDown = true;
          this.lastMouseX = e.clientX;
          this.lastMouseY = e.clientY;
        });

        document.addEventListener('mousemove', (e) => {
          if (!this.isMouseDown) return;
          
          const deltaX = e.clientX - this.lastMouseX;
          const deltaY = e.clientY - this.lastMouseY;
          
          this.rotationY += deltaX * 0.01;
          this.rotationX += deltaY * 0.01;
          
          this.lastMouseX = e.clientX;
          this.lastMouseY = e.clientY;
        });

        document.addEventListener('mouseup', () => {
          this.isMouseDown = false;
        });

        // Touch events
        this.canvas.addEventListener('touchstart', (e) => {
          e.preventDefault();
          const touch = e.touches[0];
          this.isMouseDown = true;
          this.lastMouseX = touch.clientX;
          this.lastMouseY = touch.clientY;
        });

        this.canvas.addEventListener('touchmove', (e) => {
          e.preventDefault();
          if (!this.isMouseDown) return;
          
          const touch = e.touches[0];
          const deltaX = touch.clientX - this.lastMouseX;
          const deltaY = touch.clientY - this.lastMouseY;
          
          this.rotationY += deltaX * 0.01;
          this.rotationX += deltaY * 0.01;
          
          this.lastMouseX = touch.clientX;
          this.lastMouseY = touch.clientY;
        });

        this.canvas.addEventListener('touchend', (e) => {
          e.preventDefault();
          this.isMouseDown = false;
        });

        // Wheel event for zoom
        this.canvas.addEventListener('wheel', (e) => {
          e.preventDefault();
          this.zoom += e.deltaY * -0.001;
          this.zoom = Math.max(0.5, Math.min(3, this.zoom));
        });

        // Control buttons
        this.querySelectorAll('.ai-3d-box-control-button-{{ ai_gen_id }}').forEach(button => {
          button.addEventListener('click', (e) => {
            const action = e.target.getAttribute('data-action');
            if (action === 'reset') {
              this.rotationX = 0;
              this.rotationY = 0;
              this.zoom = 1;
              this.autoRotate = false;
              e.target.textContent = 'Auto';
            } else if (action === 'auto-rotate') {
              this.autoRotate = !this.autoRotate;
              e.target.textContent = this.autoRotate ? 'Stop' : 'Auto';
            }
          });
        });

        // Resize observer
        const resizeObserver = new ResizeObserver(() => {
          this.setupCanvas();
        });
        resizeObserver.observe(this.canvas);
      }

      project3D(x, y, z) {
        const centerX = this.canvas.width / (2 * window.devicePixelRatio);
        const centerY = this.canvas.height / (2 * window.devicePixelRatio);
        
        // Apply rotations
        const cosX = Math.cos(this.rotationX);
        const sinX = Math.sin(this.rotationX);
        const cosY = Math.cos(this.rotationY);
        const sinY = Math.sin(this.rotationY);
        
        // Rotate around Y axis
        const x1 = x * cosY - z * sinY;
        const z1 = x * sinY + z * cosY;
        
        // Rotate around X axis
        const y1 = y * cosX - z1 * sinX;
        const z2 = y * sinX + z1 * cosX;
        
        // Apply zoom and perspective
        const distance = 300;
        const scale = (distance / (distance + z2)) * this.zoom;
        
        return {
          x: centerX + x1 * scale,
          y: centerY + y1 * scale,
          z: z2
        };
      }

      drawBox() {
        const size = this.boxSize;
        const vertices = [
          [-size, -size, -size], [size, -size, -size], [size, size, -size], [-size, size, -size],
          [-size, -size, size], [size, -size, size], [size, size, size], [-size, size, size]
        ];
        
        const faces = [
          [0, 1, 2, 3], [4, 7, 6, 5], [0, 4, 5, 1],
          [2, 6, 7, 3], [0, 3, 7, 4], [1, 5, 6, 2]
        ];
        
        const projectedVertices = vertices.map(v => this.project3D(v[0], v[1], v[2]));
        
        // Sort faces by average Z depth for proper rendering
        const facesWithDepth = faces.map(face => {
          const avgZ = face.reduce((sum, i) => sum + projectedVertices[i].z, 0) / face.length;
          return { face, avgZ };
        });
        facesWithDepth.sort((a, b) => a.avgZ - b.avgZ);
        
        // Draw faces
        facesWithDepth.forEach(({ face }) => {
          this.ctx.beginPath();
          this.ctx.moveTo(projectedVertices[face[0]].x, projectedVertices[face[0]].y);
          
          for (let i = 1; i < face.length; i++) {
            this.ctx.lineTo(projectedVertices[face[i]].x, projectedVertices[face[i]].y);
          }
          this.ctx.closePath();
          
          // Fill face
          this.ctx.fillStyle = this.boxColor;
          this.ctx.fill();
          
          // Draw wireframe if enabled
          if (this.showWireframe) {
            this.ctx.strokeStyle = this.wireframeColor;
            this.ctx.lineWidth = 1;
            this.ctx.stroke();
          }
        });
      }

      render() {
        this.ctx.clearRect(0, 0, this.canvas.width / window.devicePixelRatio, this.canvas.height / window.devicePixelRatio);
        this.drawBox();
      }

      animate() {
        if (this.autoRotate) {
          this.rotationY += 0.01;
        }
        
        this.render();
        this.animationId = requestAnimationFrame(() => this.animate());
      }

      startAnimation() {
        this.animate();
      }
    }

    customElements.define('rotating-3d-box-{{ ai_gen_id }}', Rotating3DBox{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "3D rotating box",
  "settings": [
    {
      "type": "header",
      "content": "Container"
    },
    {
      "type": "range",
      "id": "container_height",
      "min": 200,
      "max": 800,
      "step": 50,
      "unit": "px",
      "label": "Container height",
      "default": 400
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#f8f8f8"
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 8
    },
    {
      "type": "header",
      "content": "3D box"
    },
    {
      "type": "range",
      "id": "box_size",
      "min": 30,
      "max": 150,
      "step": 10,
      "unit": "px",
      "label": "Box size",
      "default": 80
    },
    {
      "type": "color",
      "id": "box_color",
      "label": "Box color",
      "default": "#4a90e2"
    },
    {
      "type": "checkbox",
      "id": "show_wireframe",
      "label": "Show wireframe",
      "default": true
    },
    {
      "type": "color",
      "id": "wireframe_color",
      "label": "Wireframe color",
      "default": "#ffffff"
    }
  ],
  "presets": [
    {
      "name": "3D rotating box"
    }
  ]
}
{% endschema %}