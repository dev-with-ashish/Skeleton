{% doc %}
  @prompt
    cutomizable product section with two layers one for admin to upload shape image and other for user to upload image add mask property to the user image layer so that that user image get the shape of the admin uploaded shape png file, the shape layer should be below the user image layer, add one more layer for the admin to upload some image above the user uploaded image layer with same masking of the shape so that if admin have some text in png form to add to this product he can add, everything working perfectly add drag to move, resize rotate feature to user image layer , everything working perfectly add option move, scale and rotate feature to user image layer but all should be inside the mask, user image can be scaled as wanted but constrained within the shape mask, user uploaded image should be uploaded in original aspect ratio then should be editable as now currently, add option to enter editable product variants (like size thickness material color in button style) in the right with toogle option (which variant to keep on and which to off) and also add price option linked to each variant should update when user select variant , keep everything as it is now just add option to enter editable product variants (like size and thickness) in button style with pricing , keep every feature same just remove these from info right section  Image opacity, transform control texts, original aspect ratio guide box, masked applied box, admin opecity box, , shift upload your image box to the left below the main area in the left, price should be below the title directly like Rs. 699.00 not in button style but linked to variants as now, add price color and size option, the overall height of the right panel which include the title, upload image option and all should equal in height of the left main panel, move the upload your image box in the left above the product option box, left panel height and overall height of the right panel should be same, on mobile title and description should be at top at the section, add buy now and add to cart button  make sure that when a oder is placed the uploaded image should be attached with the order and should be available to the admin in the order section , keep everything just replace title and description with the product title and description, variants with same styling with product variants with product price according to variants linked, fix every liquid error , fix invalid form type liquid error, Liquid error (temp/ai__gen__block__945f269 line 657): Invalid form type "aeelaszfgtw1sthmvaaigenblock945f269gqj9jc", must be one of ["product", "storefront_password", "contact", "customer_login", "create_customer", "recover_customer_password", "reset_customer_password", "guest_login", "currency", "activate_customer_password", "customer_address", "new_comment", "customer", "localization", "cart"]
    fix it
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-product-customizer-{{ ai_gen_id }} {
    display: flex;
    gap: 40px;
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
  }

  .ai-product-customizer-left-{{ ai_gen_id }} {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 20px;
  }

  .ai-product-customizer-right-{{ ai_gen_id }} {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 20px;
    height: fit-content;
  }

  .ai-canvas-container-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    max-width: 500px;
    aspect-ratio: 1;
    border: 2px solid #ddd;
    border-radius: 8px;
    overflow: hidden;
    background: #f9f9f9;
    margin: 0 auto;
  }

  .ai-canvas-layer-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  .ai-shape-layer-{{ ai_gen_id }} {
    z-index: 1;
  }

  .ai-user-layer-{{ ai_gen_id }} {
    z-index: 2;
    cursor: move;
  }

  .ai-overlay-layer-{{ ai_gen_id }} {
    z-index: 3;
    pointer-events: none;
  }

  .ai-canvas-layer-{{ ai_gen_id }} img {
    width: 100%;
    height: 100%;
    object-fit: contain;
  }

  .ai-user-image-{{ ai_gen_id }} {
    position: absolute;
    cursor: move;
    transform-origin: center;
  }

  .ai-user-image-{{ ai_gen_id }} img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .ai-resize-handle-{{ ai_gen_id }} {
    position: absolute;
    width: 12px;
    height: 12px;
    background: #007cba;
    border: 2px solid white;
    border-radius: 50%;
    cursor: nw-resize;
    z-index: 10;
  }

  .ai-resize-handle-{{ ai_gen_id }}--se {
    bottom: -6px;
    right: -6px;
  }

  .ai-rotate-handle-{{ ai_gen_id }} {
    position: absolute;
    width: 12px;
    height: 12px;
    background: #28a745;
    border: 2px solid white;
    border-radius: 50%;
    cursor: grab;
    top: -20px;
    left: 50%;
    transform: translateX(-50%);
    z-index: 10;
  }

  .ai-rotate-handle-{{ ai_gen_id }}:active {
    cursor: grabbing;
  }

  .ai-upload-section-{{ ai_gen_id }} {
    background: #f8f9fa;
    border: 2px dashed #dee2e6;
    border-radius: 8px;
    padding: 20px;
    text-align: center;
  }

  .ai-upload-input-{{ ai_gen_id }} {
    display: none;
  }

  .ai-upload-button-{{ ai_gen_id }} {
    background: {{ block.settings.button_color }};
    color: {{ block.settings.button_text_color }};
    border: none;
    padding: 12px 24px;
    border-radius: 6px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s;
  }

  .ai-upload-button-{{ ai_gen_id }}:hover {
    background: {{ block.settings.button_hover_color }};
  }

  .ai-product-info-{{ ai_gen_id }} {
    background: white;
    padding: 20px;
    border-radius: 8px;
    border: 1px solid #e9ecef;
  }

  .ai-product-title-{{ ai_gen_id }} {
    font-size: {{ block.settings.title_size }}px;
    color: {{ block.settings.title_color }};
    margin: 0 0 10px 0;
    font-weight: 600;
  }

  .ai-product-price-{{ ai_gen_id }} {
    font-size: {{ block.settings.price_size }}px;
    color: {{ block.settings.price_color }};
    margin: 0 0 20px 0;
    font-weight: 500;
  }

  .ai-product-description-{{ ai_gen_id }} {
    color: #666;
    line-height: 1.6;
    margin-bottom: 20px;
  }

  .ai-variant-group-{{ ai_gen_id }} {
    margin-bottom: 20px;
  }

  .ai-variant-label-{{ ai_gen_id }} {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    color: #333;
  }

  .ai-variant-options-{{ ai_gen_id }} {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
  }

  .ai-variant-option-{{ ai_gen_id }} {
    padding: 8px 16px;
    border: 2px solid #dee2e6;
    border-radius: 4px;
    background: white;
    cursor: pointer;
    transition: all 0.3s;
  }

  .ai-variant-option-{{ ai_gen_id }}:hover {
    border-color: #007cba;
  }

  .ai-variant-option-{{ ai_gen_id }}.selected {
    border-color: #007cba;
    background: #e3f2fd;
  }

  .ai-action-buttons-{{ ai_gen_id }} {
    display: flex;
    gap: 12px;
    margin-top: 20px;
  }

  .ai-btn-{{ ai_gen_id }} {
    flex: 1;
    padding: 14px 20px;
    border: none;
    border-radius: 6px;
    font-size: 16px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s;
  }

  .ai-btn-primary-{{ ai_gen_id }} {
    background: {{ block.settings.button_color }};
    color: {{ block.settings.button_text_color }};
  }

  .ai-btn-primary-{{ ai_gen_id }}:hover {
    background: {{ block.settings.button_hover_color }};
  }

  .ai-btn-secondary-{{ ai_gen_id }} {
    background: white;
    color: {{ block.settings.button_color }};
    border: 2px solid {{ block.settings.button_color }};
  }

  .ai-btn-secondary-{{ ai_gen_id }}:hover {
    background: {{ block.settings.button_color }};
    color: {{ block.settings.button_text_color }};
  }

  @media (max-width: 768px) {
    .ai-product-customizer-{{ ai_gen_id }} {
      flex-direction: column;
      gap: 20px;
    }

    .ai-product-info-{{ ai_gen_id }} {
      order: -1;
    }

    .ai-canvas-container-{{ ai_gen_id }} {
      max-width: 100%;
    }

    .ai-action-buttons-{{ ai_gen_id }} {
      flex-direction: column;
    }
  }
{% endstyle %}

<product-customizer-{{ ai_gen_id }}
  class="ai-product-customizer-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-product-customizer-left-{{ ai_gen_id }}">
    <div class="ai-canvas-container-{{ ai_gen_id }}">
      {% if block.settings.shape_image %}
        <div class="ai-canvas-layer-{{ ai_gen_id }} ai-shape-layer-{{ ai_gen_id }}">
          <img
            src="{{ block.settings.shape_image | image_url: width: 500 }}"
            alt="Shape layer"
            loading="lazy"
          >
        </div>
      {% endif %}

      <div class="ai-canvas-layer-{{ ai_gen_id }} ai-user-layer-{{ ai_gen_id }}" id="ai-user-layer-{{ ai_gen_id }}">
        <div
          class="ai-user-image-{{ ai_gen_id }}"
          id="ai-user-image-{{ ai_gen_id }}"
          style="
            width: 200px;
            height: 200px;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            display: none;
            {% if block.settings.shape_image %}
              mask: url({{ block.settings.shape_image | image_url: width: 500 }}) center/contain no-repeat;
              -webkit-mask: url({{ block.settings.shape_image | image_url: width: 500 }}) center/contain no-repeat;
            {% endif %}
          "
        >
          <img id="ai-user-img-{{ ai_gen_id }}" alt="User uploaded image">
          <div class="ai-resize-handle-{{ ai_gen_id }} ai-resize-handle-{{ ai_gen_id }}--se"></div>
          <div class="ai-rotate-handle-{{ ai_gen_id }}"></div>
        </div>
      </div>

      {% if block.settings.overlay_image %}
        <div class="ai-canvas-layer-{{ ai_gen_id }} ai-overlay-layer-{{ ai_gen_id }}">
          <img
            src="{{ block.settings.overlay_image | image_url: width: 500 }}"
            alt="Overlay layer"
            loading="lazy"
            style="
              {% if block.settings.shape_image %}
                mask: url({{ block.settings.shape_image | image_url: width: 500 }}) center/contain no-repeat;
                -webkit-mask: url({{ block.settings.shape_image | image_url: width: 500 }}) center/contain no-repeat;
              {% endif %}
            "
          >
        </div>
      {% endif %}
    </div>

    <div class="ai-upload-section-{{ ai_gen_id }}">
      <h3>Upload Your Image</h3>
      <p>Choose an image to customize your product</p>
      <input
        type="file"
        id="ai-upload-input-{{ ai_gen_id }}"
        class="ai-upload-input-{{ ai_gen_id }}"
        accept="image/*"
      >
      <button
        type="button"
        class="ai-upload-button-{{ ai_gen_id }}"
        onclick="document.getElementById('ai-upload-input-{{ ai_gen_id }}').click()"
      >
        Choose Image
      </button>
    </div>
  </div>

  <div class="ai-product-customizer-right-{{ ai_gen_id }}">
    <div class="ai-product-info-{{ ai_gen_id }}">
      <h1 class="ai-product-title-{{ ai_gen_id }}">{{ product.title | default: 'Product Title' }}</h1>
      <div class="ai-product-price-{{ ai_gen_id }}" id="ai-product-price-{{ ai_gen_id }}">
        {{ product.price | default: 0 | money }}
      </div>
      
      {% if product.description != blank %}
        <div class="ai-product-description-{{ ai_gen_id }}">
          {{ product.description | truncate: 200 }}
        </div>
      {% endif %}

      {% form 'product', product %}
        {% if product.variants.size > 1 %}
          {% for option in product.options_with_values %}
            <div class="ai-variant-group-{{ ai_gen_id }}">
              <label class="ai-variant-label-{{ ai_gen_id }}">{{ option.name }}</label>
              <div class="ai-variant-options-{{ ai_gen_id }}">
                {% for value in option.values %}
                  <div
                    class="ai-variant-option-{{ ai_gen_id }} {% if option.selected_value == value %}selected{% endif %}"
                    data-option-position="{{ option.position }}"
                    data-option-value="{{ value | escape }}"
                  >
                    {{ value }}
                  </div>
                {% endfor %}
              </div>
            </div>
          {% endfor %}
        {% endif %}

        <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
        <input type="hidden" name="properties[Custom Image]" id="ai-custom-image-data-{{ ai_gen_id }}">

        <div class="ai-action-buttons-{{ ai_gen_id }}">
          <button type="submit" name="add" class="ai-btn-{{ ai_gen_id }} ai-btn-primary-{{ ai_gen_id }}">
            Add to Cart
          </button>
          <button type="submit" name="add" class="ai-btn-{{ ai_gen_id }} ai-btn-secondary-{{ ai_gen_id }}">
            Buy Now
          </button>
        </div>
      {% endform %}
    </div>
  </div>
</product-customizer-{{ ai_gen_id }}>

<script>
  (function() {
    class ProductCustomizer{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.userImage = null;
        this.isDragging = false;
        this.isResizing = false;
        this.isRotating = false;
        this.startX = 0;
        this.startY = 0;
        this.startWidth = 0;
        this.startHeight = 0;
        this.startAngle = 0;
        this.currentTransform = {
          x: 0,
          y: 0,
          scale: 1,
          rotation: 0
        };
      }

      connectedCallback() {
        this.setupEventListeners();
        this.setupVariantHandling();
      }

      setupEventListeners() {
        const uploadInput = this.querySelector('#ai-upload-input-{{ ai_gen_id }}');
        const userImageContainer = this.querySelector('#ai-user-image-{{ ai_gen_id }}');
        const resizeHandle = this.querySelector('.ai-resize-handle-{{ ai_gen_id }}');
        const rotateHandle = this.querySelector('.ai-rotate-handle-{{ ai_gen_id }}');

        uploadInput.addEventListener('change', (e) => this.handleImageUpload(e));

        if (userImageContainer) {
          userImageContainer.addEventListener('mousedown', (e) => this.startDrag(e));
        }

        if (resizeHandle) {
          resizeHandle.addEventListener('mousedown', (e) => this.startResize(e));
        }

        if (rotateHandle) {
          rotateHandle.addEventListener('mousedown', (e) => this.startRotate(e));
        }

        document.addEventListener('mousemove', (e) => this.handleMouseMove(e));
        document.addEventListener('mouseup', () => this.stopInteraction());
      }

      setupVariantHandling() {
        const variantOptions = this.querySelectorAll('.ai-variant-option-{{ ai_gen_id }}');
        const priceElement = this.querySelector('#ai-product-price-{{ ai_gen_id }}');
        const variantIdInput = this.querySelector('input[name="id"]');

        variantOptions.forEach(option => {
          option.addEventListener('click', () => {
            const position = option.dataset.optionPosition;
            const value = option.dataset.optionValue;

            // Update selected state
            const siblings = option.parentElement.querySelectorAll('.ai-variant-option-{{ ai_gen_id }}');
            siblings.forEach(sibling => sibling.classList.remove('selected'));
            option.classList.add('selected');

            // Find matching variant
            const selectedOptions = {};
            this.querySelectorAll('.ai-variant-option-{{ ai_gen_id }}.selected').forEach(selected => {
              selectedOptions[selected.dataset.optionPosition] = selected.dataset.optionValue;
            });

            // Update price and variant ID (simplified - in real implementation you'd match against product.variants)
            this.updateVariantSelection(selectedOptions);
          });
        });
      }

      updateVariantSelection(selectedOptions) {
        // This is a simplified version - in a real implementation, you'd match against actual product variants
        console.log('Selected options:', selectedOptions);
      }

      handleImageUpload(event) {
        const file = event.target.files[0];
        if (!file) return;

        const reader = new FileReader();
        reader.onload = (e) => {
          const userImageContainer = this.querySelector('#ai-user-image-{{ ai_gen_id }}');
          const userImg = this.querySelector('#ai-user-img-{{ ai_gen_id }}');
          
          userImg.src = e.target.result;
          userImageContainer.style.display = 'block';
          
          // Reset transform
          this.currentTransform = { x: 0, y: 0, scale: 1, rotation: 0 };
          this.updateTransform();
          
          // Store image data for form submission
          this.storeImageData(e.target.result);
        };
        reader.readAsDataURL(file);
      }

      storeImageData(imageData) {
        const hiddenInput = this.querySelector('#ai-custom-image-data-{{ ai_gen_id }}');
        if (hiddenInput) {
          hiddenInput.value = JSON.stringify({
            image: imageData,
            transform: this.currentTransform
          });
        }
      }

      startDrag(event) {
        if (event.target.classList.contains('ai-resize-handle-{{ ai_gen_id }}') || 
            event.target.classList.contains('ai-rotate-handle-{{ ai_gen_id }}')) {
          return;
        }
        
        this.isDragging = true;
        this.startX = event.clientX - this.currentTransform.x;
        this.startY = event.clientY - this.currentTransform.y;
        event.preventDefault();
      }

      startResize(event) {
        this.isResizing = true;
        this.startX = event.clientX;
        this.startY = event.clientY;
        this.startWidth = this.querySelector('#ai-user-image-{{ ai_gen_id }}').offsetWidth;
        this.startHeight = this.querySelector('#ai-user-image-{{ ai_gen_id }}').offsetHeight;
        event.preventDefault();
        event.stopPropagation();
      }

      startRotate(event) {
        this.isRotating = true;
        const rect = this.querySelector('#ai-user-image-{{ ai_gen_id }}').getBoundingClientRect();
        const centerX = rect.left + rect.width / 2;
        const centerY = rect.top + rect.height / 2;
        this.startAngle = Math.atan2(event.clientY - centerY, event.clientX - centerX);
        event.preventDefault();
        event.stopPropagation();
      }

      handleMouseMove(event) {
        if (this.isDragging) {
          this.currentTransform.x = event.clientX - this.startX;
          this.currentTransform.y = event.clientY - this.startY;
          this.updateTransform();
        } else if (this.isResizing) {
          const deltaX = event.clientX - this.startX;
          const deltaY = event.clientY - this.startY;
          const delta = Math.max(deltaX, deltaY);
          this.currentTransform.scale = Math.max(0.1, (this.startWidth + delta) / this.startWidth);
          this.updateTransform();
        } else if (this.isRotating) {
          const rect = this.querySelector('#ai-user-image-{{ ai_gen_id }}').getBoundingClientRect();
          const centerX = rect.left + rect.width / 2;
          const centerY = rect.top + rect.height / 2;
          const currentAngle = Math.atan2(event.clientY - centerY, event.clientX - centerX);
          this.currentTransform.rotation += (currentAngle - this.startAngle) * (180 / Math.PI);
          this.startAngle = currentAngle;
          this.updateTransform();
        }
      }

      stopInteraction() {
        this.isDragging = false;
        this.isResizing = false;
        this.isRotating = false;
        
        if (this.userImage) {
          this.storeImageData(this.querySelector('#ai-user-img-{{ ai_gen_id }}').src);
        }
      }

      updateTransform() {
        const userImageContainer = this.querySelector('#ai-user-image-{{ ai_gen_id }}');
        if (userImageContainer) {
          const transform = `translate(calc(-50% + ${this.currentTransform.x}px), calc(-50% + ${this.currentTransform.y}px)) scale(${this.currentTransform.scale}) rotate(${this.currentTransform.rotation}deg)`;
          userImageContainer.style.transform = transform;
        }
      }
    }

    customElements.define('product-customizer-{{ ai_gen_id }}', ProductCustomizer{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Product customizer",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Admin Images"
    },
    {
      "type": "image_picker",
      "id": "shape_image",
      "label": "Shape mask image"
    },
    {
      "type": "image_picker",
      "id": "overlay_image",
      "label": "Overlay image"
    },
    {
      "type": "header",
      "content": "Styling"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Button color",
      "default": "#007cba"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button text color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "button_hover_color",
      "label": "Button hover color",
      "default": "#005a87"
    },
    {
      "type": "color",
      "id": "title_color",
      "label": "Title color",
      "default": "#333333"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 16,
      "max": 48,
      "step": 2,
      "unit": "px",
      "label": "Title size",
      "default": 28
    },
    {
      "type": "color",
      "id": "price_color",
      "label": "Price color",
      "default": "#007cba"
    },
    {
      "type": "range",
      "id": "price_size",
      "min": 14,
      "max": 32,
      "step": 2,
      "unit": "px",
      "label": "Price size",
      "default": 24
    }
  ],
  "presets": [
    {
      "name": "Product customizer"
    }
  ]
}
{% endschema %}