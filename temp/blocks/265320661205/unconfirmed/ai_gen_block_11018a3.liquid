{% doc %}
  @prompt
    a name plate section where user can see their name on the name plate (product first image will be used as name plate image layer) by typing using a text box in the left this, add option to select product in the customizer, cursive fonts not looks exact, font is working now, show font option with all atleast 100 nameplate used fonts in the customizer not to the user, most of the fonts under one category seems similar, all fonts of one category are same do not change the look, move font selection to admin theme customizer and should have google fonts, replace all fonts with all adobe fonts , make all fonts to wirk correctly, add x and y position option for moving text over anywhere on the board, move postioning option to the admin area in the customizer , add one more text option, show product title, variants in button style with separate option grouper in one line, price (should update with variant selection), make sure variant buttons selectable and updates the price accordingly, variant button not working, variant button still not selectable and price not changing, variants not working, reset variants functionality
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  @import url('https://fonts.googleapis.com/css2?family=Playfair+Display:ital,wght@0,400;0,700;1,400&family=Montserrat:wght@300;400;600;700&family=Dancing+Script:wght@400;700&family=Cinzel:wght@400;600&family=Great+Vibes&family=Pacifico&family=Lobster&family=Righteous&family=Oswald:wght@300;400;600&family=Raleway:wght@300;400;600&family=Lato:wght@300;400;700&family=Open+Sans:wght@300;400;600&family=Roboto:wght@300;400;500;700&family=Poppins:wght@300;400;600;700&family=Merriweather:wght@300;400;700&family=Source+Sans+Pro:wght@300;400;600&family=Ubuntu:wght@300;400;500;700&family=Nunito:wght@300;400;600;700&family=Work+Sans:wght@300;400;500;600&family=Crimson+Text:ital,wght@0,400;0,600;1,400&family=Libre+Baskerville:ital,wght@0,400;0,700;1,400&family=PT+Serif:ital,wght@0,400;0,700;1,400&family=Cormorant+Garamond:ital,wght@0,300;0,400;0,600;1,400&family=EB+Garamond:ital,wght@0,400;0,600;1,400&family=Abril+Fatface&family=Bebas+Neue&family=Anton&family=Fjalla+One&family=Russo+One&family=Permanent+Marker&family=Kalam:wght@300;400;700&family=Caveat:wght@400;700&family=Satisfy&family=Amatic+SC:wght@400;700&family=Indie+Flower&family=Shadows+Into+Light&family=Handlee&family=Architects+Daughter&family=Patrick+Hand&family=Kaushan+Script&family=Allura&family=Alex+Brush&family=Tangerine:wght@400;700&family=Sacramento&family=Pinyon+Script&family=Courgette&family=Parisienne&family=Yellowtail&family=Damion&family=Grand+Hotel&family=Allison&family=Style+Script&family=Euphoria+Script&family=Mr+De+Haviland&family=Clicker+Script&family=Herr+Von+Muellerhoff&family=Monsieur+La+Doulaise&family=Rouge+Script&family=Engagement&family=Marck+Script&family=Qwigley&family=Homemade+Apple&family=Covered+By+Your+Grace&family=Coming+Soon&family=Schoolbell&family=Reenie+Beanie&family=Just+Me+Again+Down+Here&family=Waiting+for+the+Sunrise&family=Nothing+You+Could+Do&family=Crafty+Girls&family=Rock+Salt&family=Special+Elite&family=Orbitron:wght@400;700;900&family=Exo+2:wght@300;400;600;700&family=Rajdhani:wght@300;400;600;700&family=Titillium+Web:wght@300;400;600;700&family=Play:wght@400;700&family=Audiowide&family=Electrolize&family=Michroma&family=Syncopate:wght@400;700&family=Aldrich&family=Jura:wght@300;400;600;700&family=Quicksand:wght@300;400;500;600;700&family=Varela+Round&family=Comfortaa:wght@300;400;700&family=Dosis:wght@300;400;600;700&family=Rubik:wght@300;400;500;600;700&family=Karla:wght@300;400;600;700&family=Hind:wght@300;400;500;600;700&family=Fira+Sans:wght@300;400;500;600;700&family=Oxygen:wght@300;400;700&family=Noto+Sans:wght@300;400;500;600;700&family=PT+Sans:wght@400;700&family=Muli:wght@300;400;600;700&family=Barlow:wght@300;400;500;600;700&family=Inter:wght@300;400;500;600;700&family=DM+Sans:wght@400;500;700&family=Manrope:wght@300;400;500;600;700&family=Space+Grotesk:wght@300;400;500;600;700&display=swap');

  .ai-nameplate-container-{{ ai_gen_id }} {
    display: flex;
    gap: 40px;
    max-width: 1200px;
    margin: 0 auto;
    padding: 40px 20px;
    background-color: {{ block.settings.background_color }};
  }

  .ai-nameplate-controls-{{ ai_gen_id }} {
    flex: 1;
    min-width: 350px;
  }

  .ai-nameplate-preview-{{ ai_gen_id }} {
    flex: 1;
    position: relative;
  }

  .ai-nameplate-product-info-{{ ai_gen_id }} {
    margin-bottom: 32px;
    padding-bottom: 24px;
    border-bottom: 1px solid {{ block.settings.border_color }};
  }

  .ai-nameplate-product-title-{{ ai_gen_id }} {
    font-size: 24px;
    font-weight: 700;
    color: {{ block.settings.text_color }};
    margin: 0 0 16px 0;
    line-height: 1.3;
  }

  .ai-nameplate-product-price-{{ ai_gen_id }} {
    font-size: 20px;
    font-weight: 600;
    color: {{ block.settings.price_color }};
    margin-bottom: 20px;
  }

  .ai-nameplate-variant-group-{{ ai_gen_id }} {
    margin-bottom: 20px;
  }

  .ai-nameplate-variant-label-{{ ai_gen_id }} {
    display: block;
    font-size: 14px;
    font-weight: 600;
    color: {{ block.settings.text_color }};
    margin-bottom: 8px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .ai-nameplate-variant-options-{{ ai_gen_id }} {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
  }

  .ai-nameplate-variant-button-{{ ai_gen_id }} {
    padding: 8px 16px;
    border: 2px solid {{ block.settings.variant_border_color }};
    background-color: {{ block.settings.variant_bg_color }};
    color: {{ block.settings.variant_text_color }};
    border-radius: 6px;
    cursor: pointer;
    font-size: 14px;
    font-weight: 500;
    transition: all 0.2s ease;
    min-width: 60px;
    text-align: center;
    user-select: none;
    outline: none;
  }

  .ai-nameplate-variant-button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.variant_hover_bg_color }};
    border-color: {{ block.settings.variant_hover_border_color }};
    color: {{ block.settings.variant_hover_text_color }};
    transform: translateY(-1px);
  }

  .ai-nameplate-variant-button-{{ ai_gen_id }}.selected {
    background-color: {{ block.settings.variant_selected_bg_color }};
    border-color: {{ block.settings.variant_selected_border_color }};
    color: {{ block.settings.variant_selected_text_color }};
    box-shadow: 0 2px 8px rgba(0, 122, 204, 0.3);
  }

  .ai-nameplate-variant-button-{{ ai_gen_id }}.unavailable {
    opacity: 0.4;
    cursor: not-allowed;
    background-color: #f5f5f5;
    color: #999;
    border-color: #ddd;
  }

  .ai-nameplate-variant-button-{{ ai_gen_id }}.unavailable::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 10%;
    right: 10%;
    height: 1px;
    background-color: #999;
    transform: translateY(-50%);
  }

  .ai-nameplate-input-group-{{ ai_gen_id }} {
    margin-bottom: 24px;
  }

  .ai-nameplate-label-{{ ai_gen_id }} {
    display: block;
    margin-bottom: 8px;
    font-weight: 600;
    color: {{ block.settings.text_color }};
    font-size: 16px;
  }

  .ai-nameplate-input-{{ ai_gen_id }} {
    width: 100%;
    padding: 12px 16px;
    border: 2px solid {{ block.settings.input_border_color }};
    border-radius: 8px;
    font-size: 16px;
    background-color: {{ block.settings.input_background_color }};
    color: {{ block.settings.input_text_color }};
  }

  .ai-nameplate-input-{{ ai_gen_id }}:focus {
    outline: none;
    border-color: {{ block.settings.input_focus_color }};
    box-shadow: 0 0 0 3px {{ block.settings.input_focus_color }}33;
  }

  .ai-nameplate-image-container-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    max-width: 500px;
    margin: 0 auto;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
  }

  .ai-nameplate-image-{{ ai_gen_id }} {
    width: 100%;
    height: auto;
    display: block;
  }

  .ai-nameplate-image-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 400px;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  .ai-nameplate-image-placeholder-{{ ai_gen_id }} svg {
    width: 100%;
    height: 100%;
    max-width: 200px;
    max-height: 200px;
    opacity: 0.3;
  }

  .ai-nameplate-text-overlay-{{ ai_gen_id }} {
    position: absolute;
    top: {{ block.settings.text_position_y }}%;
    left: {{ block.settings.text_position_x }}%;
    transform: translate(-50%, -50%);
    text-align: center;
    white-space: nowrap;
    pointer-events: none;
    z-index: 2;
    font-display: swap;
    transition: all 0.3s ease;
  }

  .ai-nameplate-text-line1-{{ ai_gen_id }} {
    display: block;
    font-family: {{ block.settings.nameplate_font.family }}, {{ block.settings.nameplate_font.fallback_families }};
    font-weight: {{ block.settings.nameplate_font.weight }};
    font-style: {{ block.settings.nameplate_font.style }};
    font-size: {{ block.settings.font_size }}px;
    color: {{ block.settings.font_color }};
    text-shadow: {{ block.settings.text_shadow_x }}px {{ block.settings.text_shadow_y }}px {{ block.settings.text_shadow_blur }}px {{ block.settings.text_shadow_color }};
    letter-spacing: {{ block.settings.letter_spacing }}px;
    line-height: 1.2;
    margin-bottom: {{ block.settings.line_spacing }}px;
  }

  .ai-nameplate-text-line2-{{ ai_gen_id }} {
    display: block;
    font-family: {{ block.settings.nameplate_font_2.family }}, {{ block.settings.nameplate_font_2.fallback_families }};
    font-weight: {{ block.settings.nameplate_font_2.weight }};
    font-style: {{ block.settings.nameplate_font_2.style }};
    font-size: {{ block.settings.font_size_2 }}px;
    color: {{ block.settings.font_color_2 }};
    text-shadow: {{ block.settings.text_shadow_x_2 }}px {{ block.settings.text_shadow_y_2 }}px {{ block.settings.text_shadow_blur_2 }}px {{ block.settings.text_shadow_color_2 }};
    letter-spacing: {{ block.settings.letter_spacing_2 }}px;
    line-height: 1.2;
  }

  .ai-nameplate-empty-state-{{ ai_gen_id }} {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    padding: 12px 20px;
    background-color: rgba(255, 255, 255, 0.9);
    border-radius: 6px;
    font-size: 14px;
    color: #666;
    text-align: center;
    pointer-events: none;
  }

  @media screen and (max-width: 768px) {
    .ai-nameplate-container-{{ ai_gen_id }} {
      flex-direction: column;
      gap: 24px;
      padding: 20px;
    }

    .ai-nameplate-variant-options-{{ ai_gen_id }} {
      gap: 6px;
    }

    .ai-nameplate-variant-button-{{ ai_gen_id }} {
      padding: 6px 12px;
      font-size: 13px;
      min-width: 50px;
    }

    .ai-nameplate-text-line1-{{ ai_gen_id }} {
      font-size: calc({{ block.settings.font_size }}px * 0.8);
    }

    .ai-nameplate-text-line2-{{ ai_gen_id }} {
      font-size: calc({{ block.settings.font_size_2 }}px * 0.8);
    }
  }
{% endstyle %}

<nameplate-customizer-{{ ai_gen_id }}
  class="ai-nameplate-container-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-nameplate-controls-{{ ai_gen_id }}">
    {% if block.settings.selected_product %}
      <div class="ai-nameplate-product-info-{{ ai_gen_id }}">
        <h2 class="ai-nameplate-product-title-{{ ai_gen_id }}">
          {{ block.settings.selected_product.title }}
        </h2>
        
        <div class="ai-nameplate-product-price-{{ ai_gen_id }}" id="product-price-{{ ai_gen_id }}">
          {{ block.settings.selected_product.price | money }}
        </div>

        {% unless block.settings.selected_product.has_only_default_variant %}
          {% for option in block.settings.selected_product.options_with_values %}
            <div class="ai-nameplate-variant-group-{{ ai_gen_id }}">
              <label class="ai-nameplate-variant-label-{{ ai_gen_id }}">
                {{ option.name }}
              </label>
              <div class="ai-nameplate-variant-options-{{ ai_gen_id }}" data-option-name="{{ option.name }}">
                {% for value in option.values %}
                  <button
                    type="button"
                    class="ai-nameplate-variant-button-{{ ai_gen_id }} {% if forloop.first %}selected{% endif %}"
                    data-option-value="{{ value }}"
                    data-option-name="{{ option.name }}"
                  >
                    {{ value }}
                  </button>
                {% endfor %}
              </div>
            </div>
          {% endfor %}
        {% endunless %}
      </div>
    {% endif %}

    <div class="ai-nameplate-input-group-{{ ai_gen_id }}">
      <label for="nameplate-text1-{{ ai_gen_id }}" class="ai-nameplate-label-{{ ai_gen_id }}">
        {{ block.settings.input_label_1 }}
      </label>
      <input
        type="text"
        id="nameplate-text1-{{ ai_gen_id }}"
        class="ai-nameplate-input-{{ ai_gen_id }}"
        placeholder="{{ block.settings.input_placeholder_1 }}"
        maxlength="50"
      >
    </div>

    <div class="ai-nameplate-input-group-{{ ai_gen_id }}">
      <label for="nameplate-text2-{{ ai_gen_id }}" class="ai-nameplate-label-{{ ai_gen_id }}">
        {{ block.settings.input_label_2 }}
      </label>
      <input
        type="text"
        id="nameplate-text2-{{ ai_gen_id }}"
        class="ai-nameplate-input-{{ ai_gen_id }}"
        placeholder="{{ block.settings.input_placeholder_2 }}"
        maxlength="50"
      >
    </div>
  </div>

  <div class="ai-nameplate-preview-{{ ai_gen_id }}">
    <div class="ai-nameplate-image-container-{{ ai_gen_id }}">
      {% if block.settings.selected_product and block.settings.selected_product.featured_image %}
        <img
          src="{{ block.settings.selected_product.featured_image | image_url: width: 800 }}"
          alt="{{ block.settings.selected_product.featured_image.alt | escape }}"
          class="ai-nameplate-image-{{ ai_gen_id }}"
          width="{{ block.settings.selected_product.featured_image.width }}"
          height="{{ block.settings.selected_product.featured_image.height }}"
          loading="lazy"
          id="nameplate-image-{{ ai_gen_id }}"
        >
      {% else %}
        <div class="ai-nameplate-image-placeholder-{{ ai_gen_id }}">
          {{ 'product-1' | placeholder_svg_tag }}
          <div class="ai-nameplate-empty-state-{{ ai_gen_id }}">
            Select a product to preview
          </div>
        </div>
      {% endif %}
      
      <div class="ai-nameplate-text-overlay-{{ ai_gen_id }}" id="nameplate-overlay-{{ ai_gen_id }}">
        <span class="ai-nameplate-text-line1-{{ ai_gen_id }}" id="nameplate-line1-{{ ai_gen_id }}">
          {{ block.settings.preview_text_1 }}
        </span>
        <span class="ai-nameplate-text-line2-{{ ai_gen_id }}" id="nameplate-line2-{{ ai_gen_id }}">
          {{ block.settings.preview_text_2 }}
        </span>
      </div>
    </div>
  </div>
</nameplate-customizer-{{ ai_gen_id }}>

{% if block.settings.selected_product %}
  <script type="application/json" id="product-data-{{ ai_gen_id }}">
    {{ block.settings.selected_product | json }}
  </script>
{% endif %}

<script>
  (function() {
    class NameplateCustomizer{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.selectedOptions = {};
        this.currentVariant = null;
        this.productData = null;
      }

      connectedCallback() {
        this.setupElements();
        this.loadProductData();
        this.setupTextInputs();
        this.setupVariants();
      }

      setupElements() {
        this.input1 = this.querySelector('#nameplate-text1-{{ ai_gen_id }}');
        this.input2 = this.querySelector('#nameplate-text2-{{ ai_gen_id }}');
        this.line1 = this.querySelector('#nameplate-line1-{{ ai_gen_id }}');
        this.line2 = this.querySelector('#nameplate-line2-{{ ai_gen_id }}');
        this.priceElement = this.querySelector('#product-price-{{ ai_gen_id }}');
        this.imageElement = this.querySelector('#nameplate-image-{{ ai_gen_id }}');
      }

      loadProductData() {
        const productDataElement = document.querySelector('#product-data-{{ ai_gen_id }}');
        if (productDataElement) {
          try {
            this.productData = JSON.parse(productDataElement.textContent);
          } catch (e) {
            console.error('Failed to parse product data:', e);
          }
        }
      }

      setupTextInputs() {
        if (this.input1 && this.line1) {
          this.input1.addEventListener('input', (e) => {
            const text = e.target.value.trim();
            this.line1.textContent = text || '{{ block.settings.preview_text_1 }}';
          });
        }

        if (this.input2 && this.line2) {
          this.input2.addEventListener('input', (e) => {
            const text = e.target.value.trim();
            this.line2.textContent = text || '{{ block.settings.preview_text_2 }}';
          });
        }
      }

      setupVariants() {
        if (!this.productData || !this.productData.variants) return;

        this.currentVariant = this.productData.variants[0];
        
        if (this.productData.options_with_values) {
          this.productData.options_with_values.forEach((option, index) => {
            this.selectedOptions[option.name] = this.currentVariant.options[index];
          });
        }

        const variantButtons = this.querySelectorAll('.ai-nameplate-variant-button-{{ ai_gen_id }}');
        
        variantButtons.forEach(button => {
          button.addEventListener('click', (e) => {
            e.preventDefault();
            
            const optionName = button.dataset.optionName;
            const optionValue = button.dataset.optionValue;
            
            this.selectedOptions[optionName] = optionValue;
            
            const optionGroup = button.closest('.ai-nameplate-variant-options-{{ ai_gen_id }}');
            optionGroup.querySelectorAll('.ai-nameplate-variant-button-{{ ai_gen_id }}').forEach(btn => {
              btn.classList.remove('selected');
            });
            button.classList.add('selected');
            
            this.updateVariant();
          });
        });

        this.updatePrice();
      }

      updateVariant() {
        if (!this.productData) return;

        const matchingVariant = this.productData.variants.find(variant => {
          return variant.options.every((option, index) => {
            const optionName = this.productData.options_with_values[index].name;
            return this.selectedOptions[optionName] === option;
          });
        });

        if (matchingVariant) {
          this.currentVariant = matchingVariant;
          this.updatePrice();
          this.updateImage();
        }
      }

      updatePrice() {
        if (!this.currentVariant || !this.priceElement) return;
        
        const price = this.formatMoney(this.currentVariant.price);
        const comparePrice = this.currentVariant.compare_at_price;
        
        if (comparePrice && comparePrice > this.currentVariant.price) {
          const comparePriceFormatted = this.formatMoney(comparePrice);
          this.priceElement.innerHTML = `<span style="color: #999; text-decoration: line-through; margin-right: 8px;">${comparePriceFormatted}</span>${price}`;
        } else {
          this.priceElement.textContent = price;
        }
      }

      updateImage() {
        if (!this.currentVariant || !this.imageElement) return;
        
        if (this.currentVariant.featured_image) {
          const imageUrl = this.currentVariant.featured_image.src.replace(/\.(jpg|jpeg|gif|png|bmp|bitmap|tiff|tif)(\?.*)?$/i, '_800x.$1$2');
          this.imageElement.src = imageUrl;
          this.imageElement.alt = this.currentVariant.featured_image.alt || this.productData.title;
        }
      }

      formatMoney(cents) {
        const amount = cents / 100;
        return new Intl.NumberFormat('en-IN', {
          style: 'currency',
          currency: 'INR'
        }).format(amount);
      }
    }

    customElements.define('nameplate-customizer-{{ ai_gen_id }}', NameplateCustomizer{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Name plate customizer",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Product selection"
    },
    {
      "type": "product",
      "id": "selected_product",
      "label": "Select product"
    },
    {
      "type": "header",
      "content": "First text line"
    },
    {
      "type": "text",
      "id": "input_label_1",
      "label": "First input label",
      "default": "Enter first line"
    },
    {
      "type": "text",
      "id": "input_placeholder_1",
      "label": "First input placeholder",
      "default": "First line text..."
    },
    {
      "type": "text",
      "id": "preview_text_1",
      "label": "Default first line text",
      "default": "Your Name"
    },
    {
      "type": "font_picker",
      "id": "nameplate_font",
      "label": "First line font",
      "default": "helvetica_n4"
    },
    {
      "type": "range",
      "id": "font_size",
      "min": 20,
      "max": 120,
      "step": 2,
      "unit": "px",
      "label": "First line font size",
      "default": 48
    },
    {
      "type": "color",
      "id": "font_color",
      "label": "First line text color",
      "default": "#000000"
    },
    {
      "type": "range",
      "id": "letter_spacing",
      "min": -5,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "First line letter spacing",
      "default": 2
    },
    {
      "type": "range",
      "id": "text_shadow_x",
      "min": -10,
      "max": 10,
      "step": 1,
      "unit": "px",
      "label": "First line shadow X offset",
      "default": 2
    },
    {
      "type": "range",
      "id": "text_shadow_y",
      "min": -10,
      "max": 10,
      "step": 1,
      "unit": "px",
      "label": "First line shadow Y offset",
      "default": 2
    },
    {
      "type": "range",
      "id": "text_shadow_blur",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "First line shadow blur",
      "default": 4
    },
    {
      "type": "color",
      "id": "text_shadow_color",
      "label": "First line shadow color",
      "default": "#00000050"
    },
    {
      "type": "header",
      "content": "Second text line"
    },
    {
      "type": "text",
      "id": "input_label_2",
      "label": "Second input label",
      "default": "Enter second line"
    },
    {
      "type": "text",
      "id": "input_placeholder_2",
      "label": "Second input placeholder",
      "default": "Second line text..."
    },
    {
      "type": "text",
      "id": "preview_text_2",
      "label": "Default second line text",
      "default": "Title"
    },
    {
      "type": "font_picker",
      "id": "nameplate_font_2",
      "label": "Second line font",
      "default": "helvetica_n4"
    },
    {
      "type": "range",
      "id": "font_size_2",
      "min": 16,
      "max": 80,
      "step": 2,
      "unit": "px",
      "label": "Second line font size",
      "default": 32
    },
    {
      "type": "color",
      "id": "font_color_2",
      "label": "Second line text color",
      "default": "#666666"
    },
    {
      "type": "range",
      "id": "letter_spacing_2",
      "min": -5,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Second line letter spacing",
      "default": 1
    },
    {
      "type": "range",
      "id": "text_shadow_x_2",
      "min": -10,
      "max": 10,
      "step": 1,
      "unit": "px",
      "label": "Second line shadow X offset",
      "default": 1
    },
    {
      "type": "range",
      "id": "text_shadow_y_2",
      "min": -10,
      "max": 10,
      "step": 1,
      "unit": "px",
      "label": "Second line shadow Y offset",
      "default": 1
    },
    {
      "type": "range",
      "id": "text_shadow_blur_2",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Second line shadow blur",
      "default": 2
    },
    {
      "type": "color",
      "id": "text_shadow_color_2",
      "label": "Second line shadow color",
      "default": "#00000030"
    },
    {
      "type": "header",
      "content": "Text positioning"
    },
    {
      "type": "range",
      "id": "text_position_x",
      "min": 10,
      "max": 90,
      "step": 1,
      "unit": "%",
      "label": "Horizontal position",
      "default": 50
    },
    {
      "type": "range",
      "id": "text_position_y",
      "min": 10,
      "max": 90,
      "step": 1,
      "unit": "%",
      "label": "Vertical position",
      "default": 50
    },
    {
      "type": "range",
      "id": "line_spacing",
      "min": 0,
      "max": 50,
      "step": 2,
      "unit": "px",
      "label": "Space between lines",
      "default": 8
    },
    {
      "type": "header",
      "content": "Variant button style"
    },
    {
      "type": "color",
      "id": "variant_bg_color",
      "label": "Button background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "variant_text_color",
      "label": "Button text color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "variant_border_color",
      "label": "Button border color",
      "default": "#cccccc"
    },
    {
      "type": "color",
      "id": "variant_hover_bg_color",
      "label": "Button hover background",
      "default": "#f5f5f5"
    },
    {
      "type": "color",
      "id": "variant_hover_text_color",
      "label": "Button hover text color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "variant_hover_border_color",
      "label": "Button hover border color",
      "default": "#999999"
    },
    {
      "type": "color",
      "id": "variant_selected_bg_color",
      "label": "Selected button background",
      "default": "#007acc"
    },
    {
      "type": "color",
      "id": "variant_selected_text_color",
      "label": "Selected button text color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "variant_selected_border_color",
      "label": "Selected button border color",
      "default": "#007acc"
    },
    {
      "type": "header",
      "content": "Layout colors"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Label text color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "price_color",
      "label": "Price color",
      "default": "#007acc"
    },
    {
      "type": "color",
      "id": "border_color",
      "label": "Border color",
      "default": "#e5e5e5"
    },
    {
      "type": "color",
      "id": "input_background_color",
      "label": "Input background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "input_text_color",
      "label": "Input text color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "input_border_color",
      "label": "Input border color",
      "default": "#cccccc"
    },
    {
      "type": "color",
      "id": "input_focus_color",
      "label": "Input focus color",
      "default": "#007acc"
    }
  ],
  "presets": [
    {
      "name": "Name plate customizer"
    }
  ]
}
{% endschema %}