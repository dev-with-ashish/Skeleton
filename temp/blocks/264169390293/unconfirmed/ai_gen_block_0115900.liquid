{% doc %}
  @prompt
    customizable product where admin have option to upload frame image and below that frame image another layer to which user will upload their image, the user image layer should be croped to the farame image overlay
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-custom-frame-{{ ai_gen_id }} {
    max-width: {{ block.settings.max_width }}px;
    margin: 0 auto;
    padding: 20px;
    background-color: {{ block.settings.background_color }};
    border-radius: {{ block.settings.border_radius }}px;
  }

  .ai-custom-frame__title-{{ ai_gen_id }} {
    font-size: {{ block.settings.title_size }}px;
    color: {{ block.settings.text_color }};
    text-align: center;
    margin-bottom: 20px;
    font-family: {{ settings.type_primary_font.family }};
  }

  .ai-custom-frame__preview-container-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    max-width: {{ block.settings.preview_width }}px;
    margin: 0 auto 30px;
    aspect-ratio: {{ block.settings.aspect_ratio }};
    border: 2px solid {{ block.settings.border_color }};
    border-radius: {{ block.settings.preview_border_radius }}px;
    overflow: hidden;
    background-color: #f8f8f8;
  }

  .ai-custom-frame__user-image-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    z-index: 1;
    {% if block.settings.frame_image %}
      mask: url('{{ block.settings.frame_image | image_url }}') no-repeat center/contain;
      -webkit-mask: url('{{ block.settings.frame_image | image_url }}') no-repeat center/contain;
      mask-composite: intersect;
      -webkit-mask-composite: source-in;
    {% endif %}
  }

  .ai-custom-frame__frame-image-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: contain;
    z-index: 2;
    pointer-events: none;
  }

  .ai-custom-frame__placeholder-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #f4f4f4;
    z-index: 0;
  }

  .ai-custom-frame__placeholder-{{ ai_gen_id }} svg {
    width: 60px;
    height: 60px;
    opacity: 0.3;
  }

  .ai-custom-frame__upload-section-{{ ai_gen_id }} {
    text-align: center;
    margin-bottom: 30px;
  }

  .ai-custom-frame__upload-label-{{ ai_gen_id }} {
    display: block;
    font-size: {{ block.settings.label_size }}px;
    color: {{ block.settings.text_color }};
    margin-bottom: 10px;
    font-family: {{ settings.type_primary_font.family }};
  }

  .ai-custom-frame__file-input-wrapper-{{ ai_gen_id }} {
    position: relative;
    display: inline-block;
  }

  .ai-custom-frame__file-input-{{ ai_gen_id }} {
    position: absolute;
    opacity: 0;
    width: 100%;
    height: 100%;
    cursor: pointer;
  }

  .ai-custom-frame__upload-button-{{ ai_gen_id }} {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    padding: 12px 24px;
    background-color: {{ block.settings.button_color }};
    color: {{ block.settings.button_text_color }};
    border: none;
    border-radius: {{ block.settings.button_border_radius }}px;
    font-size: {{ block.settings.button_text_size }}px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    font-family: {{ settings.type_primary_font.family }};
  }

  .ai-custom-frame__upload-button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.button_hover_color }};
  }

  .ai-custom-frame__file-name-{{ ai_gen_id }} {
    margin-top: 10px;
    font-size: 14px;
    color: {{ block.settings.text_color }};
    opacity: 0.7;
  }

  .ai-custom-frame__actions-{{ ai_gen_id }} {
    display: flex;
    gap: 15px;
    justify-content: center;
    flex-wrap: wrap;
  }

  .ai-custom-frame__action-button-{{ ai_gen_id }} {
    padding: 10px 20px;
    border: 1px solid {{ block.settings.secondary_button_border }};
    background-color: {{ block.settings.secondary_button_bg }};
    color: {{ block.settings.secondary_button_text }};
    border-radius: {{ block.settings.button_border_radius }}px;
    font-size: 14px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-family: {{ settings.type_primary_font.family }};
  }

  .ai-custom-frame__action-button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.secondary_button_hover_bg }};
    color: {{ block.settings.secondary_button_hover_text }};
  }

  .ai-custom-frame__empty-state-{{ ai_gen_id }} {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    font-size: 14px;
    color: #666;
    text-align: center;
    pointer-events: none;
    z-index: 3;
  }

  .ai-custom-frame__mask-preview-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.1);
    z-index: 0;
    {% if block.settings.frame_image %}
      mask: url('{{ block.settings.frame_image | image_url }}') no-repeat center/contain;
      -webkit-mask: url('{{ block.settings.frame_image | image_url }}') no-repeat center/contain;
      mask-composite: intersect;
      -webkit-mask-composite: source-in;
    {% endif %}
  }

  @media screen and (max-width: 749px) {
    .ai-custom-frame-{{ ai_gen_id }} {
      padding: 15px;
    }

    .ai-custom-frame__preview-container-{{ ai_gen_id }} {
      margin-bottom: 20px;
    }

    .ai-custom-frame__actions-{{ ai_gen_id }} {
      flex-direction: column;
      align-items: center;
    }

    .ai-custom-frame__action-button-{{ ai_gen_id }} {
      width: 100%;
      max-width: 200px;
    }
  }
{% endstyle %}

<custom-frame-{{ ai_gen_id }}
  class="ai-custom-frame-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  {% if block.settings.title != blank %}
    <h2 class="ai-custom-frame__title-{{ ai_gen_id }}">{{ block.settings.title }}</h2>
  {% endif %}

  <div class="ai-custom-frame__preview-container-{{ ai_gen_id }}">
    <div class="ai-custom-frame__placeholder-{{ ai_gen_id }}">
      {{ 'image' | placeholder_svg_tag }}
    </div>
    
    {% if block.settings.frame_image %}
      <div class="ai-custom-frame__mask-preview-{{ ai_gen_id }}"></div>
    {% endif %}
    
    <img
      class="ai-custom-frame__user-image-{{ ai_gen_id }}"
      style="display: none;"
      alt="User uploaded image"
    >
    
    {% if block.settings.frame_image %}
      <img
        src="{{ block.settings.frame_image | image_url: width: 800 }}"
        alt="Frame overlay"
        class="ai-custom-frame__frame-image-{{ ai_gen_id }}"
        width="{{ block.settings.frame_image.width }}"
        height="{{ block.settings.frame_image.height }}"
        loading="lazy"
      >
    {% else %}
      <div class="ai-custom-frame__empty-state-{{ ai_gen_id }}">
        Admin: Add a frame image in the block settings
      </div>
    {% endif %}
  </div>

  <div class="ai-custom-frame__upload-section-{{ ai_gen_id }}">
    <label class="ai-custom-frame__upload-label-{{ ai_gen_id }}">
      {{ block.settings.upload_label }}
    </label>
    
    <div class="ai-custom-frame__file-input-wrapper-{{ ai_gen_id }}">
      <input
        type="file"
        accept="image/*"
        class="ai-custom-frame__file-input-{{ ai_gen_id }}"
        aria-label="Upload your image"
      >
      <button class="ai-custom-frame__upload-button-{{ ai_gen_id }}" type="button">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
          <polyline points="7,10 12,15 17,10"></polyline>
          <line x1="12" y1="15" x2="12" y2="3"></line>
        </svg>
        {{ block.settings.button_text }}
      </button>
    </div>
    
    <div class="ai-custom-frame__file-name-{{ ai_gen_id }}" style="display: none;"></div>
  </div>

  <div class="ai-custom-frame__actions-{{ ai_gen_id }}">
    <button class="ai-custom-frame__action-button-{{ ai_gen_id }}" data-action="reset">
      Reset Image
    </button>
    <button class="ai-custom-frame__action-button-{{ ai_gen_id }}" data-action="download">
      Download Preview
    </button>
  </div>
</custom-frame-{{ ai_gen_id }}>

<script>
  (function() {
    class CustomFrame{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.fileInput = null;
        this.userImage = null;
        this.fileName = null;
        this.placeholder = null;
        this.maskPreview = null;
      }

      connectedCallback() {
        this.fileInput = this.querySelector('.ai-custom-frame__file-input-{{ ai_gen_id }}');
        this.userImage = this.querySelector('.ai-custom-frame__user-image-{{ ai_gen_id }}');
        this.fileName = this.querySelector('.ai-custom-frame__file-name-{{ ai_gen_id }}');
        this.placeholder = this.querySelector('.ai-custom-frame__placeholder-{{ ai_gen_id }}');
        this.maskPreview = this.querySelector('.ai-custom-frame__mask-preview-{{ ai_gen_id }}');
        
        this.setupEventListeners();
        this.updateMaskOnUserImage();
      }

      setupEventListeners() {
        this.fileInput.addEventListener('change', (e) => {
          this.handleFileUpload(e);
        });

        this.querySelectorAll('.ai-custom-frame__action-button-{{ ai_gen_id }}').forEach(button => {
          button.addEventListener('click', (e) => {
            const action = e.target.getAttribute('data-action');
            if (action === 'reset') {
              this.resetImage();
            } else if (action === 'download') {
              this.downloadPreview();
            }
          });
        });
      }

      updateMaskOnUserImage() {
        const frameImg = this.querySelector('.ai-custom-frame__frame-image-{{ ai_gen_id }}');
        if (frameImg && frameImg.src) {
          const maskUrl = frameImg.src;
          this.userImage.style.mask = `url('${maskUrl}') no-repeat center/contain`;
          this.userImage.style.webkitMask = `url('${maskUrl}') no-repeat center/contain`;
        }
      }

      handleFileUpload(event) {
        const file = event.target.files[0];
        if (!file) return;

        if (!file.type.startsWith('image/')) {
          alert('Please select an image file.');
          return;
        }

        const reader = new FileReader();
        reader.onload = (e) => {
          this.userImage.src = e.target.result;
          this.userImage.style.display = 'block';
          this.placeholder.style.display = 'none';
          if (this.maskPreview) {
            this.maskPreview.style.display = 'none';
          }
          this.fileName.textContent = file.name;
          this.fileName.style.display = 'block';
          this.updateMaskOnUserImage();
        };
        reader.readAsDataURL(file);
      }

      resetImage() {
        this.userImage.style.display = 'none';
        this.userImage.src = '';
        this.placeholder.style.display = 'flex';
        if (this.maskPreview) {
          this.maskPreview.style.display = 'block';
        }
        this.fileName.style.display = 'none';
        this.fileInput.value = '';
      }

      downloadPreview() {
        const container = this.querySelector('.ai-custom-frame__preview-container-{{ ai_gen_id }}');
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        
        const containerRect = container.getBoundingClientRect();
        canvas.width = containerRect.width * 2;
        canvas.height = containerRect.height * 2;
        
        ctx.scale(2, 2);

        const userImg = this.userImage;
        const frameImg = this.querySelector('.ai-custom-frame__frame-image-{{ ai_gen_id }}');

        if (userImg.style.display !== 'none' && userImg.src) {
          const img = new Image();
          img.onload = () => {
            if (frameImg && frameImg.src) {
              const maskImg = new Image();
              maskImg.onload = () => {
                const tempCanvas = document.createElement('canvas');
                const tempCtx = tempCanvas.getContext('2d');
                tempCanvas.width = containerRect.width;
                tempCanvas.height = containerRect.height;
                
                tempCtx.drawImage(img, 0, 0, containerRect.width, containerRect.height);
                tempCtx.globalCompositeOperation = 'destination-in';
                tempCtx.drawImage(maskImg, 0, 0, containerRect.width, containerRect.height);
                
                ctx.drawImage(tempCanvas, 0, 0);
                
                const frame = new Image();
                frame.onload = () => {
                  ctx.drawImage(frame, 0, 0, containerRect.width, containerRect.height);
                  this.triggerDownload(canvas);
                };
                frame.src = frameImg.src;
              };
              maskImg.src = frameImg.src;
            } else {
              ctx.drawImage(img, 0, 0, containerRect.width, containerRect.height);
              this.triggerDownload(canvas);
            }
          };
          img.src = userImg.src;
        } else {
          alert('Please upload an image first.');
        }
      }

      triggerDownload(canvas) {
        canvas.toBlob((blob) => {
          const url = URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = 'custom-framed-image.png';
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          URL.revokeObjectURL(url);
        });
      }
    }

    customElements.define('custom-frame-{{ ai_gen_id }}', CustomFrame{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Custom frame product",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Customize Your Frame"
    },
    {
      "type": "text",
      "id": "upload_label",
      "label": "Upload label",
      "default": "Upload your image"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Upload button text",
      "default": "Choose Image"
    },
    {
      "type": "header",
      "content": "Frame settings"
    },
    {
      "type": "image_picker",
      "id": "frame_image",
      "label": "Frame overlay image"
    },
    {
      "type": "select",
      "id": "aspect_ratio",
      "label": "Preview aspect ratio",
      "options": [
        {
          "value": "1/1",
          "label": "Square (1:1)"
        },
        {
          "value": "4/3",
          "label": "Standard (4:3)"
        },
        {
          "value": "3/2",
          "label": "Photo (3:2)"
        },
        {
          "value": "16/9",
          "label": "Widescreen (16:9)"
        }
      ],
      "default": "4/3"
    },
    {
      "type": "range",
      "id": "preview_width",
      "min": 200,
      "max": 600,
      "step": 20,
      "unit": "px",
      "label": "Preview width",
      "default": 400
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "max_width",
      "min": 400,
      "max": 1000,
      "step": 20,
      "unit": "px",
      "label": "Maximum width",
      "default": 600
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 30,
      "step": 2,
      "unit": "px",
      "label": "Container border radius",
      "default": 12
    },
    {
      "type": "range",
      "id": "preview_border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Preview border radius",
      "default": 8
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "border_color",
      "label": "Preview border color",
      "default": "#e0e0e0"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Upload button color",
      "default": "#000f9f"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Upload button text color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "button_hover_color",
      "label": "Upload button hover color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "secondary_button_bg",
      "label": "Action button background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "secondary_button_text",
      "label": "Action button text",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "secondary_button_border",
      "label": "Action button border",
      "default": "#e0e0e0"
    },
    {
      "type": "color",
      "id": "secondary_button_hover_bg",
      "label": "Action button hover background",
      "default": "#f5f5f5"
    },
    {
      "type": "color",
      "id": "secondary_button_hover_text",
      "label": "Action button hover text",
      "default": "#000000"
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 16,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Title size",
      "default": 24
    },
    {
      "type": "range",
      "id": "label_size",
      "min": 12,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Label size",
      "default": 16
    },
    {
      "type": "range",
      "id": "button_text_size",
      "min": 12,
      "max": 18,
      "step": 1,
      "unit": "px",
      "label": "Button text size",
      "default": 14
    },
    {
      "type": "range",
      "id": "button_border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Button border radius",
      "default": 6
    }
  ],
  "presets": [
    {
      "name": "Custom frame product"
    }
  ]
}
{% endschema %}