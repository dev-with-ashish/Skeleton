{% doc %}
  @prompt
    product section which offer admin to design frame adn user to upload image in that frame
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-custom-frame-{{ ai_gen_id }} {
    max-width: 100%;
    margin: 0 auto;
    padding: {{ block.settings.section_padding }}px;
    background-color: {{ block.settings.section_background }};
  }

  .ai-custom-frame__container-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 30px;
  }

  .ai-custom-frame__title-{{ ai_gen_id }} {
    font-family: {{ settings.type_primary_font.family }}, {{ settings.type_primary_font.fallback_families }};
    font-size: {{ block.settings.title_size }}px;
    color: {{ block.settings.title_color }};
    text-align: center;
    margin: 0;
  }

  .ai-custom-frame__description-{{ ai_gen_id }} {
    font-family: {{ settings.type_primary_font.family }}, {{ settings.type_primary_font.fallback_families }};
    font-size: {{ block.settings.description_size }}px;
    color: {{ block.settings.description_color }};
    text-align: center;
    max-width: 600px;
    line-height: 1.5;
  }

  .ai-custom-frame__preview-container-{{ ai_gen_id }} {
    position: relative;
    width: {{ block.settings.frame_width }}px;
    height: {{ block.settings.frame_height }}px;
    max-width: 100%;
    margin: 0 auto;
  }

  .ai-custom-frame__frame-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: {{ block.settings.frame_thickness }}px {{ block.settings.frame_style }} {{ block.settings.frame_color }};
    border-radius: {{ block.settings.frame_corner_radius }}px;
    background-color: {{ block.settings.frame_background }};
    box-shadow: {{ block.settings.frame_shadow_x }}px {{ block.settings.frame_shadow_y }}px {{ block.settings.frame_shadow_blur }}px {{ block.settings.frame_shadow_color }};
    z-index: 2;
  }

  .ai-custom-frame__inner-frame-{{ ai_gen_id }} {
    position: absolute;
    top: {{ block.settings.frame_thickness | plus: block.settings.inner_padding }}px;
    left: {{ block.settings.frame_thickness | plus: block.settings.inner_padding }}px;
    right: {{ block.settings.frame_thickness | plus: block.settings.inner_padding }}px;
    bottom: {{ block.settings.frame_thickness | plus: block.settings.inner_padding }}px;
    border-radius: {{ block.settings.frame_corner_radius | minus: block.settings.frame_thickness }}px;
    overflow: hidden;
    background-color: {{ block.settings.inner_background }};
  }

  .ai-custom-frame__image-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    object-fit: {{ block.settings.image_fit }};
    display: block;
  }

  .ai-custom-frame__placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    background-color: #f8f8f8;
    color: #666;
    text-align: center;
    padding: 20px;
    box-sizing: border-box;
  }

  .ai-custom-frame__placeholder-{{ ai_gen_id }} svg {
    width: 60px;
    height: 60px;
    margin-bottom: 15px;
    opacity: 0.5;
  }

  .ai-custom-frame__upload-section-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 20px;
    width: 100%;
    max-width: 400px;
  }

  .ai-custom-frame__upload-area-{{ ai_gen_id }} {
    width: 100%;
    padding: 30px;
    border: 2px dashed {{ block.settings.upload_border_color }};
    border-radius: {{ block.settings.upload_border_radius }}px;
    background-color: {{ block.settings.upload_background }};
    text-align: center;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .ai-custom-frame__upload-area-{{ ai_gen_id }}:hover {
    border-color: {{ block.settings.upload_hover_border }};
    background-color: {{ block.settings.upload_hover_background }};
  }

  .ai-custom-frame__upload-area-{{ ai_gen_id }}.dragover {
    border-color: {{ block.settings.upload_active_border }};
    background-color: {{ block.settings.upload_active_background }};
  }

  .ai-custom-frame__upload-input-{{ ai_gen_id }} {
    display: none;
  }

  .ai-custom-frame__upload-text-{{ ai_gen_id }} {
    font-family: {{ settings.type_primary_font.family }}, {{ settings.type_primary_font.fallback_families }};
    color: {{ block.settings.upload_text_color }};
    margin-bottom: 10px;
  }

  .ai-custom-frame__upload-button-{{ ai_gen_id }} {
    display: inline-block;
    padding: 12px 24px;
    background-color: {{ block.settings.button_color }};
    color: {{ block.settings.button_text_color }};
    border: none;
    border-radius: {{ block.settings.button_border_radius }}px;
    cursor: pointer;
    font-family: {{ settings.type_primary_font.family }}, {{ settings.type_primary_font.fallback_families }};
    font-size: 16px;
    transition: background-color 0.3s ease;
  }

  .ai-custom-frame__upload-button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.button_hover_color }};
  }

  .ai-custom-frame__controls-{{ ai_gen_id }} {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
    justify-content: center;
  }

  .ai-custom-frame__control-button-{{ ai_gen_id }} {
    padding: 8px 16px;
    background-color: {{ block.settings.control_button_color }};
    color: {{ block.settings.control_button_text_color }};
    border: 1px solid {{ block.settings.control_button_border }};
    border-radius: {{ block.settings.button_border_radius }}px;
    cursor: pointer;
    font-size: 14px;
    transition: all 0.3s ease;
  }

  .ai-custom-frame__control-button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.control_button_hover }};
  }

  .ai-custom-frame__info-{{ ai_gen_id }} {
    font-size: 14px;
    color: {{ block.settings.info_text_color }};
    text-align: center;
    margin-top: 10px;
  }

  @media screen and (max-width: 768px) {
    .ai-custom-frame__preview-container-{{ ai_gen_id }} {
      width: 100%;
      height: auto;
      aspect-ratio: {{ block.settings.frame_width }} / {{ block.settings.frame_height }};
    }

    .ai-custom-frame__upload-area-{{ ai_gen_id }} {
      padding: 20px;
    }

    .ai-custom-frame__controls-{{ ai_gen_id }} {
      flex-direction: column;
      align-items: center;
    }
  }
{% endstyle %}

<custom-frame-uploader-{{ ai_gen_id }}
  class="ai-custom-frame-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-custom-frame__container-{{ ai_gen_id }}">
    {% if block.settings.title != blank %}
      <h2 class="ai-custom-frame__title-{{ ai_gen_id }}">{{ block.settings.title }}</h2>
    {% endif %}

    {% if block.settings.description != blank %}
      <div class="ai-custom-frame__description-{{ ai_gen_id }}">{{ block.settings.description }}</div>
    {% endif %}

    <div class="ai-custom-frame__preview-container-{{ ai_gen_id }}">
      <div class="ai-custom-frame__frame-{{ ai_gen_id }}">
        <div class="ai-custom-frame__inner-frame-{{ ai_gen_id }}">
          <div class="ai-custom-frame__image-container-{{ ai_gen_id }}">
            <div class="ai-custom-frame__placeholder-{{ ai_gen_id }}">
              {{ 'image' | placeholder_svg_tag }}
              <p>Your image will appear here</p>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="ai-custom-frame__upload-section-{{ ai_gen_id }}">
      <div class="ai-custom-frame__upload-area-{{ ai_gen_id }}">
        <input
          type="file"
          class="ai-custom-frame__upload-input-{{ ai_gen_id }}"
          accept="image/*"
          id="upload-{{ ai_gen_id }}"
        >
        <div class="ai-custom-frame__upload-text-{{ ai_gen_id }}">
          <strong>{{ block.settings.upload_title }}</strong>
        </div>
        <p>{{ block.settings.upload_subtitle }}</p>
        <button
          type="button"
          class="ai-custom-frame__upload-button-{{ ai_gen_id }}"
          onclick="document.getElementById('upload-{{ ai_gen_id }}').click()"
        >
          {{ block.settings.upload_button_text }}
        </button>
      </div>

      <div class="ai-custom-frame__controls-{{ ai_gen_id }}" style="display: none;">
        <button type="button" class="ai-custom-frame__control-button-{{ ai_gen_id }}" data-action="zoom-in">
          Zoom In
        </button>
        <button type="button" class="ai-custom-frame__control-button-{{ ai_gen_id }}" data-action="zoom-out">
          Zoom Out
        </button>
        <button type="button" class="ai-custom-frame__control-button-{{ ai_gen_id }}" data-action="rotate">
          Rotate
        </button>
        <button type="button" class="ai-custom-frame__control-button-{{ ai_gen_id }}" data-action="reset">
          Reset
        </button>
        <button type="button" class="ai-custom-frame__control-button-{{ ai_gen_id }}" data-action="remove">
          Remove
        </button>
      </div>

      {% if block.settings.show_info %}
        <div class="ai-custom-frame__info-{{ ai_gen_id }}">
          {{ block.settings.info_text }}
        </div>
      {% endif %}
    </div>
  </div>
</custom-frame-uploader-{{ ai_gen_id }}>

<script>
  (function() {
    class CustomFrameUploader{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.currentImage = null;
        this.imageScale = 1;
        this.imageRotation = 0;
        this.imageX = 0;
        this.imageY = 0;
        this.isDragging = false;
      }

      connectedCallback() {
        this.uploadInput = this.querySelector('.ai-custom-frame__upload-input-{{ ai_gen_id }}');
        this.uploadArea = this.querySelector('.ai-custom-frame__upload-area-{{ ai_gen_id }}');
        this.imageContainer = this.querySelector('.ai-custom-frame__image-container-{{ ai_gen_id }}');
        this.controls = this.querySelector('.ai-custom-frame__controls-{{ ai_gen_id }}');
        this.placeholder = this.querySelector('.ai-custom-frame__placeholder-{{ ai_gen_id }}');

        this.setupEventListeners();
      }

      setupEventListeners() {
        this.uploadInput.addEventListener('change', (e) => this.handleFileSelect(e));
        
        this.uploadArea.addEventListener('dragover', (e) => {
          e.preventDefault();
          this.uploadArea.classList.add('dragover');
        });

        this.uploadArea.addEventListener('dragleave', () => {
          this.uploadArea.classList.remove('dragover');
        });

        this.uploadArea.addEventListener('drop', (e) => {
          e.preventDefault();
          this.uploadArea.classList.remove('dragover');
          const files = e.dataTransfer.files;
          if (files.length > 0) {
            this.handleFile(files[0]);
          }
        });

        this.controls.addEventListener('click', (e) => {
          if (e.target.classList.contains('ai-custom-frame__control-button-{{ ai_gen_id }}')) {
            this.handleControlAction(e.target.dataset.action);
          }
        });

        this.imageContainer.addEventListener('mousedown', (e) => this.startDrag(e));
        this.imageContainer.addEventListener('mousemove', (e) => this.drag(e));
        this.imageContainer.addEventListener('mouseup', () => this.endDrag());
        this.imageContainer.addEventListener('mouseleave', () => this.endDrag());
      }

      handleFileSelect(e) {
        const file = e.target.files[0];
        if (file) {
          this.handleFile(file);
        }
      }

      handleFile(file) {
        if (!file.type.startsWith('image/')) {
          alert('Please select an image file.');
          return;
        }

        const reader = new FileReader();
        reader.onload = (e) => {
          this.loadImage(e.target.result);
        };
        reader.readAsDataURL(file);
      }

      loadImage(src) {
        const img = document.createElement('img');
        img.src = src;
        img.className = 'ai-custom-frame__image-{{ ai_gen_id }}';
        img.style.transform = 'scale(1) rotate(0deg) translate(0px, 0px)';
        img.style.cursor = 'move';

        this.currentImage = img;
        this.imageScale = 1;
        this.imageRotation = 0;
        this.imageX = 0;
        this.imageY = 0;

        this.placeholder.style.display = 'none';
        this.imageContainer.innerHTML = '';
        this.imageContainer.appendChild(img);
        this.controls.style.display = 'flex';
      }

      handleControlAction(action) {
        if (!this.currentImage) return;

        switch (action) {
          case 'zoom-in':
            this.imageScale = Math.min(this.imageScale + 0.1, 3);
            break;
          case 'zoom-out':
            this.imageScale = Math.max(this.imageScale - 0.1, 0.1);
            break;
          case 'rotate':
            this.imageRotation += 90;
            break;
          case 'reset':
            this.imageScale = 1;
            this.imageRotation = 0;
            this.imageX = 0;
            this.imageY = 0;
            break;
          case 'remove':
            this.removeImage();
            return;
        }

        this.updateImageTransform();
      }

      updateImageTransform() {
        if (this.currentImage) {
          this.currentImage.style.transform = `scale(${this.imageScale}) rotate(${this.imageRotation}deg) translate(${this.imageX}px, ${this.imageY}px)`;
        }
      }

      startDrag(e) {
        if (!this.currentImage) return;
        this.isDragging = true;
        this.lastX = e.clientX;
        this.lastY = e.clientY;
        e.preventDefault();
      }

      drag(e) {
        if (!this.isDragging || !this.currentImage) return;

        const deltaX = e.clientX - this.lastX;
        const deltaY = e.clientY - this.lastY;

        this.imageX += deltaX;
        this.imageY += deltaY;

        this.updateImageTransform();

        this.lastX = e.clientX;
        this.lastY = e.clientY;
      }

      endDrag() {
        this.isDragging = false;
      }

      removeImage() {
        this.currentImage = null;
        this.imageContainer.innerHTML = '';
        this.placeholder.style.display = 'flex';
        this.controls.style.display = 'none';
        this.uploadInput.value = '';
      }
    }

    customElements.define('custom-frame-uploader-{{ ai_gen_id }}', CustomFrameUploader{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Custom frame uploader",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Design Your Custom Frame"
    },
    {
      "type": "textarea",
      "id": "description",
      "label": "Description",
      "default": "Upload your image and see how it looks in our custom frame. Drag, zoom, and rotate to get the perfect fit."
    },
    {
      "type": "text",
      "id": "upload_title",
      "label": "Upload title",
      "default": "Upload Your Image"
    },
    {
      "type": "text",
      "id": "upload_subtitle",
      "label": "Upload subtitle",
      "default": "Drag and drop or click to browse"
    },
    {
      "type": "text",
      "id": "upload_button_text",
      "label": "Upload button text",
      "default": "Choose File"
    },
    {
      "type": "checkbox",
      "id": "show_info",
      "label": "Show info text",
      "default": true
    },
    {
      "type": "textarea",
      "id": "info_text",
      "label": "Info text",
      "default": "Supported formats: JPG, PNG, GIF. Maximum file size: 10MB"
    },
    {
      "type": "header",
      "content": "Frame design"
    },
    {
      "type": "range",
      "id": "frame_width",
      "min": 200,
      "max": 600,
      "step": 20,
      "unit": "px",
      "label": "Frame width",
      "default": 400
    },
    {
      "type": "range",
      "id": "frame_height",
      "min": 200,
      "max": 600,
      "step": 20,
      "unit": "px",
      "label": "Frame height",
      "default": 300
    },
    {
      "type": "range",
      "id": "frame_thickness",
      "min": 5,
      "max": 50,
      "step": 5,
      "unit": "px",
      "label": "Frame thickness",
      "default": 20
    },
    {
      "type": "select",
      "id": "frame_style",
      "label": "Frame style",
      "options": [
        {
          "value": "solid",
          "label": "Solid"
        },
        {
          "value": "double",
          "label": "Double"
        },
        {
          "value": "groove",
          "label": "Groove"
        },
        {
          "value": "ridge",
          "label": "Ridge"
        }
      ],
      "default": "solid"
    },
    {
      "type": "color",
      "id": "frame_color",
      "label": "Frame color",
      "default": "#8B4513"
    },
    {
      "type": "color",
      "id": "frame_background",
      "label": "Frame background",
      "default": "#D2B48C"
    },
    {
      "type": "range",
      "id": "frame_corner_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Frame corner radius",
      "default": 4
    },
    {
      "type": "range",
      "id": "inner_padding",
      "min": 0,
      "max": 30,
      "step": 2,
      "unit": "px",
      "label": "Inner padding",
      "default": 10
    },
    {
      "type": "color",
      "id": "inner_background",
      "label": "Inner background",
      "default": "#FFFFFF"
    },
    {
      "type": "select",
      "id": "image_fit",
      "label": "Image fit",
      "options": [
        {
          "value": "cover",
          "label": "Cover"
        },
        {
          "value": "contain",
          "label": "Contain"
        },
        {
          "value": "fill",
          "label": "Fill"
        }
      ],
      "default": "cover"
    },
    {
      "type": "header",
      "content": "Frame shadow"
    },
    {
      "type": "range",
      "id": "frame_shadow_x",
      "min": -20,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Shadow X offset",
      "default": 4
    },
    {
      "type": "range",
      "id": "frame_shadow_y",
      "min": -20,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Shadow Y offset",
      "default": 4
    },
    {
      "type": "range",
      "id": "frame_shadow_blur",
      "min": 0,
      "max": 30,
      "step": 2,
      "unit": "px",
      "label": "Shadow blur",
      "default": 8
    },
    {
      "type": "color",
      "id": "frame_shadow_color",
      "label": "Shadow color",
      "default": "rgba(0,0,0,0.3)"
    },
    {
      "type": "header",
      "content": "Upload area"
    },
    {
      "type": "color",
      "id": "upload_background",
      "label": "Background color",
      "default": "#F8F9FA"
    },
    {
      "type": "color",
      "id": "upload_hover_background",
      "label": "Hover background color",
      "default": "#E9ECEF"
    },
    {
      "type": "color",
      "id": "upload_active_background",
      "label": "Active background color",
      "default": "#DEE2E6"
    },
    {
      "type": "color",
      "id": "upload_border_color",
      "label": "Border color",
      "default": "#CED4DA"
    },
    {
      "type": "color",
      "id": "upload_hover_border",
      "label": "Hover border color",
      "default": "#ADB5BD"
    },
    {
      "type": "color",
      "id": "upload_active_border",
      "label": "Active border color",
      "default": "#6C757D"
    },
    {
      "type": "range",
      "id": "upload_border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 8
    },
    {
      "type": "color",
      "id": "upload_text_color",
      "label": "Text color",
      "default": "#495057"
    },
    {
      "type": "header",
      "content": "Buttons"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Primary button color",
      "default": "#007BFF"
    },
    {
      "type": "color",
      "id": "button_hover_color",
      "label": "Primary button hover color",
      "default": "#0056B3"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Primary button text color",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "control_button_color",
      "label": "Control button color",
      "default": "#F8F9FA"
    },
    {
      "type": "color",
      "id": "control_button_hover",
      "label": "Control button hover color",
      "default": "#E9ECEF"
    },
    {
      "type": "color",
      "id": "control_button_text_color",
      "label": "Control button text color",
      "default": "#495057"
    },
    {
      "type": "color",
      "id": "control_button_border",
      "label": "Control button border color",
      "default": "#CED4DA"
    },
    {
      "type": "range",
      "id": "button_border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Button border radius",
      "default": 6
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "section_background",
      "label": "Section background",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "title_color",
      "label": "Title color",
      "default": "#212529"
    },
    {
      "type": "color",
      "id": "description_color",
      "label": "Description color",
      "default": "#6C757D"
    },
    {
      "type": "color",
      "id": "info_text_color",
      "label": "Info text color",
      "default": "#6C757D"
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 16,
      "max": 48,
      "step": 2,
      "unit": "px",
      "label": "Title size",
      "default": 32
    },
    {
      "type": "range",
      "id": "description_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Description size",
      "default": 16
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "section_padding",
      "min": 20,
      "max": 100,
      "step": 10,
      "unit": "px",
      "label": "Section padding",
      "default": 40
    }
  ],
  "presets": [
    {
      "name": "Custom frame uploader"
    }
  ]
}
{% endschema %}