{% doc %}
  @prompt
    a product page section with live editing option were admin can upload png from the theme customizer and the canvas will take the shape of uploaded png and below that transparent png shaped canvas there should be a layer where user uploaded image will be shown framed to that canvas option in the right for the user to upload image, the whole canvas should be of the shape and size of the uploaded png, the canvas should adapt the png shape, the 2nd layer should be live resizable so that user can resize the uploaded image, my frame overlay is a png of transparent glass but why the user uploaded image is not showing properly as it is shown in photoshop when i put both layers glass above and user image below the user image should be clearly visible below the overlay png depending on the transparency of the overlay frame png, only the part of the user uploaded image below the overlay png  should be shown, only the part of the user uploaded image below the overlay png  should be shown and also the user uploaded image should be visble as according to the transparency of the overlay png , why the user uploaded layer not showing clearly when you force it to adapt to the overlay png fix it, the user uploaded layer should be cropped to the overlay png shape
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-frame-editor-{{ ai_gen_id }} {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
    background-color: {{ block.settings.background_color }};
    border-radius: {{ block.settings.border_radius }}px;
  }

  .ai-frame-editor__title-{{ ai_gen_id }} {
    text-align: center;
    margin-bottom: 30px;
    color: {{ block.settings.text_color }};
    font-size: {{ block.settings.title_size }}px;
    font-weight: 600;
  }

  .ai-frame-editor__canvas-container-{{ ai_gen_id }} {
    position: relative;
    display: inline-block;
    margin: 0 auto 30px;
    background: #f8f8f8;
    border: 2px dashed #ddd;
    border-radius: 8px;
    min-width: 300px;
    min-height: 300px;
  }

  .ai-frame-editor__canvas-{{ ai_gen_id }} {
    position: relative;
    display: block;
    width: 100%;
    height: auto;
    max-width: 100%;
  }

  .ai-frame-editor__user-image-layer-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
    overflow: hidden;
    -webkit-mask-image: var(--mask-image);
    mask-image: var(--mask-image);
    -webkit-mask-size: 100% 100%;
    mask-size: 100% 100%;
    -webkit-mask-repeat: no-repeat;
    mask-repeat: no-repeat;
    -webkit-mask-position: center;
    mask-position: center;
  }

  .ai-frame-editor__user-image-{{ ai_gen_id }} {
    position: absolute;
    top: var(--user-image-y, 0);
    left: var(--user-image-x, 0);
    width: var(--user-image-width, 100%);
    height: var(--user-image-height, 100%);
    object-fit: cover;
    transform-origin: top left;
    cursor: move;
    transition: none;
  }

  .ai-frame-editor__overlay-layer-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 2;
    pointer-events: none;
  }

  .ai-frame-editor__overlay-image-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    object-fit: contain;
    display: block;
  }

  .ai-frame-editor__resize-handles-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 3;
    pointer-events: none;
  }

  .ai-frame-editor__resize-handle-{{ ai_gen_id }} {
    position: absolute;
    width: 12px;
    height: 12px;
    background: {{ block.settings.handle_color }};
    border: 2px solid #fff;
    border-radius: 50%;
    cursor: pointer;
    pointer-events: auto;
    transform: translate(-50%, -50%);
    box-shadow: 0 2px 4px rgba(0,0,0,0.3);
  }

  .ai-frame-editor__resize-handle-{{ ai_gen_id }}--nw {
    top: var(--user-image-y, 0);
    left: var(--user-image-x, 0);
    cursor: nw-resize;
  }

  .ai-frame-editor__resize-handle-{{ ai_gen_id }}--ne {
    top: var(--user-image-y, 0);
    left: calc(var(--user-image-x, 0) + var(--user-image-width, 100%));
    cursor: ne-resize;
  }

  .ai-frame-editor__resize-handle-{{ ai_gen_id }}--sw {
    top: calc(var(--user-image-y, 0) + var(--user-image-height, 100%));
    left: var(--user-image-x, 0);
    cursor: sw-resize;
  }

  .ai-frame-editor__resize-handle-{{ ai_gen_id }}--se {
    top: calc(var(--user-image-y, 0) + var(--user-image-height, 100%));
    left: calc(var(--user-image-x, 0) + var(--user-image-width, 100%));
    cursor: se-resize;
  }

  .ai-frame-editor__controls-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    gap: 20px;
    align-items: center;
  }

  .ai-frame-editor__upload-section-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 15px;
  }

  .ai-frame-editor__upload-button-{{ ai_gen_id }} {
    padding: 12px 24px;
    background-color: {{ block.settings.button_color }};
    color: {{ block.settings.button_text_color }};
    border: none;
    border-radius: {{ block.settings.button_border_radius }}px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s ease;
  }

  .ai-frame-editor__upload-button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.button_hover_color }};
  }

  .ai-frame-editor__upload-input-{{ ai_gen_id }} {
    display: none;
  }

  .ai-frame-editor__controls-panel-{{ ai_gen_id }} {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
    justify-content: center;
    align-items: center;
  }

  .ai-frame-editor__control-group-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 5px;
  }

  .ai-frame-editor__control-label-{{ ai_gen_id }} {
    font-size: 12px;
    color: {{ block.settings.text_color }};
    font-weight: 500;
  }

  .ai-frame-editor__control-input-{{ ai_gen_id }} {
    width: 80px;
    padding: 6px 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    text-align: center;
    font-size: 12px;
  }

  .ai-frame-editor__reset-button-{{ ai_gen_id }} {
    padding: 8px 16px;
    background-color: #666;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
  }

  .ai-frame-editor__reset-button-{{ ai_gen_id }}:hover {
    background-color: #555;
  }

  .ai-frame-editor__placeholder-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 40px;
    color: #999;
    text-align: center;
  }

  .ai-frame-editor__placeholder-{{ ai_gen_id }} svg {
    width: 100px;
    height: 100px;
    margin-bottom: 15px;
    opacity: 0.5;
  }

  .ai-frame-editor__empty-state-{{ ai_gen_id }} {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    padding: 8px 16px;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    border-radius: 4px;
    font-size: 12px;
    pointer-events: none;
  }

  .ai-frame-editor__mask-reference-{{ ai_gen_id }} {
    position: absolute;
    top: -9999px;
    left: -9999px;
    visibility: hidden;
    pointer-events: none;
  }
{% endstyle %}

<frame-editor-{{ ai_gen_id }}
  class="ai-frame-editor-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  {% if block.settings.title != blank %}
    <h2 class="ai-frame-editor__title-{{ ai_gen_id }}">{{ block.settings.title }}</h2>
  {% endif %}

  <div class="ai-frame-editor__canvas-container-{{ ai_gen_id }}">
    {% if block.settings.frame_overlay %}
      <div class="ai-frame-editor__canvas-{{ ai_gen_id }}">
        <div class="ai-frame-editor__user-image-layer-{{ ai_gen_id }}">
          <img
            class="ai-frame-editor__user-image-{{ ai_gen_id }}"
            style="display: none;"
            alt="User uploaded image"
          >
        </div>

        <div class="ai-frame-editor__overlay-layer-{{ ai_gen_id }}">
          <img
            src="{{ block.settings.frame_overlay | image_url: width: 800 }}"
            alt="Frame overlay"
            class="ai-frame-editor__overlay-image-{{ ai_gen_id }}"
            id="overlay-image-{{ ai_gen_id }}"
          >
        </div>

        <div class="ai-frame-editor__resize-handles-{{ ai_gen_id }}" style="display: none;">
          <div class="ai-frame-editor__resize-handle-{{ ai_gen_id }} ai-frame-editor__resize-handle-{{ ai_gen_id }}--nw"></div>
          <div class="ai-frame-editor__resize-handle-{{ ai_gen_id }} ai-frame-editor__resize-handle-{{ ai_gen_id }}--ne"></div>
          <div class="ai-frame-editor__resize-handle-{{ ai_gen_id }} ai-frame-editor__resize-handle-{{ ai_gen_id }}--sw"></div>
          <div class="ai-frame-editor__resize-handle-{{ ai_gen_id }} ai-frame-editor__resize-handle-{{ ai_gen_id }}--se"></div>
        </div>
      </div>

      <img
        src="{{ block.settings.frame_overlay | image_url: width: 800 }}"
        alt=""
        class="ai-frame-editor__mask-reference-{{ ai_gen_id }}"
        id="mask-reference-{{ ai_gen_id }}"
      >
    {% else %}
      <div class="ai-frame-editor__placeholder-{{ ai_gen_id }}">
        {{ 'image' | placeholder_svg_tag }}
        <p>Upload a frame overlay PNG to get started</p>
      </div>
      <div class="ai-frame-editor__empty-state-{{ ai_gen_id }}">
        Next, add a frame overlay image
      </div>
    {% endif %}
  </div>

  <div class="ai-frame-editor__controls-{{ ai_gen_id }}">
    <div class="ai-frame-editor__upload-section-{{ ai_gen_id }}">
      <button
        class="ai-frame-editor__upload-button-{{ ai_gen_id }}"
        onclick="document.getElementById('user-image-upload-{{ ai_gen_id }}').click()"
      >
        {{ block.settings.upload_button_text }}
      </button>
      <input
        type="file"
        id="user-image-upload-{{ ai_gen_id }}"
        class="ai-frame-editor__upload-input-{{ ai_gen_id }}"
        accept="image/*"
      >
    </div>

    <div class="ai-frame-editor__controls-panel-{{ ai_gen_id }}" style="display: none;">
      <div class="ai-frame-editor__control-group-{{ ai_gen_id }}">
        <label class="ai-frame-editor__control-label-{{ ai_gen_id }}">X Position</label>
        <input
          type="number"
          class="ai-frame-editor__control-input-{{ ai_gen_id }}"
          id="x-position-{{ ai_gen_id }}"
          value="0"
        >
      </div>
      <div class="ai-frame-editor__control-group-{{ ai_gen_id }}">
        <label class="ai-frame-editor__control-label-{{ ai_gen_id }}">Y Position</label>
        <input
          type="number"
          class="ai-frame-editor__control-input-{{ ai_gen_id }}"
          id="y-position-{{ ai_gen_id }}"
          value="0"
        >
      </div>
      <div class="ai-frame-editor__control-group-{{ ai_gen_id }}">
        <label class="ai-frame-editor__control-label-{{ ai_gen_id }}">Width</label>
        <input
          type="number"
          class="ai-frame-editor__control-input-{{ ai_gen_id }}"
          id="width-{{ ai_gen_id }}"
          value="100"
        >
      </div>
      <div class="ai-frame-editor__control-group-{{ ai_gen_id }}">
        <label class="ai-frame-editor__control-label-{{ ai_gen_id }}">Height</label>
        <input
          type="number"
          class="ai-frame-editor__control-input-{{ ai_gen_id }}"
          id="height-{{ ai_gen_id }}"
          value="100"
        >
      </div>
      <button class="ai-frame-editor__reset-button-{{ ai_gen_id }}">Reset</button>
    </div>
  </div>
</frame-editor-{{ ai_gen_id }}>

<script>
  (function() {
    class FrameEditor{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.userImage = null;
        this.isDragging = false;
        this.isResizing = false;
        this.dragStart = { x: 0, y: 0 };
        this.imagePosition = { x: 0, y: 0 };
        this.imageSize = { width: 100, height: 100 };
        this.resizeHandle = null;
      }

      connectedCallback() {
        this.setupEventListeners();
        this.setupMask();
        this.updateImageTransform();
      }

      setupMask() {
        const overlayImage = this.querySelector('#overlay-image-{{ ai_gen_id }}');
        const userImageLayer = this.querySelector('.ai-frame-editor__user-image-layer-{{ ai_gen_id }}');
        
        if (overlayImage && userImageLayer) {
          overlayImage.onload = () => {
            const maskUrl = `url(${overlayImage.src})`;
            userImageLayer.style.setProperty('--mask-image', maskUrl);
          };
          
          if (overlayImage.complete) {
            const maskUrl = `url(${overlayImage.src})`;
            userImageLayer.style.setProperty('--mask-image', maskUrl);
          }
        }
      }

      setupEventListeners() {
        const uploadInput = this.querySelector('#user-image-upload-{{ ai_gen_id }}');
        const userImageEl = this.querySelector('.ai-frame-editor__user-image-{{ ai_gen_id }}');
        const controlsPanel = this.querySelector('.ai-frame-editor__controls-panel-{{ ai_gen_id }}');
        const resizeHandles = this.querySelector('.ai-frame-editor__resize-handles-{{ ai_gen_id }}');
        const resetButton = this.querySelector('.ai-frame-editor__reset-button-{{ ai_gen_id }}');

        uploadInput.addEventListener('change', (e) => {
          const file = e.target.files[0];
          if (file) {
            const reader = new FileReader();
            reader.onload = (event) => {
              userImageEl.src = event.target.result;
              userImageEl.style.display = 'block';
              controlsPanel.style.display = 'flex';
              resizeHandles.style.display = 'block';
              this.resetImagePosition();
            };
            reader.readAsDataURL(file);
          }
        });

        userImageEl.addEventListener('mousedown', (e) => {
          e.preventDefault();
          this.isDragging = true;
          this.dragStart.x = e.clientX - this.imagePosition.x;
          this.dragStart.y = e.clientY - this.imagePosition.y;
          userImageEl.style.cursor = 'grabbing';
        });

        document.addEventListener('mousemove', (e) => {
          if (this.isDragging) {
            this.imagePosition.x = e.clientX - this.dragStart.x;
            this.imagePosition.y = e.clientY - this.dragStart.y;
            this.updateImageTransform();
            this.updateControlInputs();
          } else if (this.isResizing) {
            this.handleResize(e);
          }
        });

        document.addEventListener('mouseup', () => {
          this.isDragging = false;
          this.isResizing = false;
          this.resizeHandle = null;
          userImageEl.style.cursor = 'move';
        });

        this.querySelectorAll('.ai-frame-editor__resize-handle-{{ ai_gen_id }}').forEach(handle => {
          handle.addEventListener('mousedown', (e) => {
            e.preventDefault();
            e.stopPropagation();
            this.isResizing = true;
            this.resizeHandle = handle.classList.contains('ai-frame-editor__resize-handle-{{ ai_gen_id }}--nw') ? 'nw' :
                               handle.classList.contains('ai-frame-editor__resize-handle-{{ ai_gen_id }}--ne') ? 'ne' :
                               handle.classList.contains('ai-frame-editor__resize-handle-{{ ai_gen_id }}--sw') ? 'sw' : 'se';
            this.dragStart.x = e.clientX;
            this.dragStart.y = e.clientY;
          });
        });

        this.querySelector('#x-position-{{ ai_gen_id }}').addEventListener('input', (e) => {
          this.imagePosition.x = parseInt(e.target.value) || 0;
          this.updateImageTransform();
        });

        this.querySelector('#y-position-{{ ai_gen_id }}').addEventListener('input', (e) => {
          this.imagePosition.y = parseInt(e.target.value) || 0;
          this.updateImageTransform();
        });

        this.querySelector('#width-{{ ai_gen_id }}').addEventListener('input', (e) => {
          this.imageSize.width = parseInt(e.target.value) || 100;
          this.updateImageTransform();
        });

        this.querySelector('#height-{{ ai_gen_id }}').addEventListener('input', (e) => {
          this.imageSize.height = parseInt(e.target.value) || 100;
          this.updateImageTransform();
        });

        resetButton.addEventListener('click', () => {
          this.resetImagePosition();
        });
      }

      handleResize(e) {
        const deltaX = e.clientX - this.dragStart.x;
        const deltaY = e.clientY - this.dragStart.y;

        switch (this.resizeHandle) {
          case 'nw':
            this.imagePosition.x += deltaX;
            this.imagePosition.y += deltaY;
            this.imageSize.width -= deltaX;
            this.imageSize.height -= deltaY;
            break;
          case 'ne':
            this.imagePosition.y += deltaY;
            this.imageSize.width += deltaX;
            this.imageSize.height -= deltaY;
            break;
          case 'sw':
            this.imagePosition.x += deltaX;
            this.imageSize.width -= deltaX;
            this.imageSize.height += deltaY;
            break;
          case 'se':
            this.imageSize.width += deltaX;
            this.imageSize.height += deltaY;
            break;
        }

        this.imageSize.width = Math.max(20, this.imageSize.width);
        this.imageSize.height = Math.max(20, this.imageSize.height);

        this.dragStart.x = e.clientX;
        this.dragStart.y = e.clientY;

        this.updateImageTransform();
        this.updateControlInputs();
      }

      updateImageTransform() {
        const container = this.querySelector('.ai-frame-editor__canvas-container-{{ ai_gen_id }}');
        container.style.setProperty('--user-image-x', this.imagePosition.x + 'px');
        container.style.setProperty('--user-image-y', this.imagePosition.y + 'px');
        container.style.setProperty('--user-image-width', this.imageSize.width + '%');
        container.style.setProperty('--user-image-height', this.imageSize.height + '%');
      }

      updateControlInputs() {
        this.querySelector('#x-position-{{ ai_gen_id }}').value = Math.round(this.imagePosition.x);
        this.querySelector('#y-position-{{ ai_gen_id }}').value = Math.round(this.imagePosition.y);
        this.querySelector('#width-{{ ai_gen_id }}').value = Math.round(this.imageSize.width);
        this.querySelector('#height-{{ ai_gen_id }}').value = Math.round(this.imageSize.height);
      }

      resetImagePosition() {
        this.imagePosition = { x: 0, y: 0 };
        this.imageSize = { width: 100, height: 100 };
        this.updateImageTransform();
        this.updateControlInputs();
      }
    }

    customElements.define('frame-editor-{{ ai_gen_id }}', FrameEditor{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "PNG Frame Editor",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Customize Your Frame"
    },
    {
      "type": "image_picker",
      "id": "frame_overlay",
      "label": "Frame overlay PNG"
    },
    {
      "type": "text",
      "id": "upload_button_text",
      "label": "Upload button text",
      "default": "Upload Your Image"
    },
    {
      "type": "header",
      "content": "Style"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Button color",
      "default": "#000f9f"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button text color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "button_hover_color",
      "label": "Button hover color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "handle_color",
      "label": "Resize handle color",
      "default": "#007acc"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 16,
      "max": 48,
      "step": 2,
      "unit": "px",
      "label": "Title size",
      "default": 24
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 8
    },
    {
      "type": "range",
      "id": "button_border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Button border radius",
      "default": 6
    }
  ],
  "presets": [
    {
      "name": "PNG Frame Editor"
    }
  ]
}
{% endschema %}