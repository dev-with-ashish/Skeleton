{% doc %}
  @prompt
    generate a responsive our clients section horizontal scrollable on all device using taiwlwind css and three.js having this #c63b33 color gradiant and use logo, check for error not displaying any thing, make bg white with same animation and add a option to adjust section height

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-clients-section-{{ ai_gen_id }} {
    position: relative;
    padding: 60px 20px;
    background: {{ block.settings.background_color }};
    overflow: hidden;
    min-height: {{ block.settings.section_height }}px;display: flex;
    align-items: center;
  }

  .ai-clients-canvas-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
    pointer-events: none;
  }

  .ai-clients-content-{{ ai_gen_id }} {
    position: relative;
    z-index: 2;max-width: 1200px;
    margin: 0 auto;
    width: 100%;
  }

  .ai-clients-header-{{ ai_gen_id }} {
    text-align: center;
    margin-bottom: 40px;
  }

  .ai-clients-title-{{ ai_gen_id }} {
    color: {{ block.settings.title_color }};
    font-size: {{ block.settings.title_size }}px;
    font-weight: 700;
    margin: 0 0 16px;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .ai-clients-subtitle-{{ ai_gen_id }} {
    color: {{ block.settings.subtitle_color }};
    font-size: {{ block.settings.subtitle_size }}px;
    margin: 0;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
  }

  .ai-clients-scroll-container-{{ ai_gen_id }} {
    position: relative;
    overflow: hidden;
    margin: 0 -20px;
  }

  .ai-clients-scroll-wrapper-{{ ai_gen_id }} {
    display: flex;
    gap: {{ block.settings.logo_spacing }}px;
    padding: 20px;
    animation: ai-clients-scroll-{{ ai_gen_id }} {{ block.settings.scroll_speed }}s linear infinite;
    width: fit-content;
  }

  .ai-clients-logo-item-{{ ai_gen_id }} {
    flex-shrink: 0;
    width: {{ block.settings.logo_width }}px;
    height: {{ block.settings.logo_height }}px;
    background: {{ block.settings.logo_background }};
    border-radius: {{ block.settings.logo_border_radius }}px;
    display: flex;
    align-items: center;
    justify-content: center;
    backdrop-filter: blur(10px);
    border: 1px solid {{ block.settings.logo_border_color }};
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  }

  .ai-clients-logo-item-{{ ai_gen_id }}:hover {
    background: {{ block.settings.logo_hover_background }};
    transform: translateY(-5px);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
  }

  .ai-clients-logo-item-{{ ai_gen_id }}::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(198, 59, 51, 0.1), transparent);
    transition: left 0.5s ease;
  }

  .ai-clients-logo-item-{{ ai_gen_id }}:hover::before {
    left: 100%;
  }

  .ai-clients-logo-{{ ai_gen_id }} {
    max-width: 80%;
    max-height: 80%;
    object-fit: contain;opacity: 0.8;
    transition: opacity 0.3s ease;
  }

  .ai-clients-logo-item-{{ ai_gen_id }}:hover .ai-clients-logo-{{ ai_gen_id }} {
    opacity: 1;
  }

  .ai-clients-logo-placeholder-{{ ai_gen_id }} {
    width: 80%;
    height: 80%;
    display: flex;
    align-items: center;
    justify-content: center;}

  .ai-clients-logo-placeholder-{{ ai_gen_id }} svg {
    width: 100%;
    height: 100%;
    opacity: 0.4;
    fill: {{ block.settings.placeholder_color }};
  }

  @keyframes ai-clients-scroll-{{ ai_gen_id }} {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(-50%);
    }
  }

  .ai-clients-scroll-wrapper-{{ ai_gen_id }}:hover {
    animation-play-state: paused;
  }

  @media screen and (max-width: 768px) {
    .ai-clients-section-{{ ai_gen_id }} {
      padding: 40px 15px;
      min-height: {{ block.settings.section_height | times: 0.8 }}px;
    }

    .ai-clients-title-{{ ai_gen_id }} {
      font-size: {{ block.settings.title_size | times: 0.8 }}px;
    }

    .ai-clients-subtitle-{{ ai_gen_id }} {
      font-size: {{ block.settings.subtitle_size | times: 0.9 }}px;
    }

    .ai-clients-logo-item-{{ ai_gen_id }} {
      width: {{ block.settings.logo_width | times: 0.8 }}px;
      height: {{ block.settings.logo_height | times: 0.8 }}px;
    }

    .ai-clients-scroll-wrapper-{{ ai_gen_id }} {
      gap: {{ block.settings.logo_spacing | times: 0.7 }}px;
    }
  }

  @media screen and (max-width: 480px) {
    .ai-clients-section-{{ ai_gen_id }} {
      min-height: {{ block.settings.section_height | times: 0.6 }}px;
    }

    .ai-clients-logo-item-{{ ai_gen_id }} {
      width: {{ block.settings.logo_width | times: 0.6 }}px;
      height: {{ block.settings.logo_height | times: 0.6 }}px;
    }
  }
{% endstyle %}

<ai-clients-section-{{ ai_gen_id }}
  class="ai-clients-section-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <canvas class="ai-clients-canvas-{{ ai_gen_id }}" id="ai-clients-canvas-{{ ai_gen_id }}"></canvas>
  
  <div class="ai-clients-content-{{ ai_gen_id }}">
    <div class="ai-clients-header-{{ ai_gen_id }}">
      {% if block.settings.title != blank %}
        <h2 class="ai-clients-title-{{ ai_gen_id }}">{{ block.settings.title }}</h2>
      {% endif %}
      {% if block.settings.subtitle != blank %}
        <p class="ai-clients-subtitle-{{ ai_gen_id }}">{{ block.settings.subtitle }}</p>
      {% endif %}
    </div>

    <div class="ai-clients-scroll-container-{{ ai_gen_id }}">
      <div class="ai-clients-scroll-wrapper-{{ ai_gen_id }}">
        {% for i in (1..8) %}
          {% assign logo_key = 'client_logo_' | append: i %}
          {% assign logo = block.settings[logo_key] %}<div class="ai-clients-logo-item-{{ ai_gen_id }}">
            {% if logo != blank %}
              <img
                src="{{ logo | image_url: width: 200}}"
                alt="Client logo {{ i }}"
                class="ai-clients-logo-{{ ai_gen_id }}"
                loading="lazy"width="200"
                height="100"
              >
            {% else %}
              <div class="ai-clients-logo-placeholder-{{ ai_gen_id }}">
                {{ 'image' | placeholder_svg_tag }}
              </div>
            {% endif %}
          </div>
        {% endfor %}

        {% for i in (1..8) %}
          {% assign logo_key = 'client_logo_' | append: i %}
          {% assign logo = block.settings[logo_key] %}
          <div class="ai-clients-logo-item-{{ ai_gen_id }}">
            {% if logo != blank %}
              <img
                src="{{ logo | image_url: width: 200 }}"
                alt="Client logo {{ i }}"
                class="ai-clients-logo-{{ ai_gen_id }}"
                loading="lazy"
                width="200"
                height="100"
              >
            {% else %}
              <div class="ai-clients-logo-placeholder-{{ ai_gen_id }}">
                {{ 'image' | placeholder_svg_tag }}
              </div>
            {% endif %}
          </div>
        {% endfor %}
      </div>
    </div>
  </div>
</ai-clients-section-{{ ai_gen_id }}>

<script>
  (function() {
    class AiClientsSection{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.canvas = null;
        this.ctx = null;
        this.particles = [];
        this.animationId = null;}

      connectedCallback() {
        this.initCanvas();
        this.createParticles();
        this.animate();
        this.handleResize();
      }

      disconnectedCallback() {
        if (this.animationId) {
          cancelAnimationFrame(this.animationId);
        }
        window.removeEventListener('resize', this.handleResize.bind(this));
      }

      initCanvas() {
        this.canvas = this.querySelector('#ai-clients-canvas-{{ ai_gen_id }}');
        if (!this.canvas) return;
        this.ctx = this.canvas.getContext('2d');
        this.resizeCanvas();
        window.addEventListener('resize', this.handleResize.bind(this));
      }

      resizeCanvas() {
        if (!this.canvas) return;
        const rect = this.getBoundingClientRect();
        this.canvas.width = rect.width;
        this.canvas.height = rect.height;
      }

      handleResize() {
        this.resizeCanvas();
        this.createParticles();
      }

      createParticles() {
        if (!this.canvas) return;
        this.particles = [];
        const particleCount = Math.floor((this.canvas.width * this.canvas.height) / 15000);
        
        for (let i = 0; i < particleCount; i++) {
          this.particles.push({
            x: Math.random() * this.canvas.width,
            y: Math.random() * this.canvas.height,
            size: Math.random() * 3 + 1,
            speedX: (Math.random() - 0.5) * 0.5,
            speedY: (Math.random() - 0.5) * 0.5,
            opacity: Math.random() * 0.3 + 0.1
          });
        }
      }

      animate() {
        if (!this.ctx || !this.canvas) return;
        
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        
        this.particles.forEach(particle => {
          particle.x += particle.speedX;
          particle.y += particle.speedY;
          if (particle.x < 0) particle.x = this.canvas.width;
          if (particle.x > this.canvas.width) particle.x = 0;
          if (particle.y < 0) particle.y = this.canvas.height;
          if (particle.y > this.canvas.height) particle.y = 0;
          
          this.ctx.beginPath();
          this.ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
          this.ctx.fillStyle = `rgba(198, 59, 51, ${particle.opacity})`;
          this.ctx.fill();
        });
        
        this.drawConnections();
        this.animationId = requestAnimationFrame(this.animate.bind(this));
      }

      drawConnections() {
        if (!this.ctx) return;
        
        for (let i = 0; i < this.particles.length; i++) {
          for (let j = i + 1; j < this.particles.length; j++) {
            const dx = this.particles[i].x - this.particles[j].x;
            const dy = this.particles[i].y - this.particles[j].y;
            const distance = Math.sqrt(dx * dx + dy * dy);
            
            if (distance < 100) {
              this.ctx.beginPath();
              this.ctx.moveTo(this.particles[i].x, this.particles[i].y);
              this.ctx.lineTo(this.particles[j].x, this.particles[j].y);
              this.ctx.strokeStyle = `rgba(198, 59, 51, ${0.1* (1 - distance / 100)})`;
              this.ctx.lineWidth = 1;
              this.ctx.stroke();
            }
          }
        }
      }
    }

    customElements.define('ai-clients-section-{{ ai_gen_id }}', AiClientsSection{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Our clients",
  "settings": [
    {
      "type": "header",
      "content": "Section layout"
    },
    {
      "type": "range",
      "id": "section_height",
      "min": 300,
      "max": 800,
      "step": 50,
      "unit": "px",
      "label": "Section height",
      "default": 500
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Our Trusted Clients"
    },
    {
      "type": "color",
      "id": "title_color",
      "label": "Title color",
      "default": "#333333"
    },
    {
      "type": "textarea",
      "id": "subtitle",
      "label": "Subtitle",
      "default": "We're proud to work with industry leaders and innovative companies worldwide"
    },
    {
      "type": "color",
      "id": "subtitle_color",
      "label": "Subtitle color",
      "default": "#666666"
    },
    {
      "type": "header",
      "content": "Client logos"
    },
    {
      "type": "image_picker",
      "id": "client_logo_1",
      "label": "Client logo 1"
    },
    {
      "type": "image_picker",
      "id": "client_logo_2",
      "label": "Client logo 2"
    },
    {
      "type": "image_picker",
      "id": "client_logo_3",
      "label": "Client logo 3"
    },
    {
      "type": "image_picker",
      "id": "client_logo_4",
      "label": "Client logo 4"
    },
    {
      "type": "image_picker",
      "id": "client_logo_5",
      "label": "Client logo 5"
    },
    {
      "type": "image_picker",
      "id": "client_logo_6",
      "label": "Client logo 6"
    },
    {
      "type": "image_picker",
      "id": "client_logo_7",
      "label": "Client logo 7"
    },
    {
      "type": "image_picker",
      "id": "client_logo_8",
      "label": "Client logo 8"
    },
    {
      "type": "header",
      "content": "Logo styling"
    },
    {
      "type": "color",
      "id": "logo_background",
      "label": "Logo background",
      "default": "#f8f8f8"
    },
    {
      "type": "color",
      "id": "logo_hover_background",
      "label": "Logo hover background",
      "default": "#f0f0f0"
    },
    {
      "type": "color",
      "id": "logo_border_color",
      "label": "Logo border color",
      "default": "#e0e0e0"
    },
    {
      "type": "color",
      "id": "placeholder_color",
      "label": "Placeholder color",
      "default": "#cccccc"
    },
    {
      "type": "header",
      "content": "Layout settings"
    },
    {
      "type": "range",
      "id": "logo_width",
      "min": 80,
      "max": 200,
      "step": 10,
      "unit": "px",
      "label": "Logo width",
      "default": 140
    },
    {
      "type": "range",
      "id": "logo_height",
      "min": 60,
      "max": 120,
      "step": 10,
      "unit": "px",
      "label": "Logo height",
      "default": 80
    },
    {
      "type": "range",
      "id": "logo_spacing",
      "min": 10,
      "max": 50,
      "step": 5,
      "unit": "px",
      "label": "Logo spacing",
      "default": 30
    },
    {
      "type": "range",
      "id": "logo_border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Logo border radius",
      "default": 8
    },
    {
      "type": "range",
      "id": "scroll_speed",
      "min": 10,
      "max": 60,
      "step": 5,
      "unit": "s",
      "label": "Scroll speed",
      "default": 30
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 24,
      "max": 60,
      "step": 2,
      "unit": "px",
      "label": "Title size",
      "default": 36
    },
    {
      "type": "range",
      "id": "subtitle_size",
      "min": 14,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Subtitle size",
      "default": 18
    }
  ],
  "presets": [
    {
      "name": "Our clients"
    }
  ],
  "tag": null
}
{% endschema %}