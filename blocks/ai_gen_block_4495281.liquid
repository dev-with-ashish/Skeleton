{% doc %}
  @prompt
    Customizable product section with masked user image, admin overlay, variants as buttons (original logic), three admin-styled text layers (Text1/2/3) rendered as HTML text boxes (no SVG), drag/resize/pinch of user image, line item properties for image + texts, Add to Cart always allowed, admin toggle to enable/disable user image layer, alignment controls for Text1/2/3 (Left/Center/Right). When user image layer is disabled, duplicate the overlay image into the user layer automatically and disable all user image interactions. Text boxes are clipped to the shape mask and responsive to canvas width.
{% enddoc %}

{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{%- assign context_product = product | default: block.settings.product -%}
{%- assign cd = context_product.metafields.custom -%}

{%- assign t1Enabled = cd.enable_text1.value -%}
{%- if t1Enabled == nil -%}{%- assign t1Enabled = block.settings.enable_text1 -%}{%- endif -%}

{%- assign t2Enabled = cd.enable_text2.value -%}
{%- if t2Enabled == nil -%}{%- assign t2Enabled = block.settings.enable_text2 -%}{%- endif -%}

{%- assign t3Enabled = cd.enable_text3.value -%}
{%- if t3Enabled == nil -%}{%- assign t3Enabled = block.settings.enable_text3 -%}{%- endif -%}

{%- assign userImageEnabled = cd.enable_user_image.value -%}
{%- if userImageEnabled == nil -%}{%- assign userImageEnabled = block.settings.enable_user_image -%}{%- endif -%}

{%- assign overlayEnabled = cd.enable_overlay.value -%}
{%- if overlayEnabled == nil -%}{%- assign overlayEnabled = true -%}{%- endif -%}

{%- assign _t1_font = cd.text1_font | default: block.settings.text1_font | default: 'Roboto' -%}
{%- assign _t2_font = cd.text2_font | default: block.settings.text2_font | default: _t1_font -%}
{%- assign _t3_font = cd.text3_font | default: block.settings.text3_font | default: _t1_font -%}

{%- comment -%}
Auto-source product images from context_product:
- shape_media: first image
- overlay_media: second image
{%- endcomment -%}
{% if context_product %}
  {% assign _images = context_product.media | where: 'media_type', 'image' %}
  {% assign shape_media = _images[0] %}
  {% assign overlay_media = _images[1] %}

  {% if shape_media %}
    {% assign shape_image_url_500 = shape_media | image_url: width: 500 %}
  {% endif %}
  {% if overlay_media %}
    {% assign overlay_image_url_500 = overlay_media | image_url: width: 500 %}
  {% endif %}
{% endif %}

{%- assign has_overlay_image = false -%}
{%- if overlay_image_url_500 or block.settings.overlay_image -%}
  {%- assign has_overlay_image = true -%}
{%- endif -%}

{% style %}
  .ai-custom-product-{{ ai_gen_id }} {
    padding: {{ block.settings.section_padding }}px;
    background-color: {{ block.settings.background_color }};
  }

  .ai-custom-product-container-{{ ai_gen_id }} {
    max-width: 1200px;
    margin: 0 auto;
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 40px;
    align-items: center;
  }

  .ai-custom-product-preview-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    max-width: 500px;
    margin: 0 auto;
  }

  .ai-custom-product-canvas-wrapper-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    aspect-ratio: 1;
    background-color: {{ block.settings.canvas_background }};
    border-radius: {{ block.settings.border_radius }}px;
    overflow: hidden;
    border: 2px solid {{ block.settings.border_color }};
  }

  .ai-custom-product-shape-layer-{{ ai_gen_id }} {
    position: absolute;
    top: 0; left: 0;
    width: 100%; height: 100%;
    z-index: 4; pointer-events: none;
    transition: opacity 0.3s ease;
  }
  .ai-custom-product-shape-layer-{{ ai_gen_id }} img { width:100%; height:100%; object-fit:contain; }

  .ai-custom-product-overlay-layer-{{ ai_gen_id }} {
    position: absolute; top:0; left:0; width:100%; height:100%;
    z-index:2; pointer-events:none;
  }
  .ai-custom-product-overlay-layer-{{ ai_gen_id }} img {
    width:100%; height:100%; object-fit:contain;
    {% if shape_image_url_500 or block.settings.shape_image %}
      {% assign _shape_url_for_mask = shape_image_url_500 | default: block.settings.shape_image | image_url: width: 500 %}
      -webkit-mask-image:url('{{ _shape_url_for_mask }}'); mask-image:url('{{ _shape_url_for_mask }}');
      -webkit-mask-size:contain; mask-size:contain;
      -webkit-mask-repeat:no-repeat; mask-repeat:no-repeat;
      -webkit-mask-position:center; mask-position:center;
    {% endif %}
  }

  /* USER IMAGE LAYER (masked) */
  .ai-custom-product-user-layer-{{ ai_gen_id }} {
    position:absolute; top:0; left:0; width:100%; height:100%;
    z-index:1; overflow:hidden;
    {% if shape_image_url_500 or block.settings.shape_image %}
      {% assign _shape_url_for_mask = shape_image_url_500 | default: block.settings.shape_image | image_url: width: 500 %}
      -webkit-mask-image:url('{{ _shape_url_for_mask }}'); mask-image:url('{{ _shape_url_for_mask }}');
      -webkit-mask-size:contain; mask-size:contain;
      -webkit-mask-repeat:no-repeat; mask-repeat:no-repeat;
      -webkit-mask-position:center; mask-position:center;
    {% endif %}
  }
  .ai-custom-product-user-image-container-{{ ai_gen_id }} { position:relative; width:100%; height:100%; }
  .ai-custom-product-user-image-wrapper-{{ ai_gen_id }} { position:absolute; cursor:move; user-select:none; transition:outline .2s ease; transform-origin:center; }
  .ai-custom-product-user-image-wrapper-{{ ai_gen_id }}:hover,
  .ai-custom-product-user-image-wrapper-{{ ai_gen_id }}.dragging { outline:2px solid {{ block.settings.button_color }}; outline-offset:2px; }
  .ai-custom-product-user-image-{{ ai_gen_id }} { width:100%; height:100%; object-fit:cover; display:block; }

  .ai-custom-product-resize-handles-{{ ai_gen_id }} { position:absolute; inset:0; pointer-events:none; opacity:0; transition:opacity .3s ease; }
  .ai-custom-product-user-image-wrapper-{{ ai_gen_id }}:hover .ai-custom-product-resize-handles-{{ ai_gen_id }} { opacity:1; }
  .ai-custom-product-resize-handle-{{ ai_gen_id }} { position:absolute; width:16px; height:16px; background:{{ block.settings.button_color }}; border:3px solid #fff; border-radius:50%; pointer-events:auto; cursor:pointer; z-index:10; box-shadow:0 2px 4px rgba(0,0,0,.2); }
  .ai-custom-product-resize-handle-{{ ai_gen_id }}.nw{ top:-8px; left:-8px; cursor:nw-resize;}
  .ai-custom-product-resize-handle-{{ ai_gen_id }}.ne{ top:-8px; right:-8px; cursor:ne-resize;}
  .ai-custom-product-resize-handle-{{ ai_gen_id }}.sw{ bottom:-8px; left:-8px; cursor:sw-resize;}
  .ai-custom-product-resize-handle-{{ ai_gen_id }}.se{ bottom:-8px; right:-8px; cursor:se-resize;}

  /* When upload disabled, interactions off */
  .ai-user-disabled-{{ ai_gen_id }} .ai-custom-product-user-image-wrapper-{{ ai_gen_id }} {
    cursor: default !important;
    outline: none !important;
  }
  .ai-user-disabled-{{ ai_gen_id }} .ai-custom-product-resize-handles-{{ ai_gen_id }},
  .ai-user-disabled-{{ ai_gen_id }} .ai-custom-product-resize-handle-{{ ai_gen_id }} {
    display: none !important;
  }

  .ai-custom-product-placeholder-{{ ai_gen_id }} {
    width:100%; height:100%; background:#f8f8f8; display:flex; align-items:center; justify-content:center; flex-direction:column; gap:16px; color:#666; text-align:center; padding:20px;
    {% if shape_image_url_500 or block.settings.shape_image %}
      {% assign _shape_url_for_mask = shape_image_url_500 | default: block.settings.shape_image | image_url: width: 500 %}
      -webkit-mask-image:url('{{ _shape_url_for_mask }}'); mask-image:url('{{ _shape_url_for_mask }}');
      -webkit-mask-size:contain; mask-size:contain;
      -webkit-mask-repeat:no-repeat; mask-repeat:no-repeat;
      -webkit-mask-position:center; mask-position:center;
    {% endif %}
  }
  .ai-custom-product-placeholder-{{ ai_gen_id }} svg { width:80px; height:80px; opacity:.5; }

  .ai-custom-product-controls-{{ ai_gen_id }} { display:flex; flex-direction:column; gap:24px; }
  .ai-custom-product-info-{{ ai_gen_id }} { margin-bottom:24px; }
  .ai-custom-product-title-{{ ai_gen_id }} { font-size:{{ block.settings.title_size }}px; color:{{ block.settings.text_color }}; margin:0 0 16px; font-family:{{ settings.type_primary_font.family }}, {{ settings.type_primary_font.fallback_families }}; font-weight:{{ settings.type_primary_font.weight }}; }

  /* prices for instant updates */
  .ai-custom-product-price-{{ ai_gen_id }} { font-size:{{ block.settings.price_size }}px; font-weight:600; color:{{ block.settings.price_color }}; margin-bottom:16px; }
  .ai-compare-price-{{ ai_gen_id }} { text-decoration:line-through; color:{{ block.settings.compare_price_color }}; margin-right:8px; font-weight:normal; }

  /* Variant buttons (ORIGINAL structure) */
  .ai-custom-product-variant-selector-{{ ai_gen_id }} { margin-bottom:20px; }
  .ai-custom-product-variant-label-{{ ai_gen_id }} { display:block; margin-bottom:12px; font-weight:600; color:{{ block.settings.text_color }}; font-size:16px; }
  .ai-custom-product-variant-buttons-{{ ai_gen_id }} { display:flex; flex-wrap:wrap; gap:8px; margin-bottom:24px;}
  .ai-custom-product-variant-buttons-{{ ai_gen_id }}:last-of-type { margin-bottom: 0; }
  .ai-variant-input-{{ ai_gen_id }} { position:absolute; opacity:0; pointer-events:none; }
  .ai-custom-product-variant-button-{{ ai_gen_id }} {
    padding:10px 16px; border:2px solid {{ block.settings.variant_border_color }}; background:{{ block.settings.variant_background }}; color:{{ block.settings.variant_text_color }};
    border-radius:{{ block.settings.button_border_radius }}px; font-size:14px; cursor:pointer; transition:all .3s ease; text-align:center; min-width:80px; display:inline-flex; align-items:center; justify-content:center;
  }
  .ai-variant-input-{{ ai_gen_id }}:checked + .ai-custom-product-variant-button-{{ ai_gen_id }} {
    border-color:{{ block.settings.variant_selected_border }}; background:{{ block.settings.variant_selected_background }}; color:{{ block.settings.variant_selected_text }};
  }
  .ai-variant-input-{{ ai_gen_id }}:disabled + .ai-custom-product-variant-button-{{ ai_gen_id }} { opacity:.5; cursor:not-allowed; background:#f5f5f5; color:#999; }

  .ai-custom-product-upload-section-{{ ai_gen_id }} { border:2px dashed {{ block.settings.upload_border_color }}; border-radius:{{ block.settings.border_radius }}px; padding:24px; text-align:center; background:{{ block.settings.upload_background }}; transition:all .3s ease; }
  .ai-custom-product-upload-section-{{ ai_gen_id }}:hover { border-color:{{ block.settings.button_color }}; background:{{ block.settings.upload_hover_background }}; }
  .ai-custom-product-upload-input-{{ ai_gen_id }} { display:none; }
  .ai-custom-product-upload-button-{{ ai_gen_id }} { display:inline-flex; align-items:center; gap:8px; padding:12px 24px; background:{{ block.settings.button_color }}; color:{{ block.settings.button_text_color }}; border:none; border-radius:{{ block.settings.button_border_radius }}px; cursor:pointer; font-size:14px; transition:background-color .3s ease; }
  .ai-custom-product-upload-button-{{ ai_gen_id }}:hover{ background:{{ block.settings.button_hover_color }}; }
  .ai-custom-product-upload-text-{{ ai_gen_id }}{ margin-top:12px; color:{{ block.settings.text_color }}; font-size:14px; opacity:.8; }
  .ai-custom-product-file-info-{{ ai_gen_id }}{ margin-top:12px; padding:8px 12px; background:{{ block.settings.success_background }}; color:{{ block.settings.success_color }}; border-radius:4px; font-size:14px; }

  .ai-custom-product-actions-{{ ai_gen_id }}{ display:flex; flex-direction:column; gap:12px; }
  .ai-custom-product-clear-button-{{ ai_gen_id }}{ padding:8px 16px; background:transparent; color:{{ block.settings.text_color }}; border:1px solid {{ block.settings.border_color }}; border-radius:{{ block.settings.button_border_radius }}px; cursor:pointer; font-size:14px; transition:all .3s ease; }
  .ai-custom-product-clear-button-{{ ai_gen_id }}:hover{ background:{{ block.settings.border_color }}; }
  .ai-custom-product-add-to-cart-{{ ai_gen_id }}{ padding:16px 32px; background:{{ block.settings.cart_button_color }}; color:{{ block.settings.cart_button_text_color }}; border:none; border-radius:{{ block.settings.button_border_radius }}px; cursor:pointer; font-size:16px; font-weight:600; transition:background-color .3s ease; }
  .ai-custom-product-add-to-cart-{{ ai_gen_id }}:hover{ background:{{ block.settings.cart_button_hover_color }}; }

  .ai-custom-product-form-{{ ai_gen_id }}{ display:none; }

  /* ===== HTML TEXTBOX LAYER (replaces SVG) ===== */
  .ai-textbox-layer-{{ ai_gen_id }}{
    position:absolute; inset:0; z-index:3; pointer-events:none;
    {% if shape_image_url_500 or block.settings.shape_image %}
      {% assign _shape_url_for_mask = shape_image_url_500 | default: block.settings.shape_image | image_url: width: 500 %}
      -webkit-mask-image:url('{{ _shape_url_for_mask }}'); mask-image:url('{{ _shape_url_for_mask }}');
      -webkit-mask-size:contain; mask-size:contain;
      -webkit-mask-repeat:no-repeat; mask-repeat:no-repeat;
      -webkit-mask-position:center; mask-position:center;
    {% endif %}
  }
  .ai-textbox-{{ ai_gen_id }}{
    position:absolute;
    white-space:normal; word-wrap:break-word; overflow:hidden;
    line-height:1.2; pointer-events:none;
  }
  .ai-align-left-{{ ai_gen_id }}  { text-align:left;  transform-origin:top left; }
  .ai-align-center-{{ ai_gen_id }}{ text-align:center; transform-origin:top center; }
  .ai-align-right-{{ ai_gen_id }} { text-align:right; transform-origin:top right; }

  @media screen and (max-width: 768px) {
    .ai-custom-product-container-{{ ai_gen_id }} { grid-template-columns:1fr; gap:24px; }
    .ai-custom-product-preview-{{ ai_gen_id }} { order:-1; }
    .ai-custom-product-variant-buttons-{{ ai_gen_id }} { flex-direction:column; }
    .ai-custom-product-variant-button-{{ ai_gen_id }} { width:100%; }
    .ai-custom-product-resize-handle-{{ ai_gen_id }} { width:20px; height:20px; }
    .ai-custom-product-resize-handle-{{ ai_gen_id }}.nw{ top:-10px; left:-10px;}
    .ai-custom-product-resize-handle-{{ ai_gen_id }}.ne{ top:-10px; right:-10px;}
    .ai-custom-product-resize-handle-{{ ai_gen_id }}.sw{ bottom:-10px; left:-10px;}
    .ai-custom-product-resize-handle-{{ ai_gen_id }}.se{ bottom:-10px; right:-10px;}
  }
{% endstyle %}

<product-customizer-{{ ai_gen_id }}
  class="ai-custom-product-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-custom-product-container-{{ ai_gen_id }}">
    <div class="ai-custom-product-preview-{{ ai_gen_id }}">
      <div class="ai-custom-product-canvas-wrapper-{{ ai_gen_id }} {% unless userImageEnabled %}ai-user-disabled-{{ ai_gen_id }}{% endunless %}">

        <!-- USER LAYER -->
        <div class="ai-custom-product-user-layer-{{ ai_gen_id }}" id="ai-user-layer-{{ ai_gen_id }}">
          {% if userImageEnabled %}
            <div class="ai-custom-product-placeholder-{{ ai_gen_id }}">
              {{ 'image' | placeholder_svg_tag }}
              <span>{{ block.settings.placeholder_text }}</span>
            </div>
          {% endif %}
        </div>

        {% if overlayEnabled and has_overlay_image %}
          <div class="ai-custom-product-overlay-layer-{{ ai_gen_id }}" id="ai-overlay-layer-{{ ai_gen_id }}">
            <img
              src="{% if overlay_image_url_500 %}{{ overlay_image_url_500 }}{% else %}{{ block.settings.overlay_image | image_url: width: 500 }}{% endif %}"
              alt="Overlay image"
              style="opacity: {{ block.settings.overlay_opacity | divided_by: 100.0 }};"
            >
          </div>
        {% endif %}

        <!-- HTML TEXTBOX LAYER (Text1/2/3) -->
        <div class="ai-textbox-layer-{{ ai_gen_id }}" id="ai-textbox-layer-{{ ai_gen_id }}">
          {% if t1Enabled %}<div id="ai-t1-box-{{ ai_gen_id }}" class="ai-textbox-{{ ai_gen_id }}"></div>{% endif %}
          {% if t2Enabled %}<div id="ai-t2-box-{{ ai_gen_id }}" class="ai-textbox-{{ ai_gen_id }}"></div>{% endif %}
          {% if t3Enabled %}<div id="ai-t3-box-{{ ai_gen_id }}" class="ai-textbox-{{ ai_gen_id }}"></div>{% endif %}
        </div>

        {% if shape_image_url_500 or block.settings.shape_image %}
          <div class="ai-custom-product-shape-layer-{{ ai_gen_id }}" id="ai-shape-layer-{{ ai_gen_id }}">
            <img
              src="{% if shape_image_url_500 %}{{ shape_image_url_500 }}{% else %}{{ block.settings.shape_image | image_url: width: 500 }}{% endif %}"
              alt="Shape overlay"
              style="opacity: {{ block.settings.shape_overlay_opacity | divided_by: 100.0 }};"
            >
          </div>
        {% endif %}
      </div>
    </div>

    <div class="ai-custom-product-controls-{{ ai_gen_id }}">
      {% if context_product %}
        {% assign current_variant = context_product.selected_or_first_available_variant %}
        <div class="ai-custom-product-info-{{ ai_gen_id }}">
          <h2 class="ai-custom-product-title-{{ ai_gen_id }}">{{ context_product.title }}</h2>

          <div class="ai-custom-product-price-{{ ai_gen_id }}" id="ai-product-price-{{ ai_gen_id }}">
            {% if current_variant.compare_at_price > current_variant.price %}
              <span class="ai-compare-price-{{ ai_gen_id }}" data-compare-price="{{ current_variant.compare_at_price }}">
                {{ current_variant.compare_at_price | money }}
              </span>
            {% else %}
              <span class="ai-compare-price-{{ ai_gen_id }}" data-compare-price="" style="display:none;"></span>
            {% endif %}
            <span class="ai-current-price-{{ ai_gen_id }}" data-price="{{ current_variant.price }}">
              {{ current_variant.price | money }}
            </span>
          </div>

          {% if context_product.variants.size > 1 %}
            <variant-radios
              class="ai-custom-product-variant-selector-{{ ai_gen_id }}"
              data-section="{{ section.id }}"
              data-url="{{ context_product.url }}"
            >
              {% for option in context_product.options_with_values %}
                <label class="ai-custom-product-variant-label-{{ ai_gen_id }}">{{ option.name }}</label>
                <fieldset class="ai-custom-product-variant-buttons-{{ ai_gen_id }}" name="{{ option.name }}">
                  {% for value in option.values %}
                    <input
                      class="ai-variant-input-{{ ai_gen_id }}"
                      type="radio"
                      id="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}-{{ ai_gen_id }}"
                      name="{{ option.name }}"
                      value="{{ value | escape }}"
                      {% if option.selected_value == value %}checked{% endif %}
                    >
                    <label
                      class="ai-custom-product-variant-button-{{ ai_gen_id }}"
                      for="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}-{{ ai_gen_id }}"
                    >
                      {{ value }}
                    </label>
                  {% endfor %}
                </fieldset>
              {% endfor %}
              <script type="application/json">
                {{ context_product.variants | json }}
              </script>
            </variant-radios>
          {% endif %}
        </div>
      {% else %}
        <div class="ai-custom-product-info-{{ ai_gen_id }}">
          <h2 class="ai-custom-product-title-{{ ai_gen_id }}">{{ block.settings.title }}</h2>
          {% if block.settings.description != blank %}
            <div class="ai-custom-product-description-{{ ai_gen_id }}">
              {{ block.settings.description }}
            </div>
          {% endif %}
        </div>
      {% endif %}

      {% if userImageEnabled %}
      <div class="ai-custom-product-upload-section-{{ ai_gen_id }}">
        <input
          type="file"
          id="ai-user-upload-{{ ai_gen_id }}"
          class="ai-custom-product-upload-input-{{ ai_gen_id }}"
          accept="image/*"
        >
        <label for="ai-user-upload-{{ ai_gen_id }}" class="ai-custom-product-upload-button-{{ ai_gen_id }}">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
            <polyline points="7,10 12,15 17,10"></polyline>
            <line x1="12" y1="15" x2="12" y2="3"></line>
          </svg>
          {{ block.settings.upload_button_text }}
        </label>
        <div class="ai-custom-product-upload-text-{{ ai_gen_id }}">
          {{ block.settings.upload_help_text }}
        </div>
        <div id="ai-file-info-{{ ai_gen_id }}" class="ai-custom-product-file-info-{{ ai_gen_id }}" style="display:none;"></div>
      </div>
      {% endif %}

      <!-- Shopper-visible text inputs (content only) -->
      <div class="ai-customer-text-inputs-{{ ai_gen_id }}" style="margin-top:16px;">
        {% if t1Enabled %}
          <div style="margin-bottom:10px;">
            <label style="display:block;font-weight:600;margin-bottom:6px;color:{{ block.settings.text_color }};">Text 1</label>
            <input type="text" id="ai-text1-input-{{ ai_gen_id }}" placeholder="Enter Text 1"
              style="width:100%;padding:10px;border:1px solid {{ block.settings.border_color }};border-radius:{{ block.settings.button_border_radius }}px;">
          </div>
        {% endif %}
        {% if t2Enabled %}
          <div style="margin-bottom:10px;">
            <label style="display:block;font-weight:600;margin-bottom:6px;color:{{ block.settings.text_color }};">Text 2</label>
            <input type="text" id="ai-text2-input-{{ ai_gen_id }}" placeholder="Enter Text 2"
              style="width:100%;padding:10px;border:1px solid {{ block.settings.border_color }};border-radius:{{ block.settings.button_border_radius }}px;">
          </div>
        {% endif %}
        {% if t3Enabled %}
          <div>
            <label style="display:block;font-weight:600;margin-bottom:6px;color:{{ block.settings.text_color }};">Text 3</label>
            <input type="text" id="ai-text3-input-{{ ai_gen_id }}" placeholder="Enter Text 3"
              style="width:100%;padding:10px;border:1px solid {{ block.settings.border_color }};border-radius:{{ block.settings.button_border_radius }}px;">
          </div>
        {% endif %}
      </div>

      <div class="ai-custom-product-actions-{{ ai_gen_id }}">
        {% if userImageEnabled %}
          <button type="button" id="ai-clear-button-{{ ai_gen_id }}" class="ai-custom-product-clear-button-{{ ai_gen_id }}" style="display:none;">
            {{ block.settings.clear_button_text }}
          </button>
        {% endif %}

        {% if context_product %}
          <button type="button" id="ai-add-to-cart-{{ ai_gen_id }}" class="ai-custom-product-add-to-cart-{{ ai_gen_id }}">
            {{ block.settings.cart_button_text }}
          </button>
        {% endif %}
      </div>
    </div>
  </div>

  {% if context_product %}
    <form id="ai-cart-form-{{ ai_gen_id }}" class="ai-custom-product-form-{{ ai_gen_id }}" action="/cart/add" method="post" enctype="multipart/form-data">
      <input type="hidden" name="id" id="ai-variant-id-{{ ai_gen_id }}" value="{{ context_product.selected_or_first_available_variant.id }}">
      <input type="hidden" name="quantity" value="1">

      <!-- Always present so overlay-as-user works even when upload disabled -->
      <input type="file" name="properties[Custom Image]" id="ai-hidden-file-{{ ai_gen_id }}" style="display:none;">
      <input type="hidden" name="properties[Image Position]" id="ai-image-position-{{ ai_gen_id }}">
      <input type="hidden" name="properties[Image Scale]" id="ai-image-scale-{{ ai_gen_id }}">

      {% if t1Enabled %}<input type="hidden" name="properties[Text1]" id="ai-li-text1-content-{{ ai_gen_id }}">{% endif %}
      {% if t2Enabled %}<input type="hidden" name="properties[Text2]" id="ai-li-text2-content-{{ ai_gen_id }}">{% endif %}
      {% if t3Enabled %}<input type="hidden" name="properties[Text3]" id="ai-li-text3-content-{{ ai_gen_id }}">{% endif %}
    </form>
  {% endif %}
</product-customizer-{{ ai_gen_id }}>

<script>
  (function() {
    /* ===== Customizer (image upload/masking/drag/resize + Text sync + Add to Cart) ===== */
    class ProductCustomizer{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.userImage = null;
        this.userImageFile = null;
        this.userImageWrapper = null;
        this.userImageElement = null;
        this.userLayer = null;
        this.shapeLayer = null;

        this.currentVariantId = {% if context_product %}'{{ context_product.selected_or_first_available_variant.id }}'{% else %}null{% endif %};

        this.isDragging = false;
        this.isResizing = false;
        this.resizeDirection = '';
        this.dragStartX = 0; this.dragStartY = 0;
        this.imageStartX = 0; this.imageStartY = 0;
        this.imageStartWidth = 0; this.imageStartHeight = 0;
        this.imageWidth = 200; this.imageHeight = 200;
        this.imageX = 0; this.imageY = 0;
        this.minSize = 50; this.maxSize = 2000;
        this.isPinching = false;
        this.pinchStartDistance = 0;
        this.pinchCenter = { x: 0, y: 0 };
      }

      connectedCallback() {
        this.uploadInput = this.querySelector('#ai-user-upload-{{ ai_gen_id }}');
        this.userLayer = this.querySelector('#ai-user-layer-{{ ai_gen_id }}');
        this.shapeLayer = this.querySelector('#ai-shape-layer-{{ ai_gen_id }}');
        this.fileInfo = this.querySelector('#ai-file-info-{{ ai_gen_id }}');
        this.clearButton = this.querySelector('#ai-clear-button-{{ ai_gen_id }}');
        this.addToCartButton = this.querySelector('#ai-add-to-cart-{{ ai_gen_id }}');
        this.cartForm = this.querySelector('#ai-cart-form-{{ ai_gen_id }}');
        this.variantIdInput = this.querySelector('#ai-variant-id-{{ ai_gen_id }}');
        this.hiddenFileInput = this.querySelector('#ai-hidden-file-{{ ai_gen_id }}');
        this.imagePositionInput = this.querySelector('#ai-image-position-{{ ai_gen_id }}');
        this.imageScaleInput = this.querySelector('#ai-image-scale-{{ ai_gen_id }}');
        this.overlayImgEl = this.querySelector('#ai-overlay-layer-{{ ai_gen_id }} img');
        this.userUploadEnabled = {{ userImageEnabled | json }};

        this.text1Input = document.getElementById('ai-text1-input-{{ ai_gen_id }}');
        this.text2Input = document.getElementById('ai-text2-input-{{ ai_gen_id }}');
        this.text3Input = document.getElementById('ai-text3-input-{{ ai_gen_id }}');
        this.liText1 = document.getElementById('ai-li-text1-content-{{ ai_gen_id }}');
        this.liText2 = document.getElementById('ai-li-text2-content-{{ ai_gen_id }}');
        this.liText3 = document.getElementById('ai-li-text3-content-{{ ai_gen_id }}');

        this.setupEventListeners();
        if (this.addToCartButton) this.addToCartButton.disabled = false;

        if (!this.userUploadEnabled && this.overlayImgEl && this.overlayImgEl.src) {
          this.bootstrapOverlayAsUser(this.overlayImgEl.src);
        }
      }

      setupEventListeners() {
        if (this.userUploadEnabled && this.uploadInput) {
          this.uploadInput.addEventListener('change', (e) => this.handleFileUpload(e));
        }
        if (this.userUploadEnabled && this.clearButton) {
          this.clearButton.addEventListener('click', (e) => { e.preventDefault(); this.clearUserImage(); });
        }
        if (this.addToCartButton) {
          this.addToCartButton.addEventListener('click', (e) => { e.preventDefault(); this.addToCart(); });
        }

        if (this.userUploadEnabled) {
          document.addEventListener('mousemove', (e) => this.handleMouseMove(e));
          document.addEventListener('mouseup', () => this.endInteraction());
          document.addEventListener('touchmove', (e) => this.handleTouchMove(e), { passive:false });
          document.addEventListener('touchend', () => this.endInteraction());
        }

        if (this.text1Input && this.liText1) this.text1Input.addEventListener('input', ()=>{ this.liText1.value = this.text1Input.value || ''; });
        if (this.text2Input && this.liText2) this.text2Input.addEventListener('input', ()=>{ this.liText2.value = this.text2Input.value || ''; });
        if (this.text3Input && this.liText3) this.text3Input.addEventListener('input', ()=>{ this.liText3.value = this.text3Input.value || ''; });
      }

      handleFileUpload(event) {
        if (!this.userUploadEnabled) return;
        const file = event.target.files?.[0]; if (!file) return;
        if (!file.type.startsWith('image/')) { alert('Please select an image file.'); return; }

        this.userImageFile = file;
        const reader = new FileReader();
        reader.onload = (e) => {
          this.userImage = e.target.result;
          this.updatePreview();
          this.showFileInfo(file.name);
          this.updateFormInputs();

          if (this.clearButton) this.clearButton.style.display = 'block';
          if (this.shapeLayer) this.shapeLayer.style.opacity = '0';
        };
        reader.readAsDataURL(file);
      }

      async bootstrapOverlayAsUser(srcUrl) {
        try {
          const res = await fetch(srcUrl, { mode: 'cors' });
          const blob = await res.blob();
          const fileName = 'overlay-as-user.png';
          const file = new File([blob], fileName, { type: blob.type || 'image/png' });

          this.userImageFile = file;
          this.userImage = URL.createObjectURL(file);

          this.updatePreview(true);
          this.updateFormInputs();

          const overlayLayer = this.querySelector('#ai-overlay-layer-{{ ai_gen_id }}');
          if (overlayLayer) overlayLayer.style.display = 'none';

          if (this.shapeLayer) {
            this.shapeLayer.style.opacity = '{{ block.settings.shape_overlay_opacity | divided_by: 100.0 }}';
          }
        } catch (e) {
          console.error('Failed to bootstrap overlay as user image', e);
        }
      }

      updateFormInputs() {
        if (this.hiddenFileInput) {
          if (this.userImageFile) {
            const dt = new DataTransfer(); dt.items.add(this.userImageFile); this.hiddenFileInput.files = dt.files;
          } else {
            this.hiddenFileInput.value = '';
          }
        }
        if (this.imagePositionInput) this.imagePositionInput.value = `${this.imageX},${this.imageY}`;
        if (this.imageScaleInput) this.imageScaleInput.value = `${this.imageWidth}x${this.imageHeight}`;

        if (this.liText1 && this.text1Input) this.liText1.value = this.text1Input.value || '';
        if (this.liText2 && this.text2Input) this.liText2.value = this.text2Input.value || '';
        if (this.liText3 && this.text3Input) this.liText3.value = this.text3Input.value || '';
      }

      updatePreview(nonInteractive = false) {
        if (!this.userImage || !this.userLayer) return;

        const container = document.createElement('div');
        container.className = 'ai-custom-product-user-image-container-{{ ai_gen_id }}';

        const wrapper = document.createElement('div');
        wrapper.className = 'ai-custom-product-user-image-wrapper-{{ ai_gen_id }}';

        const img = document.createElement('img');
        img.src = this.userImage; img.className = 'ai-custom-product-user-image-{{ ai_gen_id }}';

        if (this.userUploadEnabled && !nonInteractive) {
          const handles = document.createElement('div'); handles.className = 'ai-custom-product-resize-handles-{{ ai_gen_id }}';
          ['nw','ne','sw','se'].forEach(pos => {
            const h = document.createElement('div'); h.className = `ai-custom-product-resize-handle-{{ ai_gen_id }} ${pos}`;
            h.addEventListener('mousedown', (e)=>this.startResize(e,pos));
            h.addEventListener('touchstart', (e)=>this.startResize(e,pos), { passive:false });
            handles.appendChild(h);
          });

          wrapper.addEventListener('mousedown', (e)=>{ if(!e.target.classList.contains('ai-custom-product-resize-handle-{{ ai_gen_id }}')) this.startDrag(e); });
          wrapper.addEventListener('touchstart', (e) => {
            if (e.touches && e.touches.length === 2) { this.startPinch(e); }
            else if (!e.target.classList.contains('ai-custom-product-resize-handle-{{ ai_gen_id }}')) { this.startDrag(e); }
          }, { passive: false });

          wrapper.appendChild(img); wrapper.appendChild(handles);
        } else {
          wrapper.style.cursor = 'default';
          wrapper.appendChild(img);
        }

        img.onload = () => {
          if (this.userUploadEnabled && !nonInteractive) { this.setDefaultImageSize(); }
          else { this.fillContainer(); }
        };

        container.appendChild(wrapper);
        this.userLayer.innerHTML = '';
        this.userLayer.appendChild(container);

        this.userImageWrapper = wrapper; this.userImageElement = img;
      }

      setDefaultImageSize() {
        if (!this.userImageWrapper || !this.userLayer) return;
        const w = this.userLayer.offsetWidth, h = this.userLayer.offsetHeight;
        this.imageWidth = w; this.imageHeight = h; this.imageX = 0; this.imageY = 0;
        this.updateImageTransform(); this.updateFormInputs();
      }

      fillContainer() {
        if (!this.userImageWrapper || !this.userLayer) return;
        const w = this.userLayer.offsetWidth, h = this.userLayer.offsetHeight;
        this.imageWidth = w; this.imageHeight = h; this.imageX = 0; this.imageY = 0;
        this.updateImageTransform(); this.updateFormInputs();
      }

      updateImageTransform() {
        if (!this.userImageWrapper) return;
        this.userImageWrapper.style.left = `${this.imageX}px`;
        this.userImageWrapper.style.top = `${this.imageY}px`;
        this.userImageWrapper.style.width = `${this.imageWidth}px`;
        this.userImageWrapper.style.height = `${this.imageHeight}px`;
      }

      startDrag(e) {
        if (!this.userUploadEnabled) return;
        e.preventDefault(); e.stopPropagation(); this.isDragging = true;
        this.userImageWrapper.classList.add('dragging');
        const cx = e.type==='touchstart'? e.touches[0].clientX : e.clientX;
        const cy = e.type==='touchstart'? e.touches[0].clientY : e.clientY;
        this.dragStartX = cx; this.dragStartY = cy; this.imageStartX = this.imageX; this.imageStartY = this.imageY;
      }

      startPinch(e) {
        if (!this.userUploadEnabled) return;
        e.preventDefault();
        this.isPinching = true;
        this.imageStartWidth  = this.imageWidth;
        this.imageStartHeight = this.imageHeight;
        this.imageStartX = this.imageX;
        this.imageStartY = this.imageY;

        const t1 = e.touches[0], t2 = e.touches[1];
        this.pinchStartDistance = Math.hypot(t2.clientX - t1.clientX, t2.clientY - t1.clientY);

        const rect = this.userLayer.getBoundingClientRect();
        this.pinchCenter = { x: ((t1.clientX + t2.clientX) / 2) - rect.left, y: ((t1.clientY + t2.clientY) / 2) - rect.top };
      }

      pinchMove(t1, t2) {
        if (!this.userUploadEnabled) return;
        const dist = Math.hypot(t2.clientX - t1.clientX, t2.clientY - t1.clientY);
        let scale = dist / this.pinchStartDistance;

        const newW = Math.max(this.minSize, Math.min(this.maxSize, this.imageStartWidth  * scale));
        const newH = Math.max(this.minSize, Math.min(this.maxSize, this.imageStartHeight * scale));

        const sx = newW / this.imageStartWidth;
        const sy = newH / this.imageStartHeight;
        const newX = this.pinchCenter.x - (this.pinchCenter.x - this.imageStartX) * sx;
        const newY = this.pinchCenter.y - (this.pinchCenter.y - this.imageStartY) * sy;

        this.imageWidth = newW; this.imageHeight = newH;
        this.imageX = newX; this.imageY = newY;

        this.updateImageTransform();
      }

      startResize(e, dir) {
        if (!this.userUploadEnabled) return;
        e.preventDefault(); e.stopPropagation(); this.isResizing = true; this.resizeDirection = dir;
        const cx = e.type==='touchstart'? e.touches[0].clientX : e.clientX;
        const cy = e.type==='touchstart'? e.touches[0].clientY : e.clientY;
        this.dragStartX = cx; this.dragStartY = cy;
        this.imageStartX = this.imageX; this.imageStartY = this.imageY;
        this.imageStartWidth = this.imageWidth; this.imageStartHeight = this.imageHeight;
      }

      handleMouseMove(e){ if (!this.userUploadEnabled) return; this.handleMove(e.clientX, e.clientY); }
      handleTouchMove(e) {
        if (!this.userUploadEnabled) return;
        if (!(this.isDragging || this.isResizing || this.isPinching)) return;
        e.preventDefault();
        if (this.isPinching && e.touches.length >= 2) { this.pinchMove(e.touches[0], e.touches[1]); return; }
        this.handleMove(e.touches[0].clientX, e.touches[0].clientY);
      }

      handleMove(clientX, clientY){
        if (!this.userUploadEnabled) return;
        if (this.isDragging){
          const dx = clientX - this.dragStartX, dy = clientY - this.dragStartY;
          this.imageX = this.imageStartX + dx; this.imageY = this.imageStartY + dy; this.updateImageTransform();
        } else if (this.isResizing){
          const dx = clientX - this.dragStartX, dy = clientY - this.dragStartY;
          let w = this.imageStartWidth, h = this.imageStartHeight, x = this.imageStartX, y = this.imageStartY;
          switch(this.resizeDirection){
            case'nw': w = Math.max(this.minSize, Math.min(this.maxSize, this.imageStartWidth - dx)); h = Math.max(this.minSize, Math.min(this.maxSize, this.imageStartHeight - dy)); x = this.imageStartX + (this.imageStartWidth - w); y = this.imageStartY + (this.imageStartHeight - h); break;
            case'ne': w = Math.max(this.minSize, Math.min(this.maxSize, this.imageStartWidth + dx)); h = Math.max(this.minSize, Math.min(this.maxSize, this.imageStartHeight - dy)); y = this.imageStartY + (this.imageStartHeight - h); break;
            case'sw': w = Math.max(this.minSize, Math.min(this.maxSize, this.imageStartWidth - dx)); h = Math.max(this.minSize, Math.min(this.maxSize, this.imageStartHeight + dy)); x = this.imageStartX + (this.imageStartWidth - w); break;
            case'se': w = Math.max(this.minSize, Math.min(this.maxSize, this.imageStartWidth + dx)); h = Math.max(this.minSize, Math.min(this.maxSize, this.imageStartHeight + dy)); break;
          }
          this.imageWidth = w; this.imageHeight = h; this.imageX = x; this.imageY = y; this.updateImageTransform();
        }
      }

      endInteraction() {
        if (!this.userUploadEnabled) return;
        if (this.isDragging || this.isResizing || this.isPinching) this.updateFormInputs();
        this.isDragging = false;
        this.isResizing = false;
        this.isPinching = false;
        this.resizeDirection = '';
        if (this.userImageWrapper) this.userImageWrapper.classList.remove('dragging');
      }

      showFileInfo(name){ if (this.fileInfo){ this.fileInfo.textContent = `Selected: ${name}`; this.fileInfo.style.display='block'; } }

      clearUserImage(){
        if (!this.userUploadEnabled) return;
        this.userImage = null; this.userImageFile = null; this.userImageWrapper = null; this.userImageElement = null;
        this.imageX=0; this.imageY=0; this.imageWidth=200; this.imageHeight=200;
        if (this.uploadInput) this.uploadInput.value='';
        if (this.hiddenFileInput) this.hiddenFileInput.value='';
        if (this.imagePositionInput) this.imagePositionInput.value='';
        if (this.imageScaleInput) this.imageScaleInput.value='';
        if (this.userLayer){
          this.userLayer.innerHTML = `<div class="ai-custom-product-placeholder-{{ ai_gen_id }}">{{ 'image' | placeholder_svg_tag }}<span>{{ block.settings.placeholder_text }}</span></div>`;
        }
        if (this.fileInfo) this.fileInfo.style.display='none';
        if (this.clearButton) this.clearButton.style.display='none';
        if (this.shapeLayer) this.shapeLayer.style.opacity = '{{ block.settings.shape_overlay_opacity | divided_by: 100.0 }}';
      }

      addToCart(){
        if (!this.currentVariantId){ alert('Please select a variant.'); return; }
        if (!this.cartForm){ alert('Form not found.'); return; }
        this.updateFormInputs();
        this.addToCartButton.disabled = true; this.addToCartButton.textContent = 'Adding...';
        this.cartForm.submit();
      }
    }
    customElements.define('product-customizer-{{ ai_gen_id }}', ProductCustomizer{{ ai_gen_id }});

    /* ===== VariantSelects/VariantRadios (original) ===== */
    (function(){
      class VariantSelects{{ ai_gen_id }} extends HTMLElement {
        constructor(){
          super();
          this.addEventListener('change', this.onVariantChange.bind(this));
          this.currencyFormatter = new Intl.NumberFormat('en-IN', { style:'currency', currency:'INR' });
        }
        onVariantChange(){
          this.updateOptions(); this.updateMasterId(); this.updateVariantStatuses(); this.updatePriceInstantly(); this.updateAvailabilityStatus();
          if (!this.currentVariant){ this.setUnavailable(); } else { this.updateURL(); this.updateVariantInput(); }
          const customInput = document.querySelector('#ai-variant-id-{{ ai_gen_id }}');
          if (customInput && this.currentVariant){ customInput.value = this.currentVariant.id; customInput.dispatchEvent(new Event('change', { bubbles:true })); }
          const host = document.querySelector('product-customizer-{{ ai_gen_id }}');
          if (host) host.currentVariantId = this.currentVariant ? this.currentVariant.id : null;
        }
        updateOptions(){
          const fsets = Array.from(this.querySelectorAll('fieldset'));
          this.options = fsets.map(fs => Array.from(fs.querySelectorAll('input')).find(r=>r.checked)?.value);
        }
        updateMasterId(){
          this.currentVariant = this.getVariantData().find(variant => !variant.options.map((opt,i)=> this.options[i]===opt).includes(false));
        }
        updatePriceInstantly(){
          const priceEl = document.querySelector('.ai-current-price-{{ ai_gen_id }}');
          const compareEl = document.querySelector('.ai-compare-price-{{ ai_gen_id }}');
          if (!this.currentVariant || !priceEl) return;
          priceEl.textContent = this.currencyFormatter.format(this.currentVariant.price/100);
          priceEl.setAttribute('data-price', this.currentVariant.price);
          if (compareEl){
            if (this.currentVariant.compare_at_price && this.currentVariant.compare_at_price > this.currentVariant.price){
              compareEl.textContent = this.currencyFormatter.format(this.currentVariant.compare_at_price/100);
              compareEl.setAttribute('data-compare-price', this.currentVariant.compare_at_price);
              compareEl.style.display = 'inline';
            } else {
              compareEl.setAttribute('data-compare-price', '');
              compareEl.style.display = 'none';
            }
          }
        }
        updateAvailabilityStatus(){ }
        updateURL(){ if (!this.currentVariant || this.dataset.updateUrl==='false') return; window.history.replaceState({}, '', `${this.dataset.url}?variant=${this.currentVariant.id}`); }
        updateVariantInput(){
          const forms = document.querySelectorAll(`#product-form-{{ section.id }}, #product-form-installment-{{ section.id }}`);
          forms.forEach(form => { const input = form.querySelector('input[name="id"]'); if (input){ input.value = this.currentVariant.id; input.dispatchEvent(new Event('change', { bubbles:true })); } });
        }
        updateVariantStatuses(){
          const groups = Array.from(this.querySelectorAll('fieldset'));
          const variants = this.getVariantData();
          if (!variants || !variants.length) return;

          const selected = groups.map(fs => {
            const sel = fs.querySelector('input[type="radio"]:checked');
            return sel ? sel.value : null;
          });

          groups.forEach((group, gi) => {
            const inputs = Array.from(group.querySelectorAll('input[type="radio"]'));
            const feasibleSet = new Set(
              variants.filter(v => v.available).filter(v => {
                for (let j = 0; j < groups.length; j++) {
                  const need = selected[j];
                  if (need && v.options[j] !== need) return false;
                }
                return true;
              }).map(v => v.options[gi])
            );
            const hasFeasible = feasibleSet.size > 0;
            inputs.forEach(input => {
              const here = input.value;
              const enable = (hasFeasible ? feasibleSet.has(here) : true) || input.checked;
              input.disabled = !enable;
            });
          });
        }
        setUnavailable(){
          const priceEl = document.querySelector('.ai-current-price-{{ ai_gen_id }}');
          const compareEl = document.querySelector('.ai-compare-price-{{ ai_gen_id }}');
          if (priceEl) priceEl.textContent = 'Unavailable';
          if (compareEl) compareEl.style.display = 'none';
        }
        getVariantData(){ this.variantData = this.variantData || JSON.parse(this.querySelector('[type="application/json"]').textContent); return this.variantData; }
      }
      class VariantRadios extends VariantSelects{{ ai_gen_id }} {}
      customElements.define('variant-radios', VariantRadios);
    })();
  })();
</script>

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
{% if t1Enabled %}
<link id="ai-font-1-{{ ai_gen_id }}" rel="stylesheet"
  href="https://fonts.googleapis.com/css2?family={{ _t1_font | strip | replace: ' ', '+' }}:wght@400;700&display=swap">
{% endif %}
{% if t2Enabled and _t2_font != _t1_font %}
<link id="ai-font-2-{{ ai_gen_id }}" rel="stylesheet"
  href="https://fonts.googleapis.com/css2?family={{ _t2_font | strip | replace: ' ', '+' }}:wght@400;700&display=swap">
{% endif %}
{% if t3Enabled and _t3_font != _t1_font and _t3_font != _t2_font %}
<link id="ai-font-3-{{ ai_gen_id }}" rel="stylesheet"
  href="https://fonts.googleapis.com/css2?family={{ _t3_font | strip | replace: ' ', '+' }}:wght@400;700&display=swap">
{% endif %}

<script>
/* === HTML Textbox renderer with Alignment + Responsive width === */
(function(){
  const layer = document.getElementById('ai-textbox-layer-{{ ai_gen_id }}');
  if (!layer) return;

  const t1Enabled = {{ t1Enabled | json }};
  const t2Enabled = {{ t2Enabled | json }};
  const t3Enabled = {{ t3Enabled | json }};

  const t1Input = document.getElementById('ai-text1-input-{{ ai_gen_id }}');
  const t2Input = document.getElementById('ai-text2-input-{{ ai_gen_id }}');
  const t3Input = document.getElementById('ai-text3-input-{{ ai_gen_id }}');

  const liT1 = document.getElementById('ai-li-text1-content-{{ ai_gen_id }}');
  const liT2 = document.getElementById('ai-li-text2-content-{{ ai_gen_id }}');
  const liT3 = document.getElementById('ai-li-text3-content-{{ ai_gen_id }}');

  const elT1 = document.getElementById('ai-t1-box-{{ ai_gen_id }}');
  const elT2 = document.getElementById('ai-t2-box-{{ ai_gen_id }}');
  const elT3 = document.getElementById('ai-t3-box-{{ ai_gen_id }}');

  // Global responsive knobs
  const BASE_W = {{ block.settings.canvas_base_w | default: 500 }};
  const MIN_W  = {{ block.settings.text_box_min | default: 160 }};
  const MAX_W  = {{ block.settings.text_box_max | default: 480 }};

  const ADMIN = {
    t1: {
      enabled: {{ t1Enabled | json }},
      font: `{{ _t1_font | escape }}`,
      size: {{ cd.text1_size | default: block.settings.text1_size | default: 36 | json }},
      bold: {{ block.settings.text1_bold | default: false | json }},
      italic: {{ block.settings.text1_italic | default: false | json }},
      color: `{{ cd.text1_color | default: block.settings.text1_color | default: '#111111' | escape }}`,
      x: {{ cd.text1_x | default: block.settings.text1_x | default: 50 | json }},
      y: {{ cd.text1_y | default: block.settings.text1_y | default: 20 | json }},
      rot: {{ cd.text1_rotate | default: block.settings.text1_rotate | default: 0 | json }},
      align: `{{ cd.text1_align | default: block.settings.text1_align | default: 'center' | escape }}`,
      width: {{ block.settings.text1_box_width | default: 300 | json }}
    },
    t2: {
      enabled: {{ t2Enabled | json }},
      font: `{{ _t2_font | escape }}`,
      size: {{ cd.text2_size | default: block.settings.text2_size | default: 28 | json }},
      bold: {{ block.settings.text2_bold | default: false | json }},
      italic: {{ block.settings.text2_italic | default: false | json }},
      color: `{{ cd.text2_color | default: block.settings.text2_color | default: '#111111' | escape }}`,
      x: {{ cd.text2_x | default: block.settings.text2_x | default: 50 | json }},
      y: {{ cd.text2_y | default: block.settings.text2_y | default: 80 | json }},
      rot: {{ cd.text2_rotate | default: block.settings.text2_rotate | default: 0 | json }},
      align: `{{ cd.text2_align | default: block.settings.text2_align | default: 'center' | escape }}`,
      width: {{ block.settings.text2_box_width | default: 300 | json }}
    },
    t3: {
      enabled: {{ t3Enabled | json }},
      font: `{{ _t3_font | escape }}`,
      size: {{ cd.text3_size | default: block.settings.text3_size | default: 24 | json }},
      bold: {{ block.settings.text3_bold | default: false | json }},
      italic: {{ block.settings.text3_italic | default: false | json }},
      color: `{{ cd.text3_color | default: block.settings.text3_color | default: '#111111' | escape }}`,
      x: {{ cd.text3_x | default: block.settings.text3_x | default: 50 | json }},
      y: {{ cd.text3_y | default: block.settings.text3_y | default: 50 | json }},
      rot: {{ cd.text3_rotate | default: block.settings.text3_rotate | default: 0 | json }},
      align: `{{ cd.text3_align | default: block.settings.text3_align | default: 'center' | escape }}`,
      width: {{ block.settings.text3_box_width | default: 260 | json }}
    }
  };

  function applyBox(el, cfg, text){
    if (!el || !cfg.enabled) { if (el) el.style.display='none'; return; }
    const content = text || '';
    el.style.display = content.trim() ? 'block' : 'none';
    el.textContent = content;

    // alignment class
    el.classList.remove('ai-align-left-{{ ai_gen_id }}','ai-align-center-{{ ai_gen_id }}','ai-align-right-{{ ai_gen_id }}');
    const alignClass = cfg.align === 'left' ? 'ai-align-left-{{ ai_gen_id }}' :
                       (cfg.align === 'right' ? 'ai-align-right-{{ ai_gen_id }}' : 'ai-align-center-{{ ai_gen_id }}');
    el.classList.add(alignClass);

    // responsive width
    const w = layer.clientWidth || BASE_W;
    const h = layer.clientHeight || BASE_W;
    const SCALE = w / BASE_W;
    const base = cfg.width;
    const boxW = Math.max(MIN_W, Math.min(Math.round(base * SCALE), MAX_W));
    el.style.width = `${boxW}px`;

    // place by alignment around anchor (%)
    const px = (cfg.x/100) * w;
    const py = (cfg.y/100) * h;
    let left = px;
    if (cfg.align === 'center') left = px - boxW/2;
    if (cfg.align === 'right')  left = px - boxW;

    el.style.left = `${left}px`;
    el.style.top  = `${py}px`;

    // style
    el.style.fontFamily = `${cfg.font}, sans-serif`;
    el.style.fontSize   = `${cfg.size}px`;
    el.style.fontWeight = cfg.bold ? '700' : '400';
    el.style.fontStyle  = cfg.italic ? 'italic' : 'normal';
    el.style.color      = cfg.color;

    // rotation
    el.style.transform = `rotate(${cfg.rot}deg)`;
  }

  function syncLI(){
    if (liT1 && t1Input) liT1.value = t1Input.value || '';
    if (liT2 && t2Input) liT2.value = t2Input.value || '';
    if (liT3 && t3Input) liT3.value = t3Input.value || '';
  }

  function render(){
    applyBox(elT1, ADMIN.t1, t1Input?.value || '');
    applyBox(elT2, ADMIN.t2, t2Input?.value || '');
    applyBox(elT3, ADMIN.t3, t3Input?.value || '');
    syncLI();
  }

  if (t1Input) t1Input.addEventListener('input', render);
  if (t2Input) t2Input.addEventListener('input', render);
  if (t3Input) t3Input.addEventListener('input', render);

  render();
  window.addEventListener('resize', render);
  if ('ResizeObserver' in window){ new ResizeObserver(()=>render()).observe(layer); }
})();
</script>

{% schema %}
{
  "name": "Custom product designer",
  "tag": null,
  "settings": [
    { "type": "header", "content": "Product" },
    { "type": "product", "id": "product", "label": "Product" },

    { "type": "header", "content": "Shape mask layer" },
    { "type": "image_picker", "id": "shape_image", "label": "Shape mask image" },
    { "type": "range", "id": "shape_overlay_opacity", "min": 0, "max": 100, "step": 5, "unit": "%", "label": "Shape overlay opacity", "default": 20 },

    { "type": "header", "content": "Admin overlay layer" },
    { "type": "image_picker", "id": "overlay_image", "label": "Admin overlay image" },
    { "type": "range", "id": "overlay_opacity", "min": 0, "max": 100, "step": 5, "unit": "%", "label": "Overlay opacity", "default": 80 },

    { "type": "header", "content": "User image layer" },
    { "type": "checkbox", "id": "enable_user_image", "label": "Enable user image upload & layer", "default": true },

    { "type": "header", "content": "Upload UI text" },
    { "type": "text", "id": "placeholder_text", "label": "Placeholder text", "default": "Upload your image here" },
    { "type": "text", "id": "upload_button_text", "label": "Upload button text", "default": "Choose Image" },
    { "type": "text", "id": "upload_help_text", "label": "Upload help text", "default": "Your image will be shaped by the template above" },
    { "type": "text", "id": "clear_button_text", "label": "Clear button text", "default": "Remove Image" },
    { "type": "text", "id": "cart_button_text", "label": "Add to cart button text", "default": "Add to Cart" },

    { "type": "header", "content": "Style" },
    { "type": "range", "id": "section_padding", "min": 0, "max": 100, "step": 4, "unit": "px", "label": "Section padding", "default": 40 },
    { "type": "range", "id": "border_radius", "min": 0, "max": 40, "step": 2, "unit": "px", "label": "Border radius", "default": 12 },

    { "type": "header", "content": "Typography & colors" },
    { "type": "range", "id": "title_size", "min": 16, "max": 48, "step": 2, "unit": "px", "label": "Title size", "default": 32 },
    { "type": "range", "id": "price_size", "min": 16, "max": 36, "step": 2, "unit": "px", "label": "Price size", "default": 24 },

    { "type": "color", "id": "background_color", "label": "Background color", "default": "#ffffff" },
    { "type": "color", "id": "text_color", "label": "Text color", "default": "#333333" },
    { "type": "color", "id": "price_color", "label": "Price color", "default": "#000000" },
    { "type": "color", "id": "compare_price_color", "label": "Compare at color", "default": "#999999" },
    { "type": "color", "id": "canvas_background", "label": "Canvas background", "default": "#f8f8f8" },
    { "type": "color", "id": "border_color", "label": "Border color", "default": "#e0e0e0" },
    { "type": "color", "id": "upload_background", "label": "Upload area background", "default": "#fafafa" },
    { "type": "color", "id": "upload_hover_background", "label": "Upload area hover background", "default": "#f0f0f0" },
    { "type": "color", "id": "upload_border_color", "label": "Upload border color", "default": "#cccccc" },
    { "type": "color", "id": "button_color", "label": "Button color", "default": "#007bff" },
    { "type": "color", "id": "button_hover_color", "label": "Button hover color", "default": "#0056b3" },
    { "type": "color", "id": "button_text_color", "label": "Button text color", "default": "#ffffff" },
    { "type": "color", "id": "cart_button_color", "label": "Add to cart button color", "default": "#28a745" },
    { "type": "color", "id": "cart_button_hover_color", "label": "Add to cart hover color", "default": "#218838" },
    { "type": "color", "id": "cart_button_text_color", "label": "Add to cart text color", "default": "#ffffff" },

    { "type": "header", "content": "Variant buttons" },
    { "type": "color", "id": "variant_background", "label": "Variant background", "default": "#ffffff" },
    { "type": "color", "id": "variant_text_color", "label": "Variant text color", "default": "#333333" },
    { "type": "color", "id": "variant_border_color", "label": "Variant border color", "default": "#e0e0e0" },
    { "type": "color", "id": "variant_hover_background", "label": "Variant hover background", "default": "#f8f8f8" },
    { "type": "color", "id": "variant_hover_border", "label": "Variant hover border", "default": "#007bff" },
    { "type": "color", "id": "variant_selected_background", "label": "Selected variant background", "default": "#007bff" },
    { "type": "color", "id": "variant_selected_text", "label": "Selected variant text", "default": "#ffffff" },
    { "type": "color", "id": "variant_selected_border", "label": "Selected variant border", "default": "#007bff" },

    { "type": "header", "content": "Text 1 (Admin)" },
    { "type": "checkbox", "id": "enable_text1", "label": "Enable Text 1", "default": true },
    { "type": "text", "id": "text1_font", "label": "Font family (Google Fonts)", "default": "Roboto" },
    { "type": "range", "id": "text1_size", "min": 10, "max": 200, "step": 10, "unit": "px", "label": "Size", "default": 20 },
    { "type": "checkbox", "id": "text1_bold", "label": "Bold", "default": false },
    { "type": "checkbox", "id": "text1_italic", "label": "Italic", "default": false },
    { "type": "range", "id": "text1_x", "min": 1, "max": 100, "step": 1, "unit": "%", "label": "X position (%)", "default": 50 },
    { "type": "range", "id": "text1_y", "min": 1, "max": 100, "step": 1, "unit": "%", "label": "Y position (%)", "default": 20 },
    { "type": "range", "id": "text1_rotate", "min": -180, "max": 180, "step": 10, "unit": "°", "label": "Rotation (°)", "default": 0 },
    { "type": "color", "id": "text1_color", "label": "Text 1 color", "default": "#111111" },
    { "type": "range", "id": "text1_box_width", "min": 80, "max": 800, "step": 10, "unit": "px", "label": "Text 1 box width", "default": 300 },

    { "type": "header", "content": "Text 2 (Admin)" },
    { "type": "checkbox", "id": "enable_text2", "label": "Enable Text 2", "default": true },
    { "type": "text", "id": "text2_font", "label": "Font family (Google Fonts)", "default": "Roboto" },
    { "type": "range", "id": "text2_size", "min": 10, "max": 200, "step": 10, "unit": "px", "label": "Size", "default": 20 },
    { "type": "checkbox", "id": "text2_bold", "label": "Bold", "default": false },
    { "type": "checkbox", "id": "text2_italic", "label": "Italic", "default": false },
    { "type": "range", "id": "text2_x", "min": 1, "max": 100, "step": 1, "unit": "%", "label": "X position (%)", "default": 50 },
    { "type": "range", "id": "text2_y", "min": 1, "max": 100, "step": 1, "unit": "%", "label": "Y position (%)", "default": 80 },
    { "type": "range", "id": "text2_rotate", "min": -180, "max": 180, "step": 10, "unit": "°", "label": "Rotation (°)", "default": 0 },
    { "type": "color", "id": "text2_color", "label": "Text 2 color", "default": "#111111" },
    { "type": "range", "id": "text2_box_width", "min": 80, "max": 800, "step": 10, "unit": "px", "label": "Text 2 box width", "default": 300 },

    { "type": "header", "content": "Text 3 (Admin)" },
    { "type": "checkbox", "id": "enable_text3", "label": "Enable Text 3", "default": true },
    { "type": "text", "id": "text3_font", "label": "Font family (Google Fonts)", "default": "Roboto" },
    { "type": "range", "id": "text3_size", "min": 10, "max": 200, "step": 10, "unit": "px", "label": "Size", "default": 20 },
    { "type": "checkbox", "id": "text3_italic", "label": "Italic", "default": false },
    { "type": "checkbox", "id": "text3_bold", "label": "Bold", "default": false },
    { "type": "range", "id": "text3_x", "min": 1, "max": 100, "step": 1, "unit": "%", "label": "X position (%)", "default": 50 },
    { "type": "range", "id": "text3_y", "min": 1, "max": 100, "step": 1, "unit": "%", "label": "Y position (%)", "default": 50 },
    { "type": "range", "id": "text3_rotate", "min": -180, "max": 180, "step": 10, "unit": "°", "label": "Rotation (°)", "default": 0 },
    { "type": "color", "id": "text3_color", "label": "Text 3 color", "default": "#111111" },
    { "type": "range", "id": "text3_box_width", "min": 80, "max": 800, "step": 10, "unit": "px", "label": "Text 3 box width", "default": 260 },

    { "type": "header", "content": "Textbox Responsiveness" },
    { "type": "range", "id": "canvas_base_w", "min": 320, "max": 1200, "step": 10, "unit": "px", "label": "Canvas base width (for scaling)", "default": 500 },
    { "type": "range", "id": "text_box_min", "min": 80, "max": 360, "step": 10, "unit": "px", "label": "Textbox min width", "default": 160 },
    { "type": "range", "id": "text_box_max", "min": 240, "max": 800, "step": 10, "unit": "px", "label": "Textbox max width", "default": 480 }
  ],
  "presets": [{ "name": "Custom product designer" }]
}
{% endschema %}
