{% doc %}
  @prompt
    cutomizable product section with two layers one for admin to upload shape image and other for user to upload image add mask property to the user image layer so that that user image get the shape of the admin uploaded shape png file, apply shape image layer mask to the user uploaded image, apply shape image masking to the user image layer , everything fine just display selected product title description and prices (whcih updated with product variant price), variant should be in button style and make sure shape image opecity becomes 0 after user selected the image, unable to change variants fix that , unable to select a variant, keep everything as it is just change variant style make sure the user can select variant as it was when in list style, change variant style to button just change style of the variant, add an png overlay for the admin above the user image layer with the same masking feature, do not display selected shape template and overlay image in the website in the right panel, keep everything as it is now just make sure the the user uploaded Image gets stored and the URL is saved as a line item property.
    
    This image should show up in the cart, order details, and admin panel, add drag and resize property to the user uploaded image constrained within the mask also make sure the image should always cover the masked area, add drag and resize property to the user uploaded image constrained within the mask, add drag and no limit resize property to the user uploaded image constrained within the shape mask, resize by holding the corner of the image feature , all property as it is now but by default the file should be covering the mask , all property as it is now but by default the file should be covering the mask 
{% enddoc %}

{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{%- comment -%}
Context product:
- On product page, use `product`.
- Elsewhere (home/collection/custom), fall back to block setting.
{%- endcomment -%}
{% assign context_product = product | default: block.settings.product %}

{%- comment -%}
Auto-source product images from context_product:
- shape_media: first image
- overlay_media: second image
{%- endcomment -%}
{% if context_product %}
  {% assign _images = context_product.media | where: 'media_type', 'image' %}
  {% assign shape_media = _images[0] %}
  {% assign overlay_media = _images[1] %}

  {% if shape_media %}
    {% assign shape_image_url_500 = shape_media | image_url: width: 500 %}
  {% endif %}
  {% if overlay_media %}
    {% assign overlay_image_url_500 = overlay_media | image_url: width: 500 %}
  {% endif %}
{% endif %}

{% style %}
  .ai-custom-product-{{ ai_gen_id }} {
    padding: {{ block.settings.section_padding }}px;
    background-color: {{ block.settings.background_color }};
  }

  .ai-custom-product-container-{{ ai_gen_id }} {
    max-width: 1200px;
    margin: 0 auto;
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 40px;
    align-items: center;
  }

  .ai-custom-product-preview-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    max-width: 500px;
    margin: 0 auto;
  }

  .ai-custom-product-canvas-wrapper-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    aspect-ratio: 1;
    background-color: {{ block.settings.canvas_background }};
    border-radius: {{ block.settings.border_radius }}px;
    overflow: hidden;
    border: 2px solid {{ block.settings.border_color }};
  }

  .ai-custom-product-shape-layer-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 4;
    pointer-events: none;
    transition: opacity 0.3s ease;
  }
  .ai-custom-product-shape-layer-{{ ai_gen_id }} img { width:100%; height:100%; object-fit:contain; }

  .ai-custom-product-overlay-layer-{{ ai_gen_id }} {
    position: absolute; top:0; left:0; width:100%; height:100%; z-index:2; pointer-events:none;
  }
  .ai-custom-product-overlay-layer-{{ ai_gen_id }} img {
    width:100%; height:100%; object-fit:contain;
    /* --- MASK: prefer product first image; fallback to settings.shape_image --- */
    {% if shape_image_url_500 or block.settings.shape_image %}
      {% assign _shape_url_for_mask = shape_image_url_500 | default: block.settings.shape_image | image_url: width: 500 %}
      -webkit-mask-image:url('{{ _shape_url_for_mask }}');
      mask-image:url('{{ _shape_url_for_mask }}');
      -webkit-mask-size:contain; mask-size:contain;
      -webkit-mask-repeat:no-repeat; mask-repeat:no-repeat;
      -webkit-mask-position:center; mask-position:center;
    {% endif %}
  }

  .ai-custom-product-user-layer-{{ ai_gen_id }} {
    position:absolute; top:0; left:0; width:100%; height:100%; z-index:1; overflow:hidden;
    /* --- MASK: prefer product first image; fallback to settings.shape_image --- */
    {% if shape_image_url_500 or block.settings.shape_image %}
      {% assign _shape_url_for_mask = shape_image_url_500 | default: block.settings.shape_image | image_url: width: 500 %}
      -webkit-mask-image:url('{{ _shape_url_for_mask }}');
      mask-image:url('{{ _shape_url_for_mask }}');
      -webkit-mask-size:contain; mask-size:contain;
      -webkit-mask-repeat:no-repeat; mask-repeat:no-repeat;
      -webkit-mask-position:center; mask-position:center;
    {% endif %}
  }
  .ai-custom-product-user-image-container-{{ ai_gen_id }} { position:relative; width:100%; height:100%; }
  .ai-custom-product-user-image-wrapper-{{ ai_gen_id }} { position:absolute; cursor:move; user-select:none; transition:outline .2s ease; transform-origin:center; }
  .ai-custom-product-user-image-wrapper-{{ ai_gen_id }}:hover,
  .ai-custom-product-user-image-wrapper-{{ ai_gen_id }}.dragging { outline:2px solid {{ block.settings.button_color }}; outline-offset:2px; }
  .ai-custom-product-user-image-{{ ai_gen_id }} { width:100%; height:100%; object-fit:cover; display:block; }

  .ai-custom-product-resize-handles-{{ ai_gen_id }} { position:absolute; top:0; left:0; width:100%; height:100%; pointer-events:none; opacity:0; transition:opacity .3s ease; }
  .ai-custom-product-user-image-wrapper-{{ ai_gen_id }}:hover .ai-custom-product-resize-handles-{{ ai_gen_id }} { opacity:1; }
  .ai-custom-product-resize-handle-{{ ai_gen_id }} { position:absolute; width:16px; height:16px; background:{{ block.settings.button_color }}; border:3px solid #fff; border-radius:50%; pointer-events:auto; cursor:pointer; z-index:10; box-shadow:0 2px 4px rgba(0,0,0,.2); }
  .ai-custom-product-resize-handle-{{ ai_gen_id }}.nw{ top:-8px; left:-8px; cursor:nw-resize;}
  .ai-custom-product-resize-handle-{{ ai_gen_id }}.ne{ top:-8px; right:-8px; cursor:ne-resize;}
  .ai-custom-product-resize-handle-{{ ai_gen_id }}.sw{ bottom:-8px; left:-8px; cursor:sw-resize;}
  .ai-custom-product-resize-handle-{{ ai_gen_id }}.se{ bottom:-8px; right:-8px; cursor:se-resize;}

  .ai-custom-product-placeholder-{{ ai_gen_id }} {
    width:100%; height:100%; background:#f8f8f8; display:flex; align-items:center; justify-content:center; flex-direction:column; gap:16px; color:#666; text-align:center; padding:20px;
    /* --- MASK: prefer product first image; fallback to settings.shape_image --- */
    {% if shape_image_url_500 or block.settings.shape_image %}
      {% assign _shape_url_for_mask = shape_image_url_500 | default: block.settings.shape_image | image_url: width: 500 %}
      -webkit-mask-image:url('{{ _shape_url_for_mask }}');
      mask-image:url('{{ _shape_url_for_mask }}');
      -webkit-mask-size:contain; mask-size:contain;
      -webkit-mask-repeat:no-repeat; mask-repeat:no-repeat;
      -webkit-mask-position:center; mask-position:center;
    {% endif %}
  }
  .ai-custom-product-placeholder-{{ ai_gen_id }} svg { width:80px; height:80px; opacity:.5; }

  .ai-custom-product-controls-{{ ai_gen_id }} { display:flex; flex-direction:column; gap:24px; }
  .ai-custom-product-info-{{ ai_gen_id }} { margin-bottom:24px; }
  .ai-custom-product-title-{{ ai_gen_id }} { font-size:{{ block.settings.title_size }}px; color:{{ block.settings.text_color }}; margin:0 0 16px; font-family:{{ settings.type_primary_font.family }}, {{ settings.type_primary_font.fallback_families }}; font-weight:{{ settings.type_primary_font.weight }}; }

  /* price pieces to let anotherlogic-style updater target them */
  .ai-custom-product-price-{{ ai_gen_id }} { font-size:{{ block.settings.price_size }}px; font-weight:600; color:{{ block.settings.price_color }}; margin-bottom:16px; }
  .ai-compare-price-{{ ai_gen_id }} { text-decoration:line-through; color:{{ block.settings.compare_price_color }}; margin-right:8px; font-weight:normal; }
  .ai-current-price-{{ ai_gen_id }} {}

  /* Button-style radios */
  .ai-custom-product-variant-selector-{{ ai_gen_id }} { margin-bottom:20px; }
  .ai-custom-product-variant-label-{{ ai_gen_id }} { display:block; margin-bottom:12px; font-weight:600; color:{{ block.settings.text_color }}; font-size:16px; }
  .ai-custom-product-variant-buttons-{{ ai_gen_id }} { display:flex; flex-wrap:wrap; gap:8px; margin-bottom:24px;}
  .ai-custom-product-variant-buttons-{{ ai_gen_id }}:last-of-type { margin-bottom: 0; }
  .ai-variant-input-{{ ai_gen_id }} { position:absolute; opacity:0; pointer-events:none; }
  .ai-custom-product-variant-button-{{ ai_gen_id }} {
    padding:10px 16px; border:2px solid {{ block.settings.variant_border_color }}; background:{{ block.settings.variant_background }}; color:{{ block.settings.variant_text_color }};
    border-radius:{{ block.settings.button_border_radius }}px; font-size:14px; cursor:pointer; transition:all .3s ease; text-align:center; min-width:80px; display:inline-flex; align-items:center; justify-content:center;
  }
  .ai-variant-input-{{ ai_gen_id }}:checked + .ai-custom-product-variant-button-{{ ai_gen_id }} {
    border-color:{{ block.settings.variant_selected_border }}; background:{{ block.settings.variant_selected_background }}; color:{{ block.settings.variant_selected_text }};
  }
  .ai-variant-input-{{ ai_gen_id }}:disabled + .ai-custom-product-variant-button-{{ ai_gen_id }} { opacity:.5; cursor:not-allowed; background:#f5f5f5; color:#999; }

  .ai-custom-product-upload-section-{{ ai_gen_id }} { border:2px dashed {{ block.settings.upload_border_color }}; border-radius:{{ block.settings.border_radius }}px; padding:24px; text-align:center; background:{{ block.settings.upload_background }}; transition:all .3s ease; }
  .ai-custom-product-upload-section-{{ ai_gen_id }}:hover { border-color:{{ block.settings.button_color }}; background:{{ block.settings.upload_hover_background }}; }
  .ai-custom-product-upload-input-{{ ai_gen_id }} { display:none; }
  .ai-custom-product-upload-button-{{ ai_gen_id }} { display:inline-flex; align-items:center; gap:8px; padding:12px 24px; background:{{ block.settings.button_color }}; color:{{ block.settings.button_text_color }}; border:none; border-radius:{{ block.settings.button_border_radius }}px; cursor:pointer; font-size:14px; transition:background-color .3s ease; }
  .ai-custom-product-upload-button-{{ ai_gen_id }}:hover{ background:{{ block.settings.button_hover_color }}; }
  .ai-custom-product-upload-text-{{ ai_gen_id }}{ margin-top:12px; color:{{ block.settings.text_color }}; font-size:14px; opacity:.8; }
  .ai-custom-product-file-info-{{ ai_gen_id }}{ margin-top:12px; padding:8px 12px; background:{{ block.settings.success_background }}; color:{{ block.settings.success_color }}; border-radius:4px; font-size:14px; }

  .ai-custom-product-image-controls-{{ ai_gen_id }}{ margin-top:16px; padding:16px; background:{{ block.settings.upload_background }}; border-radius:{{ block.settings.border_radius }}px; border:1px solid {{ block.settings.border_color }}; display:none; }
  .ai-custom-product-control-group-{{ ai_gen_id }}{ margin-bottom:12px; }
  .ai-custom-product-control-label-{{ ai_gen_id }}{ display:block; margin-bottom:6px; font-size:14px; font-weight:600; color:{{ block.settings.text_color }}; }
  .ai-custom-product-control-button-{{ ai_gen_id }}{ padding:8px 16px; margin:0 4px 4px 0; background:{{ block.settings.button_color }}; color:{{ block.settings.button_text_color }}; border:none; border-radius:{{ block.settings.button_border_radius }}px; cursor:pointer; font-size:12px; transition:background-color .3s ease; }
  .ai-custom-product-control-button-{{ ai_gen_id }}:hover{ background:{{ block.settings.button_hover_color }}; }

  .ai-custom-product-actions-{{ ai_gen_id }}{ display:flex; flex-direction:column; gap:12px; }
  .ai-custom-product-clear-button-{{ ai_gen_id }}{ padding:8px 16px; background:transparent; color:{{ block.settings.text_color }}; border:1px solid {{ block.settings.border_color }}; border-radius:{{ block.settings.button_border_radius }}px; cursor:pointer; font-size:14px; transition:all .3s ease; }
  .ai-custom-product-clear-button-{{ ai_gen_id }}:hover{ background:{{ block.settings.border_color }}; }
  .ai-custom-product-add-to-cart-{{ ai_gen_id }}{ padding:16px 32px; background:{{ block.settings.cart_button_color }}; color:{{ block.settings.cart_button_text_color }}; border:none; border-radius:{{ block.settings.button_border_radius }}px; cursor:pointer; font-size:16px; font-weight:600; transition:background-color .3s ease; }
  .ai-custom-product-add-to-cart-{{ ai_gen_id }}:hover{ background:{{ block.settings.cart_button_hover_color }}; }
  .ai-custom-product-add-to-cart-{{ ai_gen_id }}:disabled{ background:#ccc; cursor:not-allowed; }

  .ai-custom-product-form-{{ ai_gen_id }}{ display:none; }

  /* === [ADDED] User Text Layer (above admin overlay) === */
  .ai-custom-product-text-layer-{{ ai_gen_id }}{
    position:absolute; top:0; left:0; width:100%; height:100%; z-index:3; pointer-events:none;
  }
  .ai-text-svg-{{ ai_gen_id }}{ width:100%; height:100%; }

  @media screen and (max-width: 768px) {
    .ai-custom-product-container-{{ ai_gen_id }} { grid-template-columns:1fr; gap:24px; }
    .ai-custom-product-preview-{{ ai_gen_id }} { order:-1; }
    .ai-custom-product-variant-buttons-{{ ai_gen_id }} { flex-direction:column; }
    .ai-custom-product-variant-button-{{ ai_gen_id }} { width:100%; }
    .ai-custom-product-resize-handle-{{ ai_gen_id }} { width:20px; height:20px; }
    .ai-custom-product-resize-handle-{{ ai_gen_id }}.nw{ top:-10px; left:-10px;}
    .ai-custom-product-resize-handle-{{ ai_gen_id }}.ne{ top:-10px; right:-10px;}
    .ai-custom-product-resize-handle-{{ ai_gen_id }}.sw{ bottom:-10px; left:-10px;}
    .ai-custom-product-resize-handle-{{ ai_gen_id }}.se{ bottom:-10px; right:-10px;}
  }
{% endstyle %}

<product-customizer-{{ ai_gen_id }}
  class="ai-custom-product-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-custom-product-container-{{ ai_gen_id }}">
    <div class="ai-custom-product-preview-{{ ai_gen_id }}">
      <div class="ai-custom-product-canvas-wrapper-{{ ai_gen_id }}">
        <div class="ai-custom-product-user-layer-{{ ai_gen_id }}" id="ai-user-layer-{{ ai_gen_id }}">
          <div class="ai-custom-product-placeholder-{{ ai_gen_id }}">
            {{ 'image' | placeholder_svg_tag }}
            <span>{{ block.settings.placeholder_text }}</span>
          </div>
        </div>

        {% if overlay_image_url_500 or block.settings.overlay_image %}
          <div class="ai-custom-product-overlay-layer-{{ ai_gen_id }}" id="ai-overlay-layer-{{ ai_gen_id }}">
            <img
              src="{% if overlay_image_url_500 %}{{ overlay_image_url_500 }}{% else %}{{ block.settings.overlay_image | image_url: width: 500 }}{% endif %}"
              alt="Overlay image"
              style="opacity: {{ block.settings.overlay_opacity | divided_by: 100.0 }};"
            >
          </div>
        {% endif %}

        <!-- === [ADDED] User Text Layer (above admin overlay, below shape) === -->
        <div class="ai-custom-product-text-layer-{{ ai_gen_id }}" id="ai-text-layer-{{ ai_gen_id }}">
          <svg class="ai-text-svg-{{ ai_gen_id }}" id="ai-text-svg-{{ ai_gen_id }}" xmlns="http://www.w3.org/2000/svg"></svg>
        </div>

        {% if shape_image_url_500 or block.settings.shape_image %}
          <div class="ai-custom-product-shape-layer-{{ ai_gen_id }}" id="ai-shape-layer-{{ ai_gen_id }}">
            <img
              src="{% if shape_image_url_500 %}{{ shape_image_url_500 }}{% else %}{{ block.settings.shape_image | image_url: width: 500 }}{% endif %}"
              alt="Shape overlay"
              style="opacity: {{ block.settings.shape_overlay_opacity | divided_by: 100.0 }};"
            >
          </div>
        {% endif %}
      </div>
    </div>

    <div class="ai-custom-product-controls-{{ ai_gen_id }}">
      {% if context_product %}
        {% assign current_variant = context_product.selected_or_first_available_variant %}
        <div class="ai-custom-product-info-{{ ai_gen_id }}">
          <h2 class="ai-custom-product-title-{{ ai_gen_id }}">{{ context_product.title }}</h2>

          <!-- Price DOM uses static nodes so the radios component can update instantly -->
          <div class="ai-custom-product-price-{{ ai_gen_id }}" id="ai-product-price-{{ ai_gen_id }}">
            {% if current_variant.compare_at_price > current_variant.price %}
              <span class="ai-compare-price-{{ ai_gen_id }}" data-compare-price="{{ current_variant.compare_at_price }}">
                {{ current_variant.compare_at_price | money }}
              </span>
            {% else %}
              <span class="ai-compare-price-{{ ai_gen_id }}" data-compare-price="" style="display:none;"></span>
            {% endif %}
            <span class="ai-current-price-{{ ai_gen_id }}" data-price="{{ current_variant.price }}">
              {{ current_variant.price | money }}
            </span>
          </div>

          {% if context_product.variants.size > 1 %}
            <!-- button-style radios -->
            <variant-radios
              class="ai-custom-product-variant-selector-{{ ai_gen_id }}"
              data-section="{{ section.id }}"
              data-url="{{ context_product.url }}"
            >
              {% for option in context_product.options_with_values %}
                <label class="ai-custom-product-variant-label-{{ ai_gen_id }}">{{ option.name }}</label>
                <fieldset class="ai-custom-product-variant-buttons-{{ ai_gen_id }}" name="{{ option.name }}">
                  {% for value in option.values %}
                    <input
                      class="ai-variant-input-{{ ai_gen_id }}"
                      type="radio"
                      id="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}-{{ ai_gen_id }}"
                      name="{{ option.name }}"
                      value="{{ value | escape }}"
                      {% if option.selected_value == value %}checked{% endif %}
                    >
                    <label
                      class="ai-custom-product-variant-button-{{ ai_gen_id }}"
                      for="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}-{{ ai_gen_id }}"
                    >
                      {{ value }}
                    </label>
                  {% endfor %}
                </fieldset>
              {% endfor %}
              <script type="application/json">
                {{ context_product.variants | json }}
              </script>
            </variant-radios>
          {% endif %}
        </div>
      {% else %}
        <div class="ai-custom-product-info-{{ ai_gen_id }}">
          <h2 class="ai-custom-product-title-{{ ai_gen_id }}">{{ block.settings.title }}</h2>
          {% if block.settings.description != blank %}
            <div class="ai-custom-product-description-{{ ai_gen_id }}">
              {{ block.settings.description }}
            </div>
          {% endif %}
        </div>
      {% endif %}

      <div class="ai-custom-product-upload-section-{{ ai_gen_id }}">
        <input
          type="file"
          id="ai-user-upload-{{ ai_gen_id }}"
          class="ai-custom-product-upload-input-{{ ai_gen_id }}"
          accept="image/*"
        >
        <label for="ai-user-upload-{{ ai_gen_id }}" class="ai-custom-product-upload-button-{{ ai_gen_id }}">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
            <polyline points="7,10 12,15 17,10"></polyline>
            <line x1="12" y1="15" x2="12" y2="3"></line>
          </svg>
          {{ block.settings.upload_button_text }}
        </label>
        <div class="ai-custom-product-upload-text-{{ ai_gen_id }}">
          {{ block.settings.upload_help_text }}
        </div>
        <div id="ai-file-info-{{ ai_gen_id }}" class="ai-custom-product-file-info-{{ ai_gen_id }}" style="display:none;"></div>
      </div>

      <div class="ai-custom-product-actions-{{ ai_gen_id }}">
        <button type="button" id="ai-clear-button-{{ ai_gen_id }}" class="ai-custom-product-clear-button-{{ ai_gen_id }}" style="display:none;">
          {{ block.settings.clear_button_text }}
        </button>

        {% if context_product %}
          <button type="button" id="ai-add-to-cart-{{ ai_gen_id }}" class="ai-custom-product-add-to-cart-{{ ai_gen_id }}" disabled>
            {{ block.settings.cart_button_text }}
          </button>
        {% endif %}
      </div>

      <!-- === [ADDED] Shopper-visible text inputs only (content only) === -->
      <div class="ai-customer-text-inputs-{{ ai_gen_id }}" style="margin-top:16px;">
        <div style="margin-bottom:10px;">
          <label style="display:block;font-weight:600;margin-bottom:6px;color:{{ block.settings.text_color }};">Text 1</label>
          <input type="text" id="ai-text1-input-{{ ai_gen_id }}" placeholder="Enter Text 1"
            style="width:100%;padding:10px;border:1px solid {{ block.settings.border_color }};border-radius:{{ block.settings.button_border_radius }}px;">
        </div>
        <div>
          <label style="display:block;font-weight:600;margin-bottom:6px;color:{{ block.settings.text_color }};">Text 2</label>
          <input type="text" id="ai-text2-input-{{ ai_gen_id }}" placeholder="Enter Text 2"
            style="width:100%;padding:10px;border:1px solid {{ block.settings.border_color }};border-radius:{{ block.settings.button_border_radius }}px;">
        </div>
      </div>

    </div>
  </div>

  {% if context_product %}
    <form id="ai-cart-form-{{ ai_gen_id }}" class="ai-custom-product-form-{{ ai_gen_id }}" action="/cart/add" method="post" enctype="multipart/form-data">
      <input type="hidden" name="id" id="ai-variant-id-{{ ai_gen_id }}" value="{{ context_product.selected_or_first_available_variant.id }}">
      <input type="hidden" name="quantity" value="1">
      <!-- Store the actual uploaded file so it shows in cart/order/admin -->
      <input type="file" name="properties[Custom Image]" id="ai-hidden-file-{{ ai_gen_id }}" style="display:none;">
      <!-- Extra props to help production: -->
      <input type="hidden" name="properties[Image Position]" id="ai-image-position-{{ ai_gen_id }}">
      <input type="hidden" name="properties[Image Scale]" id="ai-image-scale-{{ ai_gen_id }}">

      <!-- === [ADDED] Save shopper text content to the order === -->
      <input type="hidden" name="properties[Text1]" id="ai-li-text1-content-{{ ai_gen_id }}">
      <input type="hidden" name="properties[Text2]" id="ai-li-text2-content-{{ ai_gen_id }}">
    </form>
  {% endif %}
</product-customizer-{{ ai_gen_id }}>

<script>
  (function() {
    /* ===== Your customizer (image upload/masking/drag/resize + Add to Cart) ===== */
    class ProductCustomizer{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.userImage = null;
        this.userImageFile = null;
        this.userImageWrapper = null;
        this.userImageElement = null;
        this.userLayer = null;
        this.shapeLayer = null;

        this.currentVariantId = {% if context_product %}'{{ context_product.selected_or_first_available_variant.id }}'{% else %}null{% endif %};

        this.isDragging = false;
        this.isResizing = false;
        this.resizeDirection = '';
        this.dragStartX = 0; this.dragStartY = 0;
        this.imageStartX = 0; this.imageStartY = 0;
        this.imageStartWidth = 0; this.imageStartHeight = 0;
        this.imageWidth = 200; this.imageHeight = 200;
        this.imageX = 0; this.imageY = 0;
        this.minSize = 50; this.maxSize = 2000;
        this.isPinching = false;
        this.pinchStartDistance = 0;
        this.pinchCenter = { x: 0, y: 0 };
      }

      connectedCallback() {
        this.uploadInput = this.querySelector('#ai-user-upload-{{ ai_gen_id }}');
        this.userLayer = this.querySelector('#ai-user-layer-{{ ai_gen_id }}');
        this.shapeLayer = this.querySelector('#ai-shape-layer-{{ ai_gen_id }}');
        this.fileInfo = this.querySelector('#ai-file-info-{{ ai_gen_id }}');
        this.clearButton = this.querySelector('#ai-clear-button-{{ ai_gen_id }}');
        this.addToCartButton = this.querySelector('#ai-add-to-cart-{{ ai_gen_id }}');
        this.priceElement = this.querySelector('#ai-product-price-{{ ai_gen_id }}');
        this.cartForm = this.querySelector('#ai-cart-form-{{ ai_gen_id }}');
        this.variantIdInput = this.querySelector('#ai-variant-id-{{ ai_gen_id }}');
        this.hiddenFileInput = this.querySelector('#ai-hidden-file-{{ ai_gen_id }}');
        this.imagePositionInput = this.querySelector('#ai-image-position-{{ ai_gen_id }}');
        this.imageScaleInput = this.querySelector('#ai-image-scale-{{ ai_gen_id }}');
        this.imageControls = this.querySelector('#ai-image-controls-{{ ai_gen_id }}');
        this.controlButtons = this.querySelectorAll('.ai-custom-product-control-button-{{ ai_gen_id }}');

        // [ADDED] Shopper text inputs + hidden LIs
        this.text1Input = document.getElementById('ai-text1-input-{{ ai_gen_id }}');
        this.text2Input = document.getElementById('ai-text2-input-{{ ai_gen_id }}');
        this.liText1 = document.getElementById('ai-li-text1-content-{{ ai_gen_id }}');
        this.liText2 = document.getElementById('ai-li-text2-content-{{ ai_gen_id }}');

        this.setupEventListeners();
      }

      setupEventListeners() {
        if (this.uploadInput) {
          this.uploadInput.addEventListener('change', (e) => this.handleFileUpload(e));
        }
        if (this.clearButton) {
          this.clearButton.addEventListener('click', (e) => { e.preventDefault(); this.clearUserImage(); });
        }
        if (this.addToCartButton) {
          this.addToCartButton.addEventListener('click', (e) => { e.preventDefault(); this.addToCart(); });
        }
        this.controlButtons.forEach(button => {
          button.addEventListener('click', (e) => {
            e.preventDefault();
            this.handleControlAction(button.getAttribute('data-action'));
          });
        });

        document.addEventListener('mousemove', (e) => this.handleMouseMove(e));
        document.addEventListener('mouseup', () => this.endInteraction());
        document.addEventListener('touchmove', (e) => this.handleTouchMove(e), { passive:false });
        document.addEventListener('touchend', () => this.endInteraction());

        // [ADDED] keep hidden inputs synced for text content
        if (this.text1Input) this.text1Input.addEventListener('input', ()=>{ if (this.liText1) this.liText1.value = this.text1Input.value || ''; });
        if (this.text2Input) this.text2Input.addEventListener('input', ()=>{ if (this.liText2) this.liText2.value = this.text2Input.value || ''; });
      }

      handleFileUpload(event) {
        const file = event.target.files[0]; if (!file) return;
        if (!file.type.startsWith('image/')) { alert('Please select an image file.'); return; }

        this.userImageFile = file;
        const reader = new FileReader();
        reader.onload = (e) => {
          this.userImage = e.target.result;
          this.updatePreview();
          this.showFileInfo(file.name);
          this.updateFormInputs();

          if (this.clearButton) this.clearButton.style.display = 'block';
          if (this.addToCartButton) this.addToCartButton.disabled = false;
          if (this.imageControls) this.imageControls.style.display = 'block';

          if (this.shapeLayer) this.shapeLayer.style.opacity = '0'; // hide template after selection
        };
        reader.readAsDataURL(file);
      }

      updateFormInputs() {
        if (this.hiddenFileInput && this.userImageFile) {
          const dt = new DataTransfer(); dt.items.add(this.userImageFile); this.hiddenFileInput.files = dt.files;
        }
        if (this.imagePositionInput) this.imagePositionInput.value = `${this.imageX},${this.imageY}`;
        if (this.imageScaleInput) this.imageScaleInput.value = `${this.imageWidth}x${this.imageHeight}`;

        // sync text content to line-item properties
        if (this.liText1 && this.text1Input) this.liText1.value = this.text1Input.value || '';
        if (this.liText2 && this.text2Input) this.liText2.value = this.text2Input.value || '';
      }

      updatePreview() {
        if (!this.userImage || !this.userLayer) return;

        const container = document.createElement('div');
        container.className = 'ai-custom-product-user-image-container-{{ ai_gen_id }}';

        const wrapper = document.createElement('div');
        wrapper.className = 'ai-custom-product-user-image-wrapper-{{ ai_gen_id }}';

        const img = document.createElement('img');
        img.src = this.userImage; img.className = 'ai-custom-product-user-image-{{ ai_gen_id }}';

        const handles = document.createElement('div'); handles.className = 'ai-custom-product-resize-handles-{{ ai_gen_id }}';
        ['nw','ne','sw','se'].forEach(pos => {
          const h = document.createElement('div'); h.className = `ai-custom-product-resize-handle-{{ ai_gen_id }} ${pos}`;
          h.addEventListener('mousedown', (e)=>this.startResize(e,pos));
          h.addEventListener('touchstart', (e)=>this.startResize(e,pos), { passive:false });
          handles.appendChild(h);
        });

        wrapper.addEventListener('mousedown', (e)=>{ if(!e.target.classList.contains('ai-custom-product-resize-handle-{{ ai_gen_id }}')) this.startDrag(e); });
        wrapper.addEventListener('touchstart', (e) => {
          if (e.touches && e.touches.length === 2) {
            this.startPinch(e);
          } else if (!e.target.classList.contains('ai-custom-product-resize-handle-{{ ai_gen_id }}')) {
            this.startDrag(e);
          }
        }, { passive: false });

        img.onload = () => this.setDefaultImageSize();

        wrapper.appendChild(img); wrapper.appendChild(handles); container.appendChild(wrapper);
        this.userLayer.innerHTML = ''; this.userLayer.appendChild(container);

        this.userImageWrapper = wrapper; this.userImageElement = img;
      }

      setDefaultImageSize() {
        if (!this.userImageWrapper || !this.userLayer) return;
        const w = this.userLayer.offsetWidth, h = this.userLayer.offsetHeight;
        this.imageWidth = w; this.imageHeight = h; this.imageX = 0; this.imageY = 0;
        this.updateImageTransform(); this.updateFormInputs();
      }

      fitImageToContainer() {
        if (!this.userImageWrapper || !this.userLayer) return;
        const w = this.userLayer.offsetWidth, h = this.userLayer.offsetHeight;
        this.imageWidth = Math.min(w*0.6, 300); this.imageHeight = Math.min(h*0.6, 300);
        this.imageX = (w - this.imageWidth)/2; this.imageY = (h - this.imageHeight)/2;
        this.updateImageTransform(); this.updateFormInputs();
      }

      fillContainer() {
        if (!this.userImageWrapper || !this.userLayer) return;
        const w = this.userLayer.offsetWidth, h = this.userLayer.offsetHeight;
        this.imageWidth = w; this.imageHeight = h; this.imageX = 0; this.imageY = 0;
        this.updateImageTransform(); this.updateFormInputs();
      }

      updateImageTransform() {
        if (!this.userImageWrapper) return;
        this.userImageWrapper.style.left = `${this.imageX}px`;
        this.userImageWrapper.style.top = `${this.imageY}px`;
        this.userImageWrapper.style.width = `${this.imageWidth}px`;
        this.userImageWrapper.style.height = `${this.imageHeight}px`;
      }

      startDrag(e) {
        e.preventDefault(); e.stopPropagation(); this.isDragging = true;
        this.userImageWrapper.classList.add('dragging');
        const cx = e.type==='touchstart'? e.touches[0].clientX : e.clientX;
        const cy = e.type==='touchstart'? e.touches[0].clientY : e.clientY;
        this.dragStartX = cx; this.dragStartY = cy; this.imageStartX = this.imageX; this.imageStartY = this.imageY;
      }

      startPinch(e) {
        e.preventDefault();
        this.isPinching = true;
        this.imageStartWidth  = this.imageWidth;
        this.imageStartHeight = this.imageHeight;
        this.imageStartX = this.imageX;
        this.imageStartY = this.imageY;

        const t1 = e.touches[0], t2 = e.touches[1];
        this.pinchStartDistance = Math.hypot(t2.clientX - t1.clientX, t2.clientY - t1.clientY);

        const rect = this.userLayer.getBoundingClientRect();
        this.pinchCenter = {
          x: ((t1.clientX + t2.clientX) / 2) - rect.left,
          y: ((t1.clientY + t2.clientY) / 2) - rect.top
        };
      }

      pinchMove(t1, t2) {
        const dist = Math.hypot(t2.clientX - t1.clientX, t2.clientY - t1.clientY);
        let scale = dist / this.pinchStartDistance;

        const newW = Math.max(this.minSize, Math.min(this.maxSize, this.imageStartWidth  * scale));
        const newH = Math.max(this.minSize, Math.min(this.maxSize, this.imageStartHeight * scale));

        const sx = newW / this.imageStartWidth;
        const sy = newH / this.imageStartHeight;
        const newX = this.pinchCenter.x - (this.pinchCenter.x - this.imageStartX) * sx;
        const newY = this.pinchCenter.y - (this.pinchCenter.y - this.imageStartY) * sy;

        this.imageWidth = newW; this.imageHeight = newH;
        this.imageX = newX; this.imageY = newY;

        this.updateImageTransform();
      }

      startResize(e, dir) {
        e.preventDefault(); e.stopPropagation(); this.isResizing = true; this.resizeDirection = dir;
        const cx = e.type==='touchstart'? e.touches[0].clientX : e.clientX;
        const cy = e.type==='touchstart'? e.touches[0].clientY : e.clientY;
        this.dragStartX = cx; this.dragStartY = cy;
        this.imageStartX = this.imageX; this.imageStartY = this.imageY;
        this.imageStartWidth = this.imageWidth; this.imageStartHeight = this.imageHeight;
      }

      handleMouseMove(e){ this.handleMove(e.clientX, e.clientY); }
      handleTouchMove(e) {
        if (!(this.isDragging || this.isResizing || this.isPinching)) return;
        e.preventDefault();
        if (this.isPinching && e.touches.length >= 2) {
          this.pinchMove(e.touches[0], e.touches[1]);
          return;
        }
        this.handleMove(e.touches[0].clientX, e.touches[0].clientY);
      }

      handleMove(clientX, clientY){
        if (this.isDragging){
          const dx = clientX - this.dragStartX, dy = clientY - this.dragStartY;
          this.imageX = this.imageStartX + dx; this.imageY = this.imageStartY + dy; this.updateImageTransform();
        } else if (this.isResizing){
          const dx = clientX - this.dragStartX, dy = clientY - this.dragStartY;
          let w = this.imageStartWidth, h = this.imageStartHeight, x = this.imageStartX, y = this.imageStartY;
          switch(this.resizeDirection){
            case'nw': w = Math.max(this.minSize, Math.min(this.maxSize, this.imageStartWidth - dx)); h = Math.max(this.minSize, Math.min(this.maxSize, this.imageStartHeight - dy)); x = this.imageStartX + (this.imageStartWidth - w); y = this.imageStartY + (this.imageStartHeight - h); break;
            case'ne': w = Math.max(this.minSize, Math.min(this.maxSize, this.imageStartWidth + dx)); h = Math.max(this.minSize, Math.min(this.maxSize, this.imageStartHeight - dy)); y = this.imageStartY + (this.imageStartHeight - h); break;
            case'sw': w = Math.max(this.minSize, Math.min(this.maxSize, this.imageStartWidth - dx)); h = Math.max(this.minSize, Math.min(this.maxSize, this.imageStartHeight + dy)); x = this.imageStartX + (this.imageStartWidth - w); break;
            case'se': w = Math.max(this.minSize, Math.min(this.maxSize, this.imageStartWidth + dx)); h = Math.max(this.minSize, Math.min(this.maxSize, this.imageStartHeight + dy)); break;
          }
          this.imageWidth = w; this.imageHeight = h; this.imageX = x; this.imageY = y; this.updateImageTransform();
        }
      }

      endInteraction() {
        if (this.isDragging || this.isResizing || this.isPinching) this.updateFormInputs();
        this.isDragging = false;
        this.isResizing = false;
        this.isPinching = false;
        this.resizeDirection = '';
        if (this.userImageWrapper) this.userImageWrapper.classList.remove('dragging');
      }

      handleControlAction(action){
        if (!this.userImageWrapper) return;
        if (action==='center'){ const w=this.userLayer.offsetWidth, h=this.userLayer.offsetHeight; this.imageX=(w-this.imageWidth)/2; this.imageY=(h-this.imageHeight)/2; this.updateImageTransform(); this.updateFormInputs(); }
        if (action==='fit') this.fitImageToContainer();
        if (action==='fill') this.fillContainer();
        if (action==='reset') this.setDefaultImageSize();
      }

      showFileInfo(name){ if (this.fileInfo){ this.fileInfo.textContent = `Selected: ${name}`; this.fileInfo.style.display='block'; } }

      clearUserImage(){
        this.userImage = null; this.userImageFile = null; this.userImageWrapper = null; this.userImageElement = null;
        this.imageX=0; this.imageY=0; this.imageWidth=200; this.imageHeight=200;
        if (this.uploadInput) this.uploadInput.value='';
        if (this.hiddenFileInput) this.hiddenFileInput.value='';
        if (this.imagePositionInput) this.imagePositionInput.value='';
        if (this.imageScaleInput) this.imageScaleInput.value='';
        if (this.userLayer){
          this.userLayer.innerHTML = `<div class="ai-custom-product-placeholder-{{ ai_gen_id }}">{{ 'image' | placeholder_svg_tag }}<span>{{ block.settings.placeholder_text }}</span></div>`;
        }
        if (this.fileInfo) this.fileInfo.style.display='none';
        if (this.clearButton) this.clearButton.style.display='none';
        if (this.addToCartButton) this.addToCartButton.disabled = true;
        if (this.imageControls) this.imageControls.style.display='none';
        if (this.shapeLayer) this.shapeLayer.style.opacity = '{{ block.settings.shape_overlay_opacity | divided_by: 100.0 }}';
      }

      addToCart(){
        if (!this.userImage){ alert('Please upload an image first.'); return; }
        if (!this.currentVariantId){ alert('Please select a variant.'); return; }
        if (!this.cartForm){ alert('Form not found.'); return; }
        // sync text content just before submit
        if (this.liText1 && this.text1Input) this.liText1.value = this.text1Input.value || '';
        if (this.liText2 && this.text2Input) this.liText2.value = this.text2Input.value || '';
        this.addToCartButton.disabled = true; this.addToCartButton.textContent = 'Adding...';
        this.cartForm.submit();
      }
    }
    customElements.define('product-customizer-{{ ai_gen_id }}', ProductCustomizer{{ ai_gen_id }});

    /* ===== anotherlogic-style VariantSelects/VariantRadios ===== */
    (function(){
      class VariantSelects{{ ai_gen_id }} extends HTMLElement {
        constructor(){
          super();
          this.addEventListener('change', this.onVariantChange.bind(this));
          this.currencyFormatter = new Intl.NumberFormat('en-IN', { style:'currency', currency:'INR' });
        }
        onVariantChange(){
          this.updateOptions(); this.updateMasterId(); this.updateVariantStatuses(); this.updatePriceInstantly(); this.updateAvailabilityStatus();
          if (!this.currentVariant){ this.setUnavailable(); } else { this.updateURL(); this.updateVariantInput(); }
          // also update our hidden variant input for custom form
          const customInput = document.querySelector('#ai-variant-id-{{ ai_gen_id }}');
          if (customInput && this.currentVariant){ customInput.value = this.currentVariant.id; customInput.dispatchEvent(new Event('change', { bubbles:true })); }
          // wire through to custom element state
          const host = document.querySelector('product-customizer-{{ ai_gen_id }}');
          if (host) host.currentVariantId = this.currentVariant ? this.currentVariant.id : null;
        }
        updateOptions(){
          const fsets = Array.from(this.querySelectorAll('fieldset'));
          this.options = fsets.map(fs => Array.from(fs.querySelectorAll('input')).find(r=>r.checked)?.value);
        }
        updateMasterId(){
          this.currentVariant = this.getVariantData().find(variant => !variant.options.map((opt,i)=> this.options[i]===opt).includes(false));
        }
        updatePriceInstantly(){
          const priceEl = document.querySelector('.ai-current-price-{{ ai_gen_id }}');
          const compareEl = document.querySelector('.ai-compare-price-{{ ai_gen_id }}');
          if (!this.currentVariant || !priceEl) return;
          priceEl.textContent = this.currencyFormatter.format(this.currentVariant.price/100);
          priceEl.setAttribute('data-price', this.currentVariant.price);
          if (compareEl){
            if (this.currentVariant.compare_at_price && this.currentVariant.compare_at_price > this.currentVariant.price){
              compareEl.textContent = this.currencyFormatter.format(this.currentVariant.compare_at_price/100);
              compareEl.setAttribute('data-compare-price', this.currentVariant.compare_at_price);
              compareEl.style.display = 'inline';
            } else {
              compareEl.setAttribute('data-compare-price', '');
              compareEl.style.display = 'none';
            }
          }
        }
        updateAvailabilityStatus(){ /* optional: add badge handling if needed */ }
        updateURL(){ if (!this.currentVariant || this.dataset.updateUrl==='false') return; window.history.replaceState({}, '', `${this.dataset.url}?variant=${this.currentVariant.id}`); }
        updateVariantInput(){
          const forms = document.querySelectorAll(`#product-form-{{ section.id }}, #product-form-installment-{{ section.id }}`);
          forms.forEach(form => { const input = form.querySelector('input[name="id"]'); if (input){ input.value = this.currentVariant.id; input.dispatchEvent(new Event('change', { bubbles:true })); } });
        }
updateVariantStatuses(){
  const groups   = Array.from(this.querySelectorAll('fieldset'));
  const variants = this.getVariantData();
  if (!variants || !variants.length) return;

  const selected = groups.map(fs => {
    const sel = fs.querySelector('input[type="radio"]:checked');
    return sel ? sel.value : null;
  });

  groups.forEach((group, gi) => {
    const inputs = Array.from(group.querySelectorAll('input[type="radio"]'));
    const feasibleSet = new Set(
      variants.filter(v => v.available).filter(v => {
        for (let j = 0; j < groups.length; j++) {
          const need = selected[j];
          if (need && v.options[j] !== need) return false;
        }
        return true;
      }).map(v => v.options[gi])
    );
    const hasFeasible = feasibleSet.size > 0;
    inputs.forEach(input => {
      const here = input.value;
      const enable = (hasFeasible ? feasibleSet.has(here) : true) || input.checked;
      input.disabled = !enable;
    });
  });
}

        setInputAvailability(inputs, availableValues){
          inputs.forEach(input => { if (availableValues.includes(input.value)) input.removeAttribute('disabled'); else input.setAttribute('disabled', true); });
        }
        setUnavailable(){
          const priceEl = document.querySelector('.ai-current-price-{{ ai_gen_id }}');
          const compareEl = document.querySelector('.ai-compare-price-{{ ai_gen_id }}');
          if (priceEl) priceEl.textContent = 'Unavailable';
          if (compareEl) compareEl.style.display = 'none';
        }
        getVariantData(){ this.variantData = this.variantData || JSON.parse(this.querySelector('[type="application/json"]').textContent); return this.variantData; }
      }
      class VariantRadios extends VariantSelects{{ ai_gen_id }} {}
      customElements.define('variant-radios', VariantRadios);
    })();

    /* === [ADDED] Google Fonts (from admin choices) === */
    {%- assign _t1_font = block.settings.text1_font | default: 'Roboto' -%}
    {%- assign _t2_font = block.settings.text2_font | default: 'Roboto' -%}
  })();
</script>
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link id="ai-font-1-{{ ai_gen_id }}" rel="stylesheet" href="https://fonts.googleapis.com/css2?family={{ _t1_font | replace: ' ', '+' }}:ital,wght@0,400;0,700;1,400;1,700&display=swap">
{% unless _t2_font == _t1_font %}
<link id="ai-font-2-{{ ai_gen_id }}" rel="stylesheet" href="https://fonts.googleapis.com/css2?family={{ _t2_font | replace: ' ', '+' }}:ital,wght@0,400;0,700;1,400;1,700&display=swap">
{% endunless %}

<script>
/* === [ADDED] Admin-driven two-text renderer (no user styling, content only) === */
(function(){
  const svg = document.getElementById('ai-text-svg-{{ ai_gen_id }}');
  if (!svg) return;

  const t1Input = document.getElementById('ai-text1-input-{{ ai_gen_id }}');
  const t2Input = document.getElementById('ai-text2-input-{{ ai_gen_id }}');

  const liT1 = document.getElementById('ai-li-text1-content-{{ ai_gen_id }}');
  const liT2 = document.getElementById('ai-li-text2-content-{{ ai_gen_id }}');

  const ADMIN = {
    t1: {
      font: `{{ block.settings.text1_font | default: 'Roboto' }}`,
      size: {{ block.settings.text1_size | default: 36 }},
      bold: {{ block.settings.text1_bold | default: false }},
      italic: {{ block.settings.text1_italic | default: false }},
      x: {{ block.settings.text1_x | default: 50 }},
      y: {{ block.settings.text1_y | default: 20 }},
      rot: {{ block.settings.text1_rotate | default: 0 }},
      curve: {{ block.settings.text1_curve | default: 0 }},
      color: `{{ block.settings.text1_color | default: '#111111' }}`,
      origin: `{{ block.settings.text1_origin | default: 'center' }}`
    },
    t2: {
      font: `{{ block.settings.text2_font | default: 'Roboto' }}`,
      size: {{ block.settings.text2_size | default: 28 }},
      bold: {{ block.settings.text2_bold | default: false }},
      italic: {{ block.settings.text2_italic | default: false }},
      x: {{ block.settings.text2_x | default: 50 }},
      y: {{ block.settings.text2_y | default: 80 }},
      rot: {{ block.settings.text2_rotate | default: 0 }},
      curve: {{ block.settings.text2_curve | default: 0 }},
      color: `{{ block.settings.text2_color | default: '#111111' }}`,
      origin: `{{ block.settings.text2_origin | default: 'center' }}`
    }
  };

  function makeUnit(id){
    const g = document.createElementNS('http://www.w3.org/2000/svg','g');
    const defs = document.createElementNS('http://www.w3.org/2000/svg','defs');
    const path = document.createElementNS('http://www.w3.org/2000/svg','path');
    path.setAttribute('id', `ai-${id}-path-{{ ai_gen_id }}`);
    defs.appendChild(path);

    const textEl = document.createElementNS('http://www.w3.org/2000/svg','text');
    const textPath = document.createElementNS('http://www.w3.org/2000/svg','textPath');
    textPath.setAttributeNS('http://www.w3.org/1999/xlink','xlink:href', `#ai-${id}-path-{{ ai_gen_id }}`);
    textEl.appendChild(textPath);

    svg.appendChild(defs);
    svg.appendChild(g);
    g.appendChild(textEl);

    return { g, path, textEl, textPath };
  }

  const u1 = makeUnit('t1');
  const u2 = makeUnit('t2');

  function pathFor(admin){
    const w = svg.clientWidth || 500, h = svg.clientHeight || 500;
    const cx = admin.x/100 * w, cy = admin.y/100 * h;
    if (admin.curve === 0) return `M ${cx-200} ${cy} L ${cx+200} ${cy}`;
    const r = Math.max(50, 1000 - Math.abs(admin.curve)*5);
    const span = Math.PI/2 * (Math.min(1, Math.abs(admin.curve)/90));
    const a0 = Math.PI/2 - span, a1 = Math.PI/2 + span;
    const sign = admin.curve >= 0 ? 1 : -1;
    const x0 = cx + r*Math.cos(a0), y0 = cy + sign*r*Math.sin(a0);
    const x1 = cx + r*Math.cos(a1), y1 = cy + sign*r*Math.sin(a1);
    const largeArc = span > Math.PI/2 ? 1 : 0;
    const sweep = (sign>0) ? 0 : 1;
    return `M ${x0.toFixed(1)} ${y0.toFixed(1)} A ${r.toFixed(1)} ${r.toFixed(1)} 0 ${largeArc} ${sweep} ${x1.toFixed(1)} ${y1.toFixed(1)}`;
  }

  function applyAdmin(unit, admin, text){
    unit.path.setAttribute('d', pathFor(admin));
    const anchor = admin.origin === 'left' ? 'start' : (admin.origin === 'right' ? 'end' : 'middle');
    unit.textPath.setAttribute('startOffset', anchor==='start' ? '0%' : (anchor==='end' ? '100%' : '50%'));
    unit.textPath.setAttribute('text-anchor', anchor);

    unit.textPath.textContent = text || '';
    unit.textEl.setAttribute('font-family', `${admin.font}, sans-serif`);
    unit.textEl.setAttribute('font-size', admin.size);
    unit.textEl.setAttribute('font-weight', admin.bold ? 700 : 400);
    unit.textEl.setAttribute('font-style', admin.italic ? 'italic' : 'normal');
    unit.textEl.setAttribute('fill', admin.color);
    unit.g.setAttribute('transform', `rotate(${admin.rot} ${admin.x}% ${admin.y}%)`);
    unit.g.style.display = (text && text.trim()) ? 'block' : 'none';
  }

  function syncLI(){
    if (liT1) liT1.value = t1Input?.value || '';
    if (liT2) liT2.value = t2Input?.value || '';
  }

  function render(){
    applyAdmin(u1, ADMIN.t1, t1Input?.value || '');
    applyAdmin(u2, ADMIN.t2, t2Input?.value || '');
    syncLI();
  }

  t1Input && t1Input.addEventListener('input', render);
  t2Input && t2Input.addEventListener('input', render);

  render();
  window.addEventListener('resize', render);
})();
</script>

{% schema %}
{
  "name": "Custom product designer",
  "tag": null,
  "settings": [
    { "type": "header", "content": "Product" },
    { "type": "product", "id": "product", "label": "Product" },

    { "type": "header", "content": "Fallback content" },
    { "type": "text", "id": "title", "label": "Fallback title", "default": "Customize Your Product" },
    { "type": "richtext", "id": "description", "label": "Fallback description", "default": "<p>Upload your image and see it shaped by our custom design template.</p>" },

    { "type": "header", "content": "Shape mask layer" },
    { "type": "image_picker", "id": "shape_image", "label": "Shape mask image" },
    { "type": "range", "id": "shape_overlay_opacity", "min": 0, "max": 100, "step": 5, "unit": "%", "label": "Shape overlay opacity", "default": 20 },

    { "type": "header", "content": "Admin overlay layer" },
    { "type": "image_picker", "id": "overlay_image", "label": "Admin overlay image" },
    { "type": "range", "id": "overlay_opacity", "min": 0, "max": 100, "step": 5, "unit": "%", "label": "Overlay opacity", "default": 80 },

    { "type": "header", "content": "Upload settings" },
    { "type": "text", "id": "placeholder_text", "label": "Placeholder text", "default": "Upload your image here" },
    { "type": "text", "id": "upload_button_text", "label": "Upload button text", "default": "Choose Image" },
    { "type": "text", "id": "upload_help_text", "label": "Upload help text", "default": "Your image will be shaped by the template above" },
    { "type": "text", "id": "clear_button_text", "label": "Clear button text", "default": "Remove Image" },
    { "type": "text", "id": "cart_button_text", "label": "Add to cart button text", "default": "Add to Cart" },

    { "type": "header", "content": "Style" },
    { "type": "range", "id": "section_padding", "min": 0, "max": 100, "step": 4, "unit": "px", "label": "Section padding", "default": 40 },
    { "type": "range", "id": "border_radius", "min": 0, "max": 40, "step": 2, "unit": "px", "label": "Border radius", "default": 12 },
    { "type": "range", "id": "button_border_radius", "min": 0, "max": 20, "step": 1, "unit": "px", "label": "Button border radius", "default": 6 },

    { "type": "header", "content": "Typography" },
    { "type": "range", "id": "title_size", "min": 16, "max": 48, "step": 2, "unit": "px", "label": "Title size", "default": 32 },
    { "type": "range", "id": "text_size", "min": 12, "max": 24, "step": 1, "unit": "px", "label": "Text size", "default": 16 },
    { "type": "range", "id": "price_size", "min": 16, "max": 36, "step": 2, "unit": "px", "label": "Price size", "default": 24 },

    { "type": "header", "content": "Colors" },
    { "type": "color", "id": "background_color", "label": "Background color", "default": "#ffffff" },
    { "type": "color", "id": "text_color", "label": "Text color", "default": "#333333" },
    { "type": "color", "id": "price_color", "label": "Price color", "default": "#000000" },
    { "type": "color", "id": "compare_price_color", "label": "Compare price color", "default": "#999999" },
    { "type": "color", "id": "canvas_background", "label": "Canvas background", "default": "#f8f8f8" },
    { "type": "color", "id": "border_color", "label": "Border color", "default": "#e0e0e0" },
    { "type": "color", "id": "upload_background", "label": "Upload area background", "default": "#fafafa" },
    { "type": "color", "id": "upload_hover_background", "label": "Upload area hover background", "default": "#f0f0f0" },
    { "type": "color", "id": "upload_border_color", "label": "Upload border color", "default": "#cccccc" },
    { "type": "color", "id": "button_color", "label": "Button color", "default": "#007bff" },
    { "type": "color", "id": "button_hover_color", "label": "Button hover color", "default": "#0056b3" },
    { "type": "color", "id": "button_text_color", "label": "Button text color", "default": "#ffffff" },
    { "type": "color", "id": "cart_button_color", "label": "Add to cart button color", "default": "#28a745" },
    { "type": "color", "id": "cart_button_hover_color", "label": "Add to cart hover color", "default": "#218838" },
    { "type": "color", "id": "cart_button_text_color", "label": "Add to cart text color", "default": "#ffffff" },

    { "type": "color", "id": "success_background", "label": "Success background", "default": "#d4edda" },
    { "type": "color", "id": "success_color", "label": "Success text color", "default": "#155724" },

    { "type": "header", "content": "Variant buttons" },
    { "type": "color", "id": "variant_background", "label": "Variant background", "default": "#ffffff" },
    { "type": "color", "id": "variant_text_color", "label": "Variant text color", "default": "#333333" },
    { "type": "color", "id": "variant_border_color", "label": "Variant border color", "default": "#e0e0e0" },
    { "type": "color", "id": "variant_hover_background", "label": "Variant hover background", "default": "#f8f8f8" },
    { "type": "color", "id": "variant_hover_border", "label": "Variant hover border", "default": "#007bff" },
    { "type": "color", "id": "variant_selected_background", "label": "Selected variant background", "default": "#007bff" },
    { "type": "color", "id": "variant_selected_text", "label": "Selected variant text", "default": "#ffffff" },
    { "type": "color", "id": "variant_selected_border", "label": "Selected variant border", "default": "#007bff" },

    { "type": "header", "content": "Text 1 (Admin settings)" },
    { "type": "text", "id": "text1_font", "label": "Font family (Google Fonts name)", "default": "Roboto" },
    { "type": "range", "id": "text1_size", "min": 10, "max": 200, "step": 10, "unit": "px", "label": "Size", "default": 20 },
    { "type": "checkbox", "id": "text1_bold", "label": "Bold", "default": false },
    { "type": "checkbox", "id": "text1_italic", "label": "Italic", "default": false },
    { "type": "range", "id": "text1_x", "min": 0, "max": 100, "step": 1, "unit": "%", "label": "X position (%)", "default": 50 },
    { "type": "range", "id": "text1_y", "min": 0, "max": 100, "step": 1, "unit": "%", "label": "Y position (%)", "default": 20 },
    { "type": "range", "id": "text1_rotate", "min": -180, "max": 180, "step": 10, "unit": "°", "label": "Rotation (°)", "default": 0 },
    { "type": "range", "id": "text1_curve", "min": -180, "max": 180, "step": 10, "unit": "°", "label": "Curve angle (°)", "default": 0 },
    { "type": "select", "id": "text1_origin", "label": "Bend origin", "default": "center", "options": [
      { "value": "left", "label": "Left" },
      { "value": "center", "label": "Center" },
      { "value": "right", "label": "Right" }
    ]},
    { "type": "color", "id": "text1_color", "label": "Selected variant text", "default": "#ffffff" },

    { "type": "header", "content": "Text 2 (Admin settings)" },
    { "type": "text", "id": "text2_font", "label": "Font family (Google Fonts name)", "default": "Roboto" },
    { "type": "range", "id": "text2_size", "min": 10, "max": 200, "step": 10, "unit": "px", "label": "Size", "default": 20 },
    { "type": "checkbox", "id": "text2_bold", "label": "Bold", "default": false },
    { "type": "checkbox", "id": "text2_italic", "label": "Italic", "default": false },
    { "type": "range", "id": "text2_x", "min": 1, "max": 100, "step": 1, "unit": "%", "label": "X position (%)", "default": 50 },
    { "type": "range", "id": "text2_y", "min": 1, "max": 100, "step": 1, "unit": "%", "label": "Y position (%)", "default": 80 },
    { "type": "range", "id": "text2_rotate", "min": -180, "max": 180, "step": 10, "unit": "°", "label": "Rotation (°)", "default": 0 },
    { "type": "range", "id": "text2_curve", "min": -180, "max": 180, "step": 10, "unit": "°", "label": "Curve angle (°)", "default": 0 },
    { "type": "select", "id": "text2_origin", "label": "Bend origin", "default": "center", "options": [
      { "value": "left", "label": "Left" },
      { "value": "center", "label": "Center" },
      { "value": "right", "label": "Right" }
    ]},
    { "type": "color", "id": "text2_color", "label": "Selected variant text", "default": "#ffffff" },
  ],
  "presets": [{ "name": "Custom product designer" }]
}
{% endschema %}
